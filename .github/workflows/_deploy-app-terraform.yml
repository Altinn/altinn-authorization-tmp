name: "Template: Terraform CD"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: GitHub environment
        required: true

      working_dir:
        type: string
        description: Name of the working directory
        required: true

      tf_state:
        type: string
        description: Name of the Terraform state file
        required: true

      tf_args:
        type: string
        description: Additional TF args
        required: false

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: 1.10.2

jobs:
  plan:
    name: Plan
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Terraform Set TFVARS
        run: echo "TF_VARS_FILE=$(echo ${{ inputs.environment }} | tr '[:upper:]' '[:lower:]').tfvars" >> $GITHUB_ENV

      - name: Terraform Plan
        uses: altinn/altinn-platform/actions/terraform/plan@main
        with:
          working_directory: ${{ inputs.working_dir }}
          oidc_type: environment
          oidc_value: ${{ inputs.environment }}
          arm_client_id: ${{ vars.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          tf_version: ${{ env.TF_VERSION }}
          tf_state_name: ${{ inputs.tf_state }}
          tf_args: -var-file=${{ env.TF_VARS_FILE }} ${{ inputs.tf_args }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}

  apply:
    name: Deploy
    environment: ${{ inputs.environment }}
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install .NET # For Running CLI
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4

      - name: Azure CLI Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ vars.ARM_PGSQLSRV_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved dnsutils

      - name: Dump OpenVPN Config
        run: |
          cat << EOF > .github/openvpn.config
          ${{ secrets.OVPN_CONFIG }}
          EOF

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5 # v3.1.0
        with:
          echo_config: false
          config_file: .github/openvpn.config

      - name: Update DNS
        run: |
          sudo resolvectl dns tun0 ${{ secrets.OVPN_NAMESERVER }}
          sudo resolvectl flush-caches

      - name: Terraform Apply
        uses: altinn/altinn-platform/actions/terraform/apply@main
        id: apply
        with:
          working_directory: ${{ inputs.working_dir }}
          oidc_type: environment
          oidc_value: ${{ inputs.environment }}
          arm_client_id: ${{ vars.ARM_CLIENT_ID }}
          arm_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          tf_version: ${{ env.TF_VERSION }}
          tf_state_name: ${{ inputs.tf_state }}

      - name: Cleanup
        if: always()
        run: |
          shred -u .github/openvpn.config || true
