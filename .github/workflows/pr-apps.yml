name: "PR: Apps"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  find-verticals:
    uses: ./.github/workflows/_find-verticals.yml
    with:
      type: app

  check-slns:
    name: Check sln files
    if: ((github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) || github.event_name == 'push') && github.repository_owner == 'Altinn' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: |
            - cwd: .github/scripts
              args: [--frozen-lockfile]
            - args: [--global, tsx]

      - name: Update all sln files
        run: tsx ./.github/scripts/update-sln-files.mts

      - name: Assert that no sln files have changed
        run: git diff --exit-code

  # ci:
  #   name: CI
  #   runs-on: ubuntu-latest
  #   needs: find-verticals
  #   strategy:
  #     matrix: ${{ fromJson(needs.find-verticals.outputs.matrix) }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install .NET
  #       uses: actions/setup-dotnet@v4

  #     - name: Build
  #       working-directory: ${{ matrix.path }}
  #       run: dotnet build

  #     - name: Test
  #       if: always()
        # working-directory: ${{ matrix.path }}
  #       run: dotnet test --no-build

  build-and-test:
    name: Build and Test
    strategy:
      matrix: ${{ fromJson(needs.find-verticals.outputs.matrix) }}
    if: ((github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) || github.event_name == 'push') && github.repository_owner == 'Altinn' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Restore dotnet workloads
        working-directory: ${{ matrix.path }}
        run: dotnet workload restore

      - name: Build & Test
        working-directory: ${{ matrix.path }}
        run: |
          dotnet build -v m
          dotnet test --no-build -v m

  analyze:
    if: ((github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) || github.event_name == 'push') && github.repository_owner == 'Altinn' && github.actor != 'dependabot[bot]'
    name: Analyze
    strategy:
      matrix: ${{ fromJson(needs.find-verticals.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: 17

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Restore dotnet workloads
        working-directory: ${{ matrix.path }}
        run: dotnet workload restore

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        working-directory: ${{ matrix.path }}
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Analyze
        working-directory: ${{ matrix.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          dotnet tool install --global dotnet-coverage
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"Altinn_altinn-register" /o:"altinn" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths="**/*.trx" /d:sonar.cs.vscoveragexml.reportsPaths="TestResults/coverage.xml"

          dotnet build --no-incremental
          dotnet coverage collect 'dotnet test --no-build --results-directory TestResults/' -f xml -o 'TestResults/coverage.xml'

          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
