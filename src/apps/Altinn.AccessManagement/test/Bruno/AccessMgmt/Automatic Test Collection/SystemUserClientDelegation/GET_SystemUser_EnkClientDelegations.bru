meta {
  name: GET_SystemUser_EnkClientDelegations
  type: http
  seq: 9
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/systemuserclientdelegation?party={{party}}&systemUser={{systemUser}}
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  systemUser: {{systemUser}}
}

headers {
  Content-Type: application/json
  Accept: application/json
}

script:pre-request {
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  
  bru.setVar("party", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid);
  bru.setVar("systemUser", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.systemuser.partyUuid);
  
  var getTokenParameters = {
    auth_userId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.userId,
    auth_partyId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyId,
    auth_partyUuid: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyUuid,
    auth_ssn: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

script:post-response {
  let data = typeof res.body === "string" ? JSON.parse(res.body) : res.body;
  if (Array.isArray(data) && data.length > 0) {
   const assignmentId = data[2].delegation.toId;
   bru.setEnvVar("toId", assignmentId);
  }
}

tests {
  test("Access package delegation from client org to systemuser ", function() {
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
      const data = res.getBody();
      var delegationId = bru.getEnvVar("delegationId");
      expect(res.status).to.equal(200);
    expect(data[2]).to.have.property('id', delegationId);
    expect(data[2].role).to.have.property('code', "agent");
    expect(data[2].facilitator).to.have.property('name', "ULASTELIG RETTFERDIG TIGER AS");
    expect(data[2].facilitatorRole).to.have.property('code', "regnskapsforer");
      
    });
}
