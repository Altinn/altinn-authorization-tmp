meta {
  name: Maskinporten_DigDir_UrnScope_OkEmpty
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/maskinporten/delegations?supplierOrg=&consumerOrg=&scope={{scope}}
  body: none
  auth: inherit
}

params:query {
  supplierOrg: {{supplierOrg}}
  consumerOrg: {{consumerOrg}}
  scope: {{scope}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  bru.setVar("supplierOrg", testdata.org1.orgno);
  bru.setVar("consumerOrg", testdata.org2.orgno);
  bru.setVar("scope", "urn:altinn:maskinporten:testscope");
  
  var getTokenParameters = {
    auth_org: testdata.digdir.partyid,
    auth_orgNo: testdata.digdir.orgno,
    auth_tokenType: sharedtestdata.authTokenType.enterprise,
    auth_scopes: sharedtestdata.auth_scopes.maskinportenAdmin
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  // Should be the same as the .bru request file. Used as prefix in test name which also shows in test result in pipeline.
  const requestName = "Maskinporten_DigDir_UrnScope_OkEmpty";
  const body = res.getBody();
  
  test(requestName + "|HttpStatus.OK and Body.Data empty", function() {
    expect(res.status).to.equal(200);
    assert.isEmpty(body, `Expected data in body to be empty.`);
  });
}
