meta {
  name: AccessListDelegation_ToSystemUser
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/{{party}}/rights/delegation/offered
  body: json
  auth: inherit
}

body:json {
  {
      "to": [
          {
              "id": "urn:altinn:systemuser:uuid",
              "value": "{{toSystemUser}}"
          }
      ],
      "rights": [
          {
              "resource": [
                  {
                      "id": "urn:altinn:resource",
                      "value": "{{resource}}"
                  }
              ],
              "action": "read"
          }
      ]
  }
}

script:pre-request {
  const testdata = require(`./Testdata/accesslist-delegation/${bru.getEnvVar("tokenEnv")}.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  
  bru.setVar("party", testdata.OrdentligUlasteligStruts.partyid);
  bru.setVar("resource", testdata.resource);
  bru.setVar("toSystemUser", testdata.OrdentligUlasteligStruts.systemuser.partyUuid);
  
  var getTokenParameters = {
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_userId: testdata.OrdentligUlasteligStruts.dagl.userid,
    auth_partyId: testdata.OrdentligUlasteligStruts.dagl.partyid,
    auth_ssn: testdata.OrdentligUlasteligStruts.dagl.pid
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  // Should be the same as the .bru request file. Used as prefix in test name which also shows in test result in pipeline.
  const requestName = "AccessListDelegation_Dagl_OrgPartialAccess";
  const body = res.getBody();
  
  test(requestName + "|HttpStatus.OK", function() {
    expect(res.status).to.equal(200);
  });
  
  test(requestName + "|Read_IsDelegable", function() {
    const right = body.rightDelegationResults.find(right => right.rightKey === "devtest_gar_bruno_accesslist_actionfilter:read");
    assert.equal(right.status, "Delegated", `Expected read to be: Delegated`);
  });
  
  test(requestName + "|Write_IsNotDelegable", function() {
    const right = body.rightDelegationResults.find(right => right.rightKey === "devtest_gar_bruno_accesslist_actionfilter:write");
    assert.equal(right.status, "NotDelegated", `Expected read to be: NotDelegated`);
  });
}
