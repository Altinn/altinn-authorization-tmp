meta {
  name: GET_Enduser_Conn_AccPcks_FromOthers_FromOrg
  type: http
  seq: 4
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages?party={{party}}&from={{fromOrg}}&to={{party}}&packageId&package
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  from: {{fromOrg}}
  to: {{party}}
  packageId: 
  package: 
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("requestName", "GET_Enduser_Conn_AccPcks_FromOthers_FromOrg");
  
  bru.setVar("party", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg2.partyUuid);
  bru.setVar("fromOrg", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid);
  
  
  var getTokenParameters = {
    auth_userId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg2.dagligleder.userId,
    auth_partyId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg2.dagligleder.partyId,
    auth_partyUuid: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg2.dagligleder.partyUuid,
    auth_ssn: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg2.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  
  test(bru.getVar("requestName"), function() {
    const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
     const data = res.getBody();
      expect(res.status).to.equal(200);
      expect(data.data[0].permissions[0].from).to.have.property('id', testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid.toLowerCase());
    
  });
}
