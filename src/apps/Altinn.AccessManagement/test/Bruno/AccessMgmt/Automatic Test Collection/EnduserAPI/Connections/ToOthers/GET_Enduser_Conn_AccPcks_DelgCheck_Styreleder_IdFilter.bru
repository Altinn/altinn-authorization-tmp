meta {
  name: GET_Enduser_Conn_AccPcks_DelgCheck_Styreleder_IdFilter
  type: http
  seq: 15
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages/delegationcheck?party={{party}}&packageIds=4c859601-9b2b-4662-af39-846f4117ad7a
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  packageIds: 4c859601-9b2b-4662-af39-846f4117ad7a
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("party", testdata.org1_delegates_tilgangspakke.partyuuid);
  
  var getTokenParameters = {
    auth_userId: testdata.org1_delegates_tilgangspakke.styretsleder.userid,
    auth_partyId: testdata.org1_delegates_tilgangspakke.styretsleder.partyid,
    auth_partyUuid: testdata.org1_delegates_tilgangspakke.styretsleder.partyuuid,
    auth_ssn: testdata.org1_delegates_tilgangspakke.styretsleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  test("Verify Styreleder of Org-1 is allowed to delegate access pacakge", function() {
    const body = res.getBody();
    const data = body.data;
    
    expect(res.status).to.equal(200);
    expect(data[0].result).to.equal(true)
    expect(data[0].reasons[0].description).to.equal("Direct-RolePackage");
    
    
  });
}
