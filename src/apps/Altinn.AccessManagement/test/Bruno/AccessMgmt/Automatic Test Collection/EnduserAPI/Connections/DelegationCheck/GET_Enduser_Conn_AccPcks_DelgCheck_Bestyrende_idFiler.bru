meta {
  name: GET_Enduser_Conn_AccPcks_DelgCheck_Bestyrende_idFiler
  type: http
  seq: 10
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages/delegationcheck?party={{party}}&packageIds=98c404f4-5350-42cd-86d0-15fd38f178c4&packageIds=fef4aac0-d227-4ef6-834b-cc2eb4b942ed
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  packageIds: 98c404f4-5350-42cd-86d0-15fd38f178c4
  packageIds: fef4aac0-d227-4ef6-834b-cc2eb4b942ed
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("party", testdata.bestyrendeReder_role.partyuuid);
  
  var getTokenParameters = {
    auth_userId: testdata.bestyrendeReder_role.bestyrendeReder.userid,
    auth_partyId: testdata.bestyrendeReder_role.bestyrendeReder.partyid,
    auth_partyUuid: testdata.bestyrendeReder_role.bestyrendeReder.partyuuid,
    auth_ssn: testdata.bestyrendeReder_role.bestyrendeReder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  test("Negative : DelegationCheck for Bestyrende_reder role with non-accessible package ", function() {
    const body = res.getBody();
    const data = body.data;
    
    expect(res.status).to.equal(200);
    assert.isNotEmpty(data, "Expected data in response body to NOT be empty array");
   
    // Assert that there are exactly 4 packages
    expect(data).to.have.lengthOf(2);
  
    // Extract package IDs
    const packageIds = data.map(item => item.package.id);
  
    // Assert that all expected package IDs are present
    expect(packageIds).to.include.members([
      "98c404f4-5350-42cd-86d0-15fd38f178c4",
      "fef4aac0-d227-4ef6-834b-cc2eb4b942ed"
    ]);
  
    // Alternatively, assert by URNs
    const packageUrns = data.map(item => item.package.urn);
  
    expect(packageUrns).to.include.members([
      "urn:altinn:accesspackage:familievern",
      "urn:altinn:accesspackage:samle-behandle-avlopsvann"
    ]);
    
    
    const avlopsvannPackage = data.find(p =>
      p.package.urn === "urn:altinn:accesspackage:samle-behandle-avlopsvann"
    );
  
    const avlopsvannRoleUrns = avlopsvannPackage.reasons.map(r => r.roleUrn);
    expect(avlopsvannRoleUrns).to.include("urn:altinn:external-role:ccr:bestyrende-reder");
    expect(avlopsvannRoleUrns).to.include("urn:altinn:external-role:ccr:deltaker-fullt-ansvar");
    
    const familievernPackage = data.find(p =>
      p.package.urn === "urn:altinn:accesspackage:familievern"
    );
  
    const familievernRoleUrns = familievernPackage.reasons.map(r => r.roleUrn);
    expect(familievernRoleUrns).to.include("urn:altinn:external-role:ccr:deltaker-fullt-ansvar");
    expect(familievernRoleUrns).to.not.include("urn:altinn:external-role:ccr:bestyrende-reder");
    
    
  
    
  
  
  
    
    
  });
}
