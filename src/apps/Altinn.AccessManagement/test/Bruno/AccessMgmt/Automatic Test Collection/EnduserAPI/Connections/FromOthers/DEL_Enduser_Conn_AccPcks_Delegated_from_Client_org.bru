meta {
  name: DEL_Enduser_Conn_AccPcks_Delegated_from_Client_org
  type: http
  seq: 19
}

delete {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages?party={{party}}&from={{fromOrg}}&to={{party}}&package={{package}}
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  from: {{fromOrg}}
  to: {{party}}
  package: {{package}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  
  bru.setVar("party", testdata.regn_type_org.partyuuid);
  bru.setVar("fromOrg", testdata.regn_type_org.klient_org.partyuuid);
  bru.setVar("package", testdata.package_to_delegate.package_urn);
  
  var getTokenParameters = {
    auth_userId: testdata.regn_type_org.dagligleder.userid,
    auth_partyId: testdata.regn_type_org.dagligleder.partyid,
    auth_partyUuid: testdata.regn_type_org.dagligleder.partyuuid,
    auth_ssn: testdata.regn_type_org.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  test("Verify deletion of delegated access pacakge which was delegated from from client org: FromOthers", function() {
    const data = res.getBody();
    
    expect(res.status).to.equal(204);
    
  });
}
