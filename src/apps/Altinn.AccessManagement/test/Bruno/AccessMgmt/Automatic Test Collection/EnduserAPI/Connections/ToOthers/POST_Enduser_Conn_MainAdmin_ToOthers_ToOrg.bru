meta {
  name: POST_Enduser_Conn_MainAdmin_ToOthers_ToOrg
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages?party={{party}}&from={{party}}&to={{toOrg}}&packageId=&package={{package}}
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  from: {{party}}
  to: {{toOrg}}
  packageId: 
  package: {{package}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("requestName", "POST_Enduser_Conn_MainAdmin_ToOthers_ToOrg");
  
  bru.setVar("party", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid);
  bru.setVar("toOrg", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg1.partyUuid);
  bru.setVar("package", "hovedadministrator");
  
  var getTokenParameters = {
    auth_userId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.userId,
    auth_partyId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyId,
    auth_partyUuid: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyUuid,
    auth_ssn: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  
  test(bru.getVar("requestName"), function() {
    const data = res.getBody();
    
    expect(res.status).to.equal(400);
    
    assert.equal(data.title, "Bad Request");
    assert.equal(data.status, 400);
    assert.include(data.validationErrors[0].Packages, "urn:altinn:accesspackage:hovedadministrator are not assignable to an organization.");
    
  });
}
