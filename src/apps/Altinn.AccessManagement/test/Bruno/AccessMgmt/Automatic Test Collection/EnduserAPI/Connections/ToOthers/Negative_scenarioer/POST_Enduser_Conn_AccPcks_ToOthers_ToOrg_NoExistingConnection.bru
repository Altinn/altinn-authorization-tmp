meta {
  name: POST_Enduser_Conn_AccPcks_ToOthers_ToOrg_NoExistingConnection
  type: http
  seq: 8
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages?party={{party}}&from={{party}}&to={{toOrg}}&packageId=&package={{package}}
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  from: {{party}}
  to: {{toOrg}}
  packageId: 
  package: {{package}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  /* 
    Test scenario: delegation of package without first adding to-party as rightholder
    Expected result: should give 400 BadRequest when the to-party does not have an existing connection
  */
  bru.setVar("requestName", "POST_Enduser_Conn_AccPcks_ToOthers_ToOrg_NoExistingConnection");
  
  bru.setVar("party", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid);
  bru.setVar("toOrg", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg1.partyUuid);
  bru.setVar("package", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.client_rightholderOrg1.directPackageToDelegate);
  
  var getTokenParameters = {
    auth_userId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.userId,
    auth_partyId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyId,
    auth_partyUuid: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyUuid,
    auth_ssn: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

script:post-response {
  const data = res.getBody();
  const packageId = data.packageId;
  bru.setEnvVar("packageId", packageId)
}

tests {
  
  test(bru.getVar("requestName"), function() {
    const data = res.getBody();
    
    expect(res.status).to.equal(400);
    expect(data).to.be.an('object');
    expect(data).to.have.property('type', 'https://tools.ietf.org/html/rfc9110#section-15.5.1');
    expect(data).to.have.property('title', 'Bad Request');
    expect(data).to.have.property('status', 400);
    expect(data).to.have.property('detail', 'Missing rightholder');
    expect(data).to.have.property('code', 'AM-00020');
    
  });
}
