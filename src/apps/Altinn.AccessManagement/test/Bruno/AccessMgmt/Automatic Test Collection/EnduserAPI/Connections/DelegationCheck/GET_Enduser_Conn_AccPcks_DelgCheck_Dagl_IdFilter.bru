meta {
  name: GET_Enduser_Conn_AccPcks_DelgCheck_Dagl_IdFilter
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections/accesspackages/delegationcheck?party={{party}}&packageIds=0195efb8-7c80-7e82-9b4f-7d63e773bbca&packageIds=bb0569a6-2268-49b5-9d38-8158b26124c3&packageIds=43becc6a-8c6c-4e9e-bb2f-08fe588ada21
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  packageIds: 0195efb8-7c80-7e82-9b4f-7d63e773bbca
  packageIds: bb0569a6-2268-49b5-9d38-8158b26124c3
  packageIds: 43becc6a-8c6c-4e9e-bb2f-08fe588ada21
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("requestName", "GET_Enduser_Conn_AccPcks_DelgCheck_Dagl_IdFilter");
  
  bru.setVar("party", testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.partyUuid);
  
  var getTokenParameters = {
    auth_userId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.userId,
    auth_partyId: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyId,
    auth_partyUuid: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.partyUuid,
    auth_ssn: testdata.REGN_ULASTELIG_RETTFERDIG_TIGER.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  
  test(bru.getVar("requestName"), function() {
    const body = res.getBody();
    const data = body.data;
    
    expect(res.status).to.equal(200);
    assert.isNotEmpty(data, "Expected data in response body to NOT be empty array");
    
    // Assert that there are exactly 3 packages
    expect(data).to.have.lengthOf(3);
  
    // Extract package IDs
    const packageIds = data.map(item => item.package.id);
  
    // Assert that all expected package IDs are present
    expect(packageIds).to.include.members([
      "0195efb8-7c80-7e82-9b4f-7d63e773bbca",
      "bb0569a6-2268-49b5-9d38-8158b26124c3",
      "43becc6a-8c6c-4e9e-bb2f-08fe588ada21"
    ]);
  
    // Alternatively, assert by URNs
    const packageUrns = data.map(item => item.package.urn);
  
    expect(packageUrns).to.include.members([
      "urn:altinn:accesspackage:klientadministrator",
      "urn:altinn:accesspackage:post-til-virksomheten-med-taushetsbelagt-innhold",
      "urn:altinn:accesspackage:regnskapsforer-lonn"
    ]);
    
    // âœ… Assert result values for each package
    const resultByUrn = urn => data.find(p => p.package.urn === urn)?.result;
  
    expect(resultByUrn("urn:altinn:accesspackage:klientadministrator")).to.be.true;
    expect(resultByUrn("urn:altinn:accesspackage:post-til-virksomheten-med-taushetsbelagt-innhold")).to.be.true;
    expect(resultByUrn("urn:altinn:accesspackage:regnskapsforer-lonn")).to.be.false;
    
  });
}
