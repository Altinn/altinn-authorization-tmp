meta {
  name: POST_Enduser_Conn_ToOthers_Add_different_types_Org_Negative
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/enduser/connections?party={{party}}&from={{party}}&to={{toOrg}}
  body: none
  auth: inherit
}

params:query {
  party: {{party}}
  from: {{party}}
  to: {{toOrg}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("party", testdata.org1_delegates_tilgangspakke.partyuuid);
  bru.setVar("toOrg", testdata.org2_delegates_tilgangspakke.partyuuid);
  
  var getTokenParameters = {
    auth_userId: testdata.org1_delegates_tilgangspakke.klientadministrator.userid,
    auth_partyId: testdata.org1_delegates_tilgangspakke.klientadministrator.partyid,
    auth_partyUuid: testdata.org1_delegates_tilgangspakke.klientadministrator.partyuuid,
    auth_ssn: testdata.org1_delegates_tilgangspakke.klientadministrator.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  console.log(getTokenParameters)
  console.log("f√∏rtestTokenGenerator")
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
  console.log("ettertestTokenGenerator")
}

tests {
  test("Verify Org1 is not able to add Org2 for delegation without keyroles", function() {
    
    const data = res.getBody();
    expect(res.status).to.equal(403);
  
    
  });
}
