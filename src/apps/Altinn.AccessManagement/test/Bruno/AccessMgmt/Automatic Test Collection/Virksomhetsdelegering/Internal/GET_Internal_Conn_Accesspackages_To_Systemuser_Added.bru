meta {
  name: GET_Internal_Conn_Accesspackages_To_Systemuser_Added
  type: http
  seq: 4
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/connections/accesspackages?party={{from}}&from={{from}}&to={{to}}
  body: json
  auth: inherit
}

params:query {
  party: {{from}}
  from: {{from}}
  to: {{to}}
  ~package: {{package}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("from", testdata.internal_conn_org.partyuuid);
  bru.setVar("to", testdata.internal_conn_org.systemuser.partyuuid);
  bru.setVar("package", testdata.internal_conn_org.package_to_delegate);
  
  var getTokenParameters = {
    auth_userId: testdata.internal_conn_org.dagligleder.userid,
    auth_partyId: testdata.internal_conn_org.dagligleder.partyid,
    auth_partyUuid: testdata.internal_conn_org.dagligleder.partyuuid,
    auth_ssn: testdata.internal_conn_org.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  test("GET internal connections accesspackages to systemuser: rettighetshaver added", function() {
    const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
     const body = res.getBody();
    const thing = body.data[0].permissions.find(package => package.role.code === 'rettighetshaver');
    assert.isOk(thing, `Rettighetshaver`);
    });
}
