meta {
  name: GET_AccPkg_KundeLista_med_BÃ¥de_pakker
  type: http
  seq: 12
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/systemuserclientdelegation/clients?party={{party}}
  body: none
  auth: inherit
}

params:query {
  party: {{party}}
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  
  bru.setVar("party", testdata.regn_type_org.partyuuid);
  
  
  var getTokenParameters = {
    auth_userId: testdata.regn_type_org.dagligleder.userid,
    auth_partyId: testdata.regn_type_org.dagligleder.partyid,
    auth_partyUuid: testdata.regn_type_org.dagligleder.partyuuid,
    auth_ssn: testdata.regn_type_org.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  test("Verify that Org1 appears in the client list for Org2 after Org2 receives delegated access via the access package from Org1 : ToOthers", function() {
    const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
      const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
      const data = res.getBody();
      expect(res.status).to.equal(200);
      expect(data[9].party).to.have.property('name', testdata.regn_type_org.klient_org.name);
      expect(data[9].party).to.have.property('organizationNumber', testdata.regn_type_org.klient_org.orgno);
    
    });
}
