meta {
  name: DEL_SysUser_ClientDelg_Vanlig_AccPkgForDelete_agentid_false
  type: http
  seq: 16
}

delete {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/systemuserclientdelegation/deleteagentassignment?party={{party}}&agentId={{systemUser}}&cascade=false
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
  agentId: {{systemUser}}
  cascade: false
}

headers {
  Content-Type: application/json
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/enduser/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("party", testdata.regn_type_org.partyuuid);
  bru.setVar("systemUser", testdata.regn_type_org.systemuser.partyuuid);
  
  var getTokenParameters = {
    auth_userId: testdata.regn_type_org.klientadministrator.userid,
    auth_partyId: testdata.regn_type_org.klientadministrator.partyid,
    auth_partyUuid: testdata.regn_type_org.klientadministrator.partyuuid,
    auth_ssn: testdata.regn_type_org.klientadministrator.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  test("Deletion of active delegation through agentId should give error with 500 response code ", function() {
    expect(res.status).to.equal(500);
    
    const data = res.getBody();
    assert.equal(data.detail, "Assignment is active in one or more delegations and cascadeflag is false.");
    
  });
}
