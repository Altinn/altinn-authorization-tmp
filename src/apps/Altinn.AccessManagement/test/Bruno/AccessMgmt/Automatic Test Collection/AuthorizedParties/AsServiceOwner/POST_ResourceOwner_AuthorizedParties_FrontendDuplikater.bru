meta {
  name: POST_ResourceOwner_AuthorizedParties_FrontendDuplikater
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/resourceowner/authorizedparties?includeAltinn2=false&includeAltinn3=true
  body: json
  auth: inherit
}

params:query {
  includeAltinn2: false
  includeAltinn3: true
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "type": "urn:altinn:person:identifier-no",
    "value": "20838198385"
  }
}

script:pre-request {
  const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  
  bru.setVar("requestName", "POST_ResourceOwner_AuthorizedParties_FrontendDuplikater");
  
  var getTokenParameters = {
    auth_org: testdata.digdir.partyid,
    auth_orgNo: testdata.digdir.orgno,
    scope: sharedtestdata.scopes.k6Read,
    auth_tokenType: sharedtestdata.authTokenType.enterprise,
    auth_scopes: sharedtestdata.auth_scopes.authorizedPartiesResourceOwner
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken",  token);
}

tests {
  const testdata = require(`./Testdata/systemuser-clientdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  const body = res.getBody();
  const requestName = bru.getVar("requestName");
  
  test(requestName + "|HttpStatus.OK", function() {
    expect(res.status).to.equal(200);
  });
  
  test(requestName + "|Inherits all mainunit accesses on subunits", function() {  
    // Test that all authorized rights on main units also exists on all subunits
    body.forEach((party, partyIndex) => {
      if (party.subunits && party.subunits.length > 0) {
        party.subunits.forEach((subunit, subunitIndex) => {
          try {
            assert.includeMembers(
              subunit.authorizedAccessPackages,
              party.authorizedAccessPackages,
              `Subunit ${subunitIndex} of party ${partyIndex} does not include all authorizedAccessPackages`
            );
  
            assert.includeMembers(
              subunit.authorizedResources,
              party.authorizedResources,
              `Subunit ${subunitIndex} of party ${partyIndex} does not include all authorizedResources`
            );
  
            assert.includeMembers(
              subunit.authorizedRoles,
              party.authorizedRoles,
              `Subunit ${subunitIndex} of party ${partyIndex} does not include all authorizedRoles`
            );
          } catch (error) {
            console.error(error.message);
            throw error; // Re-throw to make sure Bruno registers the test as failed
          }
        });
      }
    });
    
  });
  
  test(requestName + "|Mainunit AuthorizedInstances not inheirited to subunits", function() {  
    // Test that any authorized instances on main units does not exist on any subunits
    body.forEach((party, partyIndex) => {
      const parentInstances = party.authorizedInstances || [];
  
      if (party.subunits && party.subunits.length > 0 && parentInstances.length > 0) {
        party.subunits.forEach((subunit, subunitIndex) => {
          const subunitInstances = subunit.authorizedInstances || [];
  
          const overlappingInstances = parentInstances.filter(instance =>
            subunitInstances.includes(instance)
          );
  
          try {
            assert.strictEqual(
              overlappingInstances.length,
              0,
              `Subunit ${subunitIndex} of party ${partyIndex} contains one or more parent authorizedInstances: ${overlappingInstances.join(', ')}`
            );
          } catch (error) {
            console.error(error.message);
            throw error;
          }
        });
      }
    });
  
  });
  
  test(requestName + "|Check for duplicate parties in the response", function() {  
    // Step 1: Collect all partyUuids
    const allPartyUuids = [];
  
    body.forEach(party => {
      allPartyUuids.push(party.partyUuid);
      if (party.subunits && party.subunits.length > 0) {
        party.subunits.forEach(subunit => {
          allPartyUuids.push(subunit.partyUuid);
        });
      }
    });
  
    // Step 2: Find duplicates
    const uuidCount = {};
    const duplicates = [];
  
    allPartyUuids.forEach(uuid => {
      uuidCount[uuid] = (uuidCount[uuid] || 0) + 1;
      if (uuidCount[uuid] === 2) {
        duplicates.push(uuid); // only push once when it becomes a duplicate
      }
    });
  
    // Step 3: Assert no duplicates
    expect(duplicates.length, `Duplicate partyUuid(s) found: ${duplicates.join(', ')}`).to.equal(0);
  
  });
  
}
