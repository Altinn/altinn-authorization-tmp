meta {
  name: 9.DelegateOrg9
  type: http
  seq: 9
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/app/delegations/resource/{{resourceId}}/instance/{{revokeAllBeyondLimitInstanceId}}
  body: json
  auth: none
}

headers {
  PlatformAccessToken: {{platformAccessToken}}
}

body:json {
  {
    "from": {
      "type": "urn:altinn:party:uuid",
      "value": "{{fromUuid}}"
    },
    "to": {
      "type": "urn:altinn:party:uuid",
      "value": "{{toUuid}}"
    },
    "rights": [
      {
        "resource": [
          {
            "type": "urn:altinn:resource",
            "value": "{{resourceId}}"
          },
          {
            "type": "urn:altinn:task",
            "value": "task_1"
          }
        ],
        "action": {
          "type": "urn:oasis:names:tc:xacml:1.0:action:action-id",
          "value": "read"
        }
      },
      {
        "resource": [
          {
            "type": "urn:altinn:resource",
            "value": "{{resourceId}}"
          },
          {
            "type": "urn:altinn:task",
            "value": "task_1"
          }
        ],
        "action": {
          "type": "urn:oasis:names:tc:xacml:1.0:action:action-id",
          "value": "sign"
        }
      }
    ]
  }
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
  const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + testdata.app;
  
  bru.setVar("resourceId", resource);
  bru.setVar("revokeAllBeyondLimitInstanceId", testdata.revokeallbeyondlimitinstanceid);
  bru.setVar("fromUuid", testdata.org1.partyuuid);
  bru.setVar("toUuid", testdata.org9.partyuuid);
  
  var getTokenParameters = {
      auth_org: sharedtestdata.serviceOwners.ttd.org,
      auth_app: testdata.app,
      auth_tokenType: sharedtestdata.authTokenType.platformAccess
    };
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("platformAccessToken",  token);
}

tests {
  test("InstanceDelegation RevokeMoreThanLimit post DelegatePolicyFile09", function() {
      const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
      const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
      const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + testdata.app;
    
      const data = res.getBody();
      assert.equal(res.status, 200, 'httpstatus is incorect');
    
      assert.equal(data.resourceId, resource, 'ResourceId is incorect');
      assert.equal(data.instanceId, testdata.revokeallbeyondlimitinstanceid, 'InstanceId is incorect');
  
      assert.equal(data.from.value, testdata.org1.partyuuid, 'FromId is inncorect');
      assert.equal(data.to.value, testdata.org9.partyuuid, 'ToId is inncorect');
    
      assert.equal(data.rights[0].status, 'Delegated', 'read right has incorrect status');
      assert.equal(data.rights[0].action.value, 'read', 'read right has incorrect action');  
      assert.equal(data.rights[0].resource[0].value, resource, 'read right has incorrect resourceId');
      assert.equal(data.rights[0].resource[1].value, 'task_1', 'read right has incorrect taskId');
      
      assert.equal(data.rights[1].status, 'Delegated', 'sign right has incorrect status');
      assert.equal(data.rights[1].action.value, 'sign', 'sign right has incorrect action');  
      assert.equal(data.rights[1].resource[0].value, resource, 'sign right has incorrect resourceId');
      assert.equal(data.rights[1].resource[1].value, 'task_1', 'sign right has incorrect taskId');
    });
}
