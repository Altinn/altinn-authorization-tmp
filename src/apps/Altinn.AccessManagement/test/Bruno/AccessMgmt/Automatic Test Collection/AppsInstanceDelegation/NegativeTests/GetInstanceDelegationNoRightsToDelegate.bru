meta {
  name: GetInstanceDelegationNoRightsToDelegate
  type: http
  seq: 6
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/app/delegations/resource/{{resourceId}}/instance/{{instanceId}}
  body: none
  auth: none
}

headers {
  PlatformAccessToken: {{platformAccessToken}}
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
  const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + "authz-bruno-testapp1";
  
  bru.setVar("resourceId", resource);
  bru.setVar("instanceId", testdata.instanceid);
  bru.setVar("fromUuid", testdata.org1.partyuuid);
  bru.setVar("toUuid", testdata.person1.partyuuid);
  
  var getTokenParameters = {
      auth_org: sharedtestdata.serviceOwners.ttd.org,
      auth_app: "authz-bruno-testapp1",
      auth_tokenType: sharedtestdata.authTokenType.platformAccess
    };
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("platformAccessToken",  token);
}

tests {
  test("InstanceDelegation DelegateNonExistingRights get InstanceDelegation NoRights", function() {
      const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
      const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
      const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + "ttd/authz-bruno-testapp1";
    
      const data = res.getBody();
      expect(res.status, 400, 'httpstatus is incorect');
    
      expect(data.status, 400, 'error response httpstatus is incorect');
    
      expect(data.validationErrors[0].code,'AM.VLD-00004', 'Incorect error code');
      expect(data.validationErrors[0].paths[0], 'request.Resource', 'Incorect path');
    });
}
