meta {
  name: GET_Internal_Conn_GetAll
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/connections?party={{party}}
  body: json
  auth: inherit
}

params:query {
  party: {{party}}
}

headers {
  Accept: application/json
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/manualtests/systemuser-directdelegation/${bru.getEnvVar("tokenEnv")}.json`);
  
  bru.setVar("requestName", "GET_Internal_Conn_GetAll");
  
  bru.setVar("party", testdata.Org_GraaPresisTigerAS.partyUuid);
  bru.setVar("to", testdata.Org_GraaPresisTigerAS.partyinternal_systemuser.partyUuid);
  
  var getTokenParameters = {
    auth_userId: testdata.Org_GraaPresisTigerAS.dagligleder.userId,
    auth_partyId: testdata.Org_GraaPresisTigerAS.dagligleder.partyId,
    auth_partyUuid: testdata.Org_GraaPresisTigerAS.dagligleder.partyUuid,
    auth_ssn: testdata.Org_GraaPresisTigerAS.dagligleder.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.portalEnduser
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("bearerToken", token);
}

tests {
  
  test(bru.getVar("requestName"), function() {
    const body = res.getBody();
    const data = body.data;
    
    expect(res.status).to.equal(200);
    assert.isNotEmpty(data, "Expected data in response body to NOT be empty array");
    
  });
}
