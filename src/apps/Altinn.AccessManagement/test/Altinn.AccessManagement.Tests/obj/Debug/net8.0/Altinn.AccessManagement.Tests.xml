<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Altinn.AccessManagement.Tests</name>
    </assembly>
    <members>
        <member name="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer">
            <summary>
            Sets up tests and teardown tests for controller tests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.#ctor(System.String,System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[],System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[])">
            <summary>
            ctor
            </summary>
            <param name="acceptanceCriteria">acceptance criteria</param>
            <param name="parent">list of functional object mutators provided to parent class</param>
            <param name="actions">list of functional object mutators provided from parent class</param>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.Scenarios">
            <summary>
            List of Scenarios
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.ResponseAssertions">
            <summary>
            List of Assertions for HTTP assertions 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.ApiAssertions">
            <summary>
            List of API assertions for mock context and DB
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.Request">
            <summary>
            Http request to be sent to the controller action
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.AcceptanceCriteria">
            <summary>
            Acceptance criteria for the test
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.RequestUri">
            <summary>
            Sets Request URI
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.AssertResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Asserts response given from API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.AssertApi(Altinn.AccessManagement.Tests.Fixtures.Host)">
            <summary>
            Asserts mock call and DB
            </summary>
            <param name="host">Web application fixture</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithAssertResponseStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Asserts that response has given status code.
            </summary>
            <param name="code">HTTP status code</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithAssertResponseStatusCodeSuccessful(Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer)">
            <summary>
            Asserts that response given from API is a successful status code.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithScenarios(Altinn.AccessManagement.Tests.Scenarios.Scenario[])">
            <summary>
            Seeds the DB and creates the mock context for the integrations.
            </summary>
            <param name="scenarios">list of scenarions</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithRequestRoute(System.Object[])">
            <summary>
            Http request route
            </summary>
            <param name="segments">list of URL segments</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithRequestVerb(System.Net.Http.HttpMethod)">
            <summary>
            Sets the HTTP request method
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.WithHttpRequestBodyJson``1(``0)">
            <summary>
            Deserialize the paylaod and sends the content as JSON and adds the 
            content type header 'application/json'
            </summary>
            <param name="body">object to deserialize</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.Test(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            Runs tests
            </summary>
            <param name="fixture">web application fixture</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer.ToString">
            <summary>
            Return Acceptance Criteria
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Asserters.AsserterTests">
            <summary>
            summary
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Asserters.AsserterTests.Asserter``1">
            <summary>
            summary
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests">
            <summary>
            summary
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultTo(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Action{Microsoft.AspNetCore.Mvc.ValidationProblemDetails})">
            <summary>
            summary
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultToCases">
            <summary>
            summary
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultFrom(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Action{Microsoft.AspNetCore.Mvc.ValidationProblemDetails})">
            <summary>
            summary
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultFromCases">
            <summary>
            summary
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultResource(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Action{Microsoft.AspNetCore.Mvc.ValidationProblemDetails})">
            <summary>
            summary
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Asserters.AttributeMatchAsserterTests.DefaultResourceCases">
            <summary>
            summary
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Contexts.MockContext">
            <summary>
            A wrapper class used by mock implementation for getting data
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.MockContext.#ctor(System.Action{Altinn.AccessManagement.Tests.Contexts.MockContext}[])">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.Resources">
            <summary>
            List of mock resources
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.SubjectResources">
            <summary>
            Dictionary of mock subject resources
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.Parties">
            <summary>
            List of mock parties
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.UserProfiles">
            <summary>
            List of mock user profiles
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.MainUnits">
            <summary>
            Dictionary of mainunits. Where key is partyid of the subunit and values are the main units.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.KeyRoles">
            <summary>
            Dictionary of keyroles where the key is userid and value a list of party ids.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.HttpHeaders">
            <summary>
            JWT token.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Contexts.MockContext.DbSeeds">
            <summary>
            A list of Db seed functation that are executed after database has been migrated.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.#ctor(Altinn.AccessManagement.Tests.Contexts.MockContext)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetKeyRoleParties(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetMainUnits(Altinn.AccessManagement.Core.Models.SblBridge.MainUnitQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetPartiesAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetPartiesAsync(System.Collections.Generic.List{System.Guid},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetPartiesForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.GetPartyAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.PartiesClientMock.LookupPartyBySSNOrOrgNo(Altinn.Platform.Register.Models.PartyLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Contexts.ProfileClientMock">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ProfileClientMock.#ctor(Altinn.AccessManagement.Tests.Contexts.MockContext)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ProfileClientMock.GetUser(Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock">
            <summary>
            ResourceRegistryMock
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock.#ctor(Altinn.AccessManagement.Tests.Contexts.MockContext)">
            <summary>
            ResourceRegistryMock
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock.GetResource(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock.GetResourceList(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock.GetResources(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Contexts.ResourceRegistryMock.GetSubjectResources(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest">
            <summary>
            Controller test for <see cref="T:Altinn.AccessManagement.Controllers.RightsInternalController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.RightsInternalController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.GetGivenDelegations_ReturnOk(System.String,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Tests <see cref="M:Altinn.AccessManagement.Controllers.RightsInternalController.GetOfferedRights(System.Int32,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.GetGivenDelegations_ReturnOk_Input">
            <summary>
            Case 1. List delegations from an organization to person using their orgnumber
            Case 2. List delegations from an organization to person using their partyid
            Case 3. List delegations from a person to org with no keyroles using their ssn
            Case 4. List delegations from a person to org with keyroles using their ssn
            Case 5. List delegations from a person to org with no keyroles using their partyid
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.GetReceviedDelegations_ReturnOk(System.String,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Tests <see cref="M:Altinn.AccessManagement.Controllers.RightsInternalController.GetReceivedRights(System.Int32,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.GetReceviedDelegations_ReturnOk_Input">
            <summary>
            Case 1. List all delegations to an organization using orgnumber ""
            Case 2. List all delegations to an organization using party ""
            Case 3. List all delegations to a person "" with no keyroles using ssn
            Case 4. List all delegations to a person "" with keyroles using ssn
            Case 5. List all delegations to a person with no keyroles using partyid
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.ClearAccessCache_ReturnOk(System.String,System.Int32,Altinn.AccessManagement.Models.BaseAttributeExternal,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Tests <see cref="M:Altinn.AccessManagement.Controllers.RightsInternalController.ClearAccessCache(System.Int32,Altinn.AccessManagement.Models.BaseAttributeExternal,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.ClearAccessCache_ReturnOk_input">
            <summary>
            Test case:  PUT internal/{party}/accesscache/clear
                        with the authenticated user being an authorized Administrator for the {party}
            Expected:   - Should return 200 OK
            Reason:     Authenticated users which authorized as Administrator/Main Administrator for the {party} should be allowed to clear access cache for recipient
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.ClearAccessCache_ReturnBadRequest(System.String,System.Int32,Altinn.AccessManagement.Models.BaseAttributeExternal,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Tests <see cref="M:Altinn.AccessManagement.Controllers.RightsInternalController.ClearAccessCache(System.Int32,Altinn.AccessManagement.Models.BaseAttributeExternal,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.Altinn2RightsControllerTest.ClearAccessCache_ReturnBadRequest_input">
            <summary>
            Test case:  PUT internal/{party}/accesscache/clear
                        with the authenticated user being an Administrator for the {party}
                        where input attribute does not contain a well-formatted uuid
            Expected:   - Should return 400 BadRequest
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.AuthorizedPartiesController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.AuthorizedPartiesController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParties_UnauthenticatedUser_Unauthorized(System.String)">
            <summary>
            Test case:  GET /authorizedparties?includeAltinn2={includeAltinn2}
                        for an unauthenticated user
            Expected:   - Should return 401 Unauthorized
            Reason:     Operation requires valid user authentication
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParty_UnauthenticatedUser_Unauthorized(System.String)">
            <summary>
            Test case:  GET /authorizedparty/{partyId}?includeAltinn2={includeAltinn2}
                        for an unauthenticated user
            Expected:   - Should return 401 Unauthorized
            Reason:     Operation requires valid user authentication
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParties_AuthenticatedUser_Ok(System.String,System.Boolean,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal})">
            <summary>
            Test case:  GET /authorizedparties?includeAltinn2={includeAltinn2}
                        with an authenticated user
            Expected:   - Should return 200 OK
                        - Should return the expected list of authorized party models
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParty_AuthenticatedUser_Ok(System.String,System.Int32,System.Boolean,Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal)">
            <summary>
            Test case:  GET /authorizedparty/{partyId}?includeAltinn2={includeAltinn2}
                        with an authenticated user
            Expected:   - Should return 200 OK
                        - Should return the expected authorized party model
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParty_AuthenticatedUser_BadRequest(System.String,System.Int32,System.Boolean,Microsoft.AspNetCore.Mvc.ValidationProblemDetails)">
            <summary>
            Test case:  GET /authorizedparty/{partyId}?includeAltinn2={includeAltinn2}
                        with an authenticated user
            Expected:   - Should return 400 BadRequest
                        - Should return the expected ValidationProblemDetails response
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParties_AsAccessManager_Ok(System.String,System.Int32,System.Boolean,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal})">
            <summary>
            Test case:  GET {party}/authorizedparties?includeAltinn2={includeAltinn2}
                        with an authenticated and authorized Access Manager for the {party}
            Expected:   - Should return 200 OK
                        - Should return the expected list of authorized party models
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.AuthorizedPartiesControllerTest.GetAuthorizedParties_AsAccessManager_Forbidden(System.String,System.Int32,System.Boolean)">
            <summary>
            Test case:  GET {party}/authorizedparties?includeAltinn2={includeAltinn2}
                        with an authenticated and authorized Access Manager for the {party} which is a person
            Expected:   - Should return 403 Forbidden
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.DelegationsController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.DelegationsController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_Success">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a valid deletion of org1/app3
            Expected: DeleteRules returns status code 201 and list of rules created match expected
            
            Scenario:
            Calling the POST operation for DeleteRules to perform a valid deletion
            Input:
            List of two one rule in one policy for deletion of the app org1/app3 between for a single offeredby/coveredby combination resulting in a single policyfile beeing updated.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            DeleteRules returns status code 201 and list of rules deleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteResourceRegistryRules_Success">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a valid deletion of resourceRegistryId
            Expected: DeleteRules returns status code 201 and list of rules created match expected
            
            Scenario:
            Calling the POST operation for DeleteRules to perform a valid deletion
            Input:
            List of two one rule in one policy for deletion of the resource between for a single offeredby/coveredby combination resulting in a single policyfile beeing updated.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            DeleteRules returns status code 201 and list of rules deleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRulesNotExistingRuleId_PartialSuccess">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a valid deletion of org1/app3
            Expected: DeleteRules returns status code 206 and list of rules created match expected one of the rules does not exist
            
            Scenario:
            Calling the POST operation for DeleteRules to perform a valid deletion and one not existing 
            Input:
            List of two one rule in one policy for deletion of the app org1/app3 between for a single offeredby/coveredby combination resulting in a single policyfile beeing updated.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule id deleted
            Success Criteria:
            DeleteRules returns status code 206 and list of rules deleted to match expected (one rule)
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_WithoutAuthorization">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a valid deletion of org1/app3 without a valid bearertoken
            Expected: DeleteRules returns status code 401
            
            Scenario:
            Calling the POST operation for DeleteRules to perform a valid deletion
            Input:
            List of two one rule in one policy for deletion of the app org1/app3 between for a single offeredby/coveredby combination resulting in a single policyfile beeing updated.
            Expected Result:
            Responce declined as it is not Authorized
            Success Criteria:
            DeleteRules returns status code 401
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_OnePolicyMissing_PartialSucess">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a valid deletion of org1/app3 org1/app4 org1/app8
            Expected: DeleteRules returns status code 206 and list of rules created match expected
            
            Scenario:
            Calling the POST operation for DeleteRules to perform a valid deletion but one of the policy files was not found and some rules was therfore not deleted
            Input:
            List of four rules for deletion spread accross 3 policy files of the app org1/app3 org1/app4 and org1/app8 between for a single offeredby/coveredby combination resulting in two policyfile beeing updated.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule ids but not all rules is retuned
            Success Criteria:
            DeleteRules returns status code 206 and list of rules dleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_InvalidInput_BadRequest">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a deletion of org1/app4 and org1/app3 without rules defined
            Expected: DeleteRules returns status code 500 and no list of rules as one of the policies had no ruleids defined
            
            Scenario:
            Calling the POST operation for DeleteRules to delete rules without giving a RuleId
            Input:
            List of three rules for delegation of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting in no policy file beeing updated.
            Expected Result:
            No Rules are deleted and no rules are returned
            Success Criteria:
            DeleteRules returns status code 500 and no deletion is performed
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_InvalidUserPerformingDeleteRule_BadRequest">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a deletion of org1/app4 and org1/app3 where the user performing the task is not defined
            Expected: DeleteRules returns status code 500 and no list of rules as one of the policies had no DeletedByUser set (0)
            
            Scenario:
            Calling the POST operation for DeleteRules to delete rules without giving a DeletedByUserId
            Input:
            List of three rules for delegation of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting in no policy file beeing updated.
            Expected Result:
            No Rules are deleted and no rules are returned
            Success Criteria:
            DeleteRules returns status code 500 and no deletion is performed
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_InvalidUserPerformingDeleteRule_BadRequest">
             <summary>
             Test case: Calling the POST operation for DeleteRules to perform a deletion of org1/app4 and org1/app3 where the user performing the task is not defined
             Expected: DeleteRules returns status code 500 and no list of rules as one of the policies had no DeletedByUser set (0)
            
             Scenario:
             Calling the POST operation for DeleteRules to delete rules without giving a DeletedByUserId
             Input:
             List of three rules for delegation of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting in no policy file beeing updated.
             Expected Result:
             No Rules are deleted and no rules are returned
             Success Criteria:
             DeleteRules returns status code 500 and no deletion is performed
             </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_ValidInputAllFails_BadRequest">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a deletion of org1/app4 and org1/app3 without rules defined
            Expected: DeleteRules returns status code 500 and no list of rules as one of the policies had no ruleids defined
            
            Scenario:
            Calling the POST operation for DeleteRules to delete rules without giving a RuleId
            Input:
            List of three rules for delegation of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting in no policy file beeing updated.
            Expected Result:
            No Rules are deleted and no rules are returned
            Success Criteria:
            DeleteRules returns status code 500 and no deletion is performed
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeleteRules_DuplicatePolicy_BadRequest">
            <summary>
            Test case: Calling the POST operation for DeleteRules to perform a deletion of org1/app3 with difrent rules on same policy declared in two requests
            Expected: DeleteRules returns status code 500 and no list of rules as the same policy was tried to delete from twice
            
            Scenario:
            Calling the POST operation for DeleteRules to delete rules giving the dame policy twice
            Input:
            List of two rules for deletion of the app org1/app3 for a single offeredby/coveredby combination resulting in no policy file beeing updated.
            Expected Result:
            No Rules are deleted and no rules are returned
            Success Criteria:
            DeleteRules returns status code 500 and no deletion is performed
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_Sucess">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a valid deletion of org1/app3 org1/app4
            Expected: DeletePolicy returns status code 201 and list of rules created match expected
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of 2 policy files of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting in all rules in two policyfile beeing removed.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule ids but not all rules is retuned
            Success Criteria:
            DeleteRules returns status code 201 and list of rules deleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePoliciesWithResourceRegistryId_Sucess">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a valid deletion of resource 1 and resource2
            Expected: DeletePolicy returns status code 201 and list of rules created match expected
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of 2 policy files of resource1 and resource2 between for a single offeredby/coveredby combination resulting in all rules in two policyfile beeing removed.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule ids but not all rules is retuned
            Success Criteria:
            DeleteRules returns status code 201 and list of rules deleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePoliciesWithNotExistingResourceRegistryId_Fail">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform an invalid deletion of a non-existing resource.
            Expected: DeletePolicy returns status code 400 and the error message "Unable to complete deletion".
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform an invalid deletion
            Input:
            Resource with a non existing resource registry id.
            Expected Result:
            Response contains error message.
            Success Criteria:
            DeleteRules returns status code 400
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_InvalidBearerToken_Unauthorized">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a valid deletion of org1/app3 with invalid Authorization token
            Expected: DeletePolicy returns status code 401
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion withot valid bearertoken
            Input:
            List of 2 policy files of the app org1/app3 and org1/app4 between for a single offeredby/coveredby combination resulting Http Unauthorized
            Expected Result:
            Nothing is performed and responce has UnAuthorized responcecode
            Success Criteria:
            DeleteRules returns status code 401
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_OneMissingPolicyFile_PartialSucess">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a valid deletion of org1/app3 org1/app4 and one who does not exixt org1/app8
            Expected: DeletePolicy returns status code 206 and list of rules deleted match expected
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of 3 policy files of the app org1/app3 and org1/app4 and org1/app8 between for a single offeredby/coveredby combination resulting in two policyfile beeing updated.
            Expected Result:
            Rules are deleted and returned with the CreatedSuccessfully flag set and rule in defoned policy files but not all policyfiles was touched so only rules from updated policyfiles is returned
            Success Criteria:
            DeletePolicy returns status code 206 and list of rules deleted to match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_AllPoliciesFail_Fail">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a valid deletion of org1/app8 error/postgrewritechangefail
            Expected: DeletePolicy returns status code 500
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of four rules for deletion spread accross 2 policy files of the app org1/app8 and error/postgrewritechangefail between for a single offeredby/coveredby combination.
            Expected Result:
            Nothing are deleted and 500 status code is returned
            Success Criteria:
            postgrewritechangefail returns status code 500
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_DuplicatePoliciesDefinedInput">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a invalid deletion of org1/app3 with the same policy defined twice
            Expected: DeletePolicy returns status code 500
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of four rules for deletion spread accross 2 policy files of the app org1/app8 and error/postgrewritechangefail between for a single offeredby/coveredby combination.
            Expected Result:
            Nothing are deleted and 500 status code is returned
            Success Criteria:
            returns status code 500
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_DeletePolicies_EmptyInput">
            <summary>
            Test case: Calling the POST operation for DeletePolicy to perform a invalid deletion of org1/app3 with the same policy defined twice
            Expected: DeletePolicy returns status code 500
            
            Scenario:
            Calling the POST operation for DeletePolicy to perform a valid deletion
            Input:
            List of four rules for deletion spread accross 2 policy files of the app org1/app8 and error/postgrewritechangefail between for a single offeredby/coveredby combination.
            Expected Result:
            Nothing are deleted and 500 status code is returned
            Success Criteria:
            returns status code 500
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_Unauthorized">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to without AccessToken
            Expected Result:
            Call should return Unauthorized
            Success Criteria:
            AddRules returns status code 401 Unauthorized
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_Badrequest_NoRules">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to without any rules specified in the body
            Expected Result:
            Call should return Badrequest
            Success Criteria:
            AddRules returns status code 400 Badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_Badrequest_InvalidModel">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to with invalid rule model
            Expected Result:
            Call should return Badrequest
            Success Criteria:
            AddRules returns status code 400 Badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_Success">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of two rules for delegation of the app org1/app1 between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_DelegatedByParty_Success">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of one rule for delegation of the resourceregistry resource2 between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_With_ResourceRegistryId_Success">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of two rules for delegation of the resource between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_DuplicateSuccess">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of two rules for delegation of the app org1/app3 between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids but since the delegation is already existing the RuleId is known before delegating as they are already existing in the Xacml file
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_With_RegistryResource_DuplicateSuccess">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of two rules for delegation of the resource for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids but since the delegation is already existing the RuleId is known before delegating as they are already existing in the Xacml file
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_MultipleAppsOfferedBysAndCoveredBys_Success">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation
            Input:
            List of 4 rules for delegation of from 4 different offeredBys to 4 different coveredBys for 4 different apps. Resulting in 4 different delegation policy files
            Expected Result:
            Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            Success Criteria:
            AddRules returns status code 201 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_OneInvalidApp_PartialSuccess">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a partially valid delegation
            Input:
            List of 4 rules for delegation of from 4 different offeredBys to 4 different coveredBys for 4 different apps. Resulting in 4 different delegation policy files. 1 of the rules are for an app which does not exist
            Expected Result:
            3 Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            1 Rule is not created and returned with the CreatedSuccessfully flag set to false and no rule id
            Success Criteria:
            AddRules returns status code 206 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_OneIncompleteInput_MissingOrgApp_PartialSuccess">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a partially valid delegation
            Input:
            List of 4 rules for delegation of from 4 different offeredBys to 4 different coveredBys for 4 different apps. Resulting in 4 different delegation policy files. 1 of the rules are incomplete (missing org/app resource specification)
            Expected Result:
            3 Rules are created and returned with the CreatedSuccessfully flag set and rule ids
            1 Rule is not created and returned with the CreatedSuccessfully flag set to false and no rule id
            Success Criteria:
            AddRules returns status code 206 and list of rules created match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.Post_AddRules_DelegationEventQueue_Push_Exception">
            <summary>
            Scenario:
            Calling the POST operation for AddRules to perform a valid delegation, but pushing the delegation event to the queue fails.
            Input:
            List with a rule for delegation of the app error/delegationeventfail between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Internal exception cause pushing delegation event to fail, after delegation has been stored.
            Success Criteria:
            AddRules returns status code Created, but a Critical Error has been logged
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_RuleType_Is_DirectlyDelegated">
            <summary>
            Test case: GetRules returns a list of rules offeredby has given coveredby
            Expected: GetRules returns a list of rules offeredby has given coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_RuleType_Is_InheritedViaKeyRole">
            <summary>
            Test case: GetRules returns a list of rules that have been inherited by the recipient via keyrole
            Expected: GetRules returns a list of rules offeredby's main unit has given to the recipient via keyrole
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_RuleType_Is_InheritedAsSubunitViaKeyrole">
            <summary>
            Test case: GetRules returns a list of rules that have been inherited by the subunit recipient via keyrole
            Expected: GetRules returns a list of rules offeredby's main unit has given to the subunit recipient via keyrole
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_RuleType_Is_InheritedAsSubunit">
            <summary>
            Test case: GetRules returns rule that is inherited by a subunit from the main unit
            Expected: GetRules returns a list of rules the subunit has received from the main unit
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_MissingValuesInRequest">
            <summary>
            Test case: GetRules with missing values in the request
            Expected: GetRules returns a BadRequest response
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_MissingOfferedByInRequest">
            <summary>
            Test case: GetRules with missing values in the request
            Expected: GetRules returns a BadRequest response
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_NoRulesRequest">
            <summary>
            Test case: GetRules for a coveredby that does not have any rules
            Expected: GetRules returns an empty list
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetRules_WithKeyRolePartyIdsSuccess">
            <summary>
            Test case: GetRules returns a list of rules offeredby has given two coveredbys (a userid and partyid)
            Expected: GetRules returns a list of rules offeredby has given coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_Valid">
            <summary>
            Test case: GetMaskinportenSchemaDelegations returns a list of delegations between supplier and consumer for a given scope.
                       Token is authorized for admin scope and and can lookup delegations even when scope is not in the consumers owned scope-prefixes (consumer_prefix)
            Expected: GetMaskinportenSchemaDelegations returns a list of delegations offered by supplier to consumer for a given scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_ServiceOwnerLookup_Valid">
            <summary>
            Test case: GetMaskinportenSchemaDelegations returns a list of delegations between supplier and consumer for a given scope.
                       Token is authorized for admin scope and and can lookup delegations even when scope is not in the consumers owned scope-prefixes (consumer_prefix)
            Expected: GetMaskinportenSchemaDelegations returns a list of delegations offered by supplier to consumer for a given scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_ServiceOwnerLookup_UnauthorizedScope">
            <summary>
            Test case: GetMaskinportenSchemaDelegations with a scope with altinn prefix, which the serviceowner skd is not authorized for
            Expected: GetMaskinportenSchemaDelegations returns forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_Valid_DelegationsEmpty">
            <summary>
            Test case: GetMaskinportenSchemaDelegations for orgnummer that does not have any delegations
            Expected: GetMaskinportenSchemaDelegations returns ok, no delegations found
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_MissingScope">
            <summary>
            Test case: GetMaskinportenSchemaDelegations without sending scopes
            Expected: GetMaskinportenSchemaDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_InvalidSupplier">
            <summary>
            Test case: GetMaskinportenSchemaDelegations for invalid supplier orgnummer
            Expected: GetMaskinportenSchemaDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_InvalidConsumer">
            <summary>
            Test case: GetMaskinportenSchemaDelegations for invalid consumer orgnummer
            Expected: GetMaskinportenSchemaDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_ScopesNotRegisteredOnResource">
            <summary>
            Test case: GetMaskinportenSchemaDelegations for a scope which is not a registered reference on any resources
            Expected: GetMaskinportenSchemaDelegations returns ok, no delegations found
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.DelegationsControllerTest.GetMaskinportenSchemaDelegations_Admin_InvalidScopeFormat">
            <summary>
            Test case: GetMaskinportenSchemaDelegations for an invalid scope format
            Expected: GetMaskinportenSchemaDelegations returns badrequest
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.DelegationsController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.LookupController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest.GetParty_Valid_PartyId_is_person">
            <summary>
            Test case: GetParty for partyId that corresponds to a party in partylist for authenticated user.
            Expected: GetParty returns list with party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest.GetParty_Valid_PartyId_is_Org">
            <summary>
            Test case: GetParty for partyId that corresponds to a party in partylist for authenticated user.
            Expected: GetParty returns list with party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest.GetParty_Valid_PartyId_is_Subunit">
            <summary>
            Test case: GetParty for partyId that corresponds to a party in partylist for authenticated user.
            Expected: GetParty returns list with party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.LookupControllerTest.GetParty_Invalid_partyId">
            <summary>
            Test case: GetParty for partyId that does not correspond to a party in partylist for authenticated user.
            Expected: GetParty returns 404 not found.
            </summary>
            <returns>404 not found</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.MaskinportenSchemaController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.MaskinportenSchemaController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_Valid_OfferedByParty">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns a list of delegations offeredby has given coveredby
            Expected: GetOfferedMaskinportenSchemaDelegations returns a list of delegations offeredby has given coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_Valid_OfferedByOrg">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns a list of delegations offeredby has given coveredby
            Expected: GetOfferedMaskinportenSchemaDelegations returns a list of delegations offeredby has given coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_Notfound_MissingOfferedBy">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns notfound when the query parameter is missing
            Expected: GetOfferedMaskinportenSchemaDelegations returns notfound
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_Forbidden_InvalidOfferedBy">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns Forbidden when the query parameter is invalid
            Expected: GetOfferedMaskinportenSchemaDelegations returns Forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_OfferedBy_NoDelegations">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns 200 with response message empty array when there are no delegations for the reportee
            Expected: GetOfferedMaskinportenSchemaDelegations returns 200 with response message empty array when there are no delegations for the reportee
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_ResourceMetadataNotFound">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns list of resources that were delegated. The resource metadata is set to not available if the resource in a delegation for some reason is  not found in resource registry
            Expected: GetOfferedMaskinportenSchemaDelegations returns list of resources that were delegated. The resource metadata is set to not available if the resource in a delegation for some reason is  not found in resource registry
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_MissingBearerToken">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not set
            Expected: GetOfferedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_InvalidBearerToken">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not valid
            Expected: GetOfferedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not valid
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_Valid_CoveredBy">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns a list of delegations received by coveredby
            Expected: GetReceivedMaskinportenSchemaDelegations returns a list of delegations received by coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_Valid_CoveredByOrg">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns a list of delegations received by coveredby when the coveredby is an organisation number
            Expected: GetReceivedMaskinportenSchemaDelegations returns a list of delegations received by coveredby
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_Missing_CoveredBy">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns notfound when the query parameter is missing
            Expected: GetReceivedMaskinportenSchemaDelegations returns notfound when the query parameter is missing
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_Invalid_CoveredBy">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns Forbidden when the query parameter is invalid
            Expected: GetReceivedMaskinportenSchemaDelegations returns Forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_CoveredBy_NoDelegations">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns 200 with empty array when there are no delegations received for the reportee
            Expected: GetReceivedMaskinportenSchemaDelegations returns 200 with rempty array when there are no delegations received for the reportee
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_ResourceMetadataNotFound">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns list of resources that were delegated. The resource metadata is set to not available if the resource in a delegation for some reason is  not found in resource registry
            Expected: GetReceivedMaskinportenSchemaDelegations returns list of resources that were delegated. The resource metadata is set to not available if the resource in a delegation for some reason is  not found in resource registry
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_MissingBearerToken">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not set
            Expected: GetReceivedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_InvalidBearerToken">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not valid
            Expected: GetReceivedMaskinportenSchemaDelegations returns unauthorized when the bearer token is not valid
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_Valid">
            <summary>
            Test case: GetMaskinportenDelegations returns a list of delegations between supplier and consumer for a given scope.
                       Token is authorized for admin scope and and can lookup delegations even when scope is not in the consumers owned scope-prefixes (consumer_prefix)
            Expected: GetMaskinportenDelegations returns a list of delegations offered by supplier to consumer for a given scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_ServiceOwnerLookup_Valid">
            <summary>
            Test case: GetMaskinportenDelegations returns a list of delegations between supplier and consumer for a given scope.
                       Token is authorized for admin scope and and can lookup delegations even when scope is not in the consumers owned scope-prefixes (consumer_prefix)
            Expected: GetMaskinportenDelegations returns a list of delegations offered by supplier to consumer for a given scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_ServiceOwnerLookup_NoSupplerConsumer_Valid">
            <summary>
            Test case: GetMaskinportenDelegations returns a list of delegations for a given scope.
                       Token is authorized for admin scope and and can lookup delegations even when scope is not in the consumers owned scope-prefixes (consumer_prefix)
            Expected: GetMaskinportenDelegations returns a list of delegations for a given scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_ServiceOwnerLookup_UnauthorizedScope">
            <summary>
            Test case: GetMaskinportenDelegations with a scope with altinn prefix, which the serviceowner skd is not authorized for
            Expected: GetMaskinportenDelegations returns forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_Valid_DelegationsEmpty">
            <summary>
            Test case: GetMaskinportenDelegations for orgnummer that does not have any delegations
            Expected: GetMaskinportenDelegations returns ok, no delegations found
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_MissingScope">
            <summary>
            Test case: GetMaskinportenDelegations without sending scopes
            Expected: GetMaskinportenDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_InvalidSupplier">
            <summary>
            Test case: GetMaskinportenDelegations for invalid supplier orgnummer
            Expected: GetMaskinportenDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_InvalidConsumer">
            <summary>
            Test case: GetMaskinportenDelegations for invalid consumer orgnummer
            Expected: GetMaskinportenDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_ScopesNotRegisteredOnResource">
            <summary>
            Test case: GetMaskinportenDelegations for a scope which is not a registered reference on any resources
            Expected: GetMaskinportenDelegations returns ok, no delegations found
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetMaskinportenDelegations_Admin_InvalidScopeFormat">
            <summary>
            Test case: GetMaskinportenDelegations for an invalid scope format
            Expected: GetMaskinportenDelegations returns badrequest
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_UserComplyingToPolicy">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations, user with necessary rights
            Expected: User is authorized
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetOfferedMaskinportenSchemaDelegations_UserNotComplyingToPolicy">
            <summary>
            Test case: GetOfferedMaskinportenSchemaDelegations, user without necessary rights
            Expected: Authorization is denied
            Testing if user without necessary rights is denied access to 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_UserComplyingToPolicy">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations, user with necessary rights
            Expected: User is authorized
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.GetReceivedMaskinportenSchemaDelegations_UserNotComplyingToPolicy">
            <summary>
            Test case: GetReceivedMaskinportenSchemaDelegations, user without necessary rights
            Expected: Authorization is denied
            Testing if user without necessary rights is denied access to 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_DAGL_Success">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry, to the organization 50004222
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: MaskinportenDelegation returns 201 Created with response body containing the expected delegated rights
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_DAGL_ExternalIdentifier_OrgNoReportee_Success">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 for the reportee organization 910459880 of the jks_audi_etron_gt maskinporten schema resource from the resource registry, to the organization 50004222
                       In this case:
                       - The user 20000490 is DAGL for the From unit 910459880
            Expected: MaskinportenDelegation returns 201 Created with response body containing the expected delegated rights
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_DAGL_ExternalIdentifier_OrgNoRecipient_Success">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry, to the organization 810418672
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The request 'To' property is using the urn:altinn:organizationnumber attribute in order to use the externally available organizationnumber to specify the recipient of the delegation
            Expected: MaskinportenDelegation returns 201 Created with response body containing the expected delegated rights
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_MissingToken_Unauthorized">
            <summary>
            Test case: MaskinportenDelegation performed without a user token
            Expected: 401 Unauthorized
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_SingleRightOnly">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20001337 with authentication level 2,
                       for the reportee party 1 to the recipient party 2
                       In this case:
                       - The request contains multiple rights
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_OrgAppResource">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20001337 with authentication level 2,
                       for the reportee party 1 to the recipient party 2
                       In this case:
                       - The request contains a resource specification using Org/App identifier
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidResourceRegistryId">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20001337 with authentication level 2,
                       for the reportee party 1 to the recipient party 2
                       In this case:
                       - The resource registry id does not exist
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidResourceType">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20001337 with authentication level 2,
                       for the reportee party 1 to the recipient party 2
                       In this case:
                       - The resource registry id is not for a MaskinportenSchema 
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidTo">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2,
                       for the reportee party 50002598 to the recipient party 2
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The recipient (To) in the request is not a valid party id
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidTo_UserId">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2,
                       for the reportee party 50002598 to the recipient userid 20001337
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The recipient (To) in the request is a userid which delegation of maskinporten schema to should not be possible
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidTo_Ssn">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2,
                       for the reportee party 50002598 to a recipient social security number
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The recipient (To) in the request is a social security number which delegation of maskinporten schema to should not be possible
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_InvalidFrom_Ssn">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2, on behalf of himself.
                       In this case:
                       - The user 20000490 tries to perform maskinporten delegation from himself
                       - This shouldn't really happen as long as the authorization requirement is done through roles tied to ER-roles,
                         but this case mocks permit from PDP to test internal service validation
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_NonDelegableResource">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2,
                       for the reportee party 50005545 of the non_delegable_maskinportenschema maskinporten schema resource from the resource registry to the organization 50004222
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The non_delegable_maskinportenschema resource has a role requirement (NOPE), which does not exist meaning the user will not have any delegable rights for the resource
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.PostMaskinportenSchemaDelegation_ValidationProblemDetails_TooLowAuthenticationLevelForResource">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 with authentication level 2,
                       for the reportee party 50005545 of the digdirs_company_car maskinporten schema resource from the resource registry to the organization 50004222
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The required minimum authentication level for digdirs_company_car
            Expected: MaskinportenDelegation returns 400 Bad Request with a problem details respons body describing the error
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeOfferedMaskinportenScopeDelegation_DAGL_Success">
            <summary>
            Test case: RevokeOfferedMaskinportenScopeDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       delegated to the organization 50004221
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: RevokeOfferedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeOfferedMaskinportenScopeDelegation_DAGL_ToOrgNo_Success">
            <summary>
            Test case: RevokeOfferedMaskinportenScopeDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       delegated to the organization 50004221
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: RevokeOfferedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeOfferedMaskinportenScopeDelegation_DAGL_FromOrgNo_Success">
            <summary>
            Test case: RevokeOfferedMaskinportenScopeDelegation performed by authenticated user 20000490 for the reportee organization 910459880 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       delegated to the organization 50004221
                       In this case:
                       - The user 20000490 is DAGL for the From unit 910459880
            Expected: RevokeOfferedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeOfferedMaskinportenScopeDelegation_ADMAI_Forbidden">
            <summary>
            Test case: RevokeOfferedMaskinportenScopeDelegation performed by authenticated user 20000095 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       delegated to the organization 50004221
                       In this case:
                       - The user 20000095 is ADMAI (Tilgangsstyrer) for the From unit 50005545
            Expected: RevokeOfferedMaskinportenScopeDelegation returns 403 Forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeOfferedMaskinportenScopeDelegation_ValidationProblemDetails_InvalidTo">
            <summary>
            Test case: RevokeOfferedMaskinportenScopeDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       delegated to party 2
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The To party does not exist
            Expected: RevokeOfferedMaskinportenScopeDelegation returns 400 Bad Request with ValidationProblemDetails body
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeReceivedMaskinportenScopeDelegation_DAGL_Success">
            <summary>
            Test case: RevokeReceivedMaskinportenScopeDelegation performed by authenticated user 20001337 for the reportee party 50004221 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       which have received delegation from the party 50005545
                       In this case:
                       - The user 20001337 is DAGL for the To unit 50004221
            Expected: RevokeReceivedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeReceivedMaskinportenScopeDelegation_DAGL_ToOrgNo_Success">
            <summary>
            Test case: RevokeReceivedMaskinportenScopeDelegation performed by authenticated user 20001337 for the reportee organization 810418532 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       which have received delegation from the party 50005545
                       In this case:
                       - The user 20001337 is DAGL for the To unit 810418532
            Expected: RevokeReceivedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeReceivedMaskinportenScopeDelegation_DAGL_FromOrgNo_Success">
            <summary>
            Test case: RevokeReceivedMaskinportenScopeDelegation performed by authenticated user 20001337 for the reportee organization 910459880 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       which have received delegation from the party 50005545
                       In this case:
                       - The user 20000490 is DAGL for the From unit 910459880
            Expected: RevokeReceivedMaskinportenScopeDelegation returns 204 No Content
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeReceivedMaskinportenScopeDelegation_ADMAI_Forbidden">
            <summary>
            Test case: RevokeReceivedMaskinportenScopeDelegation performed by authenticated user 20000095 for the reportee party 50004221 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       which have received delegation from the party 50005545
                       In this case:
                       - The user 20000095 is ADMAI (Tilgangsstyrer) for the To party 50004221
            Expected: RevokeReceivedMaskinportenScopeDelegation returns 403 Forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.RevokeReceivedMaskinportenScopeDelegation_ValidationProblemDetails_InvalidFrom">
            <summary>
            Test case: RevokeReceivedMaskinportenScopeDelegation performed by authenticated user 20001337 for the reportee party 50004221 of the jks_audi_etron_gt maskinporten schema resource from the resource registry,
                       which have received delegation from the party 2
                       In this case:
                       - The user 20001337 is DAGL for the To unit 50004221
                       - The From party 2 is not a valid party
            Expected: RevokeReceivedMaskinportenScopeDelegation returns 400 Bad Request with ValidationProblemDetails body
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.MaskinportenDelegation_DAGL_FromAndToIdenticalPartyId">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry, to the organization with partyId 50005545 (orgNr 910459880)
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: MaskinportenDelegation returns 400 BadRequest with response body containing ValidationProblemDetails with error message that CoveredBy can not be the same as OfferedBy
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.MaskinportenDelegation_DAGL_FromAndToIdenticalOrgNr">
            <summary>
            Test case: MaskinportenDelegation performed by authenticated user 20000490 for the reportee party 50005545 of the jks_audi_etron_gt maskinporten schema resource from the resource registry, to the organization with orgNr 910459880 (partyId: 50005545)
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: MaskinportenDelegation returns 400 BadRequest with response body containing ValidationProblemDetails with error message that CoveredBy can not be the same as OfferedBy
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_DAGL_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20000490 is authorized to delegate the maskinportenchema on behalf of the reportee party 50005545.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The only right for the maskinportenschema scope-access-schema is delegable through having DAGL:
                            - scope-access-schema:ScopeAccess
            Expected: DelegationCheck returns a list of RightDelegationStatus matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_HADM_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20001337 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
                       - The only right for the maskinportenschema scope-access-schema is delegable through having DAGL (and HADM inherits the same rights as DAGL):
                          - scope-access-schema:ScopeAccess
            Expected: DelegationCheck returns a list of RightDelegationStatus matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_PRIV_HasDelegableRights">
            <summary>
            Test case: DelegationCheck bars use by private persons
                       In this case:
                       - The user 20000490 has PRIV role for itself (party 50002598)
                       - Only Organizations can delegate and get delegated maskinpostenschema
            Expected: DelegationCheck returns a 403 Forbidden
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_AppRight_BadRequest">
            <summary>
            Test case: DelegationCheck is only made to be used for MaskinportenServices, not A3 apps
                       In this case:
                       - Since the resource is an AltinnApp, a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_InvalidResource_BadRequest">
            <summary>
            Test case: DelegationCheck when the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the invalid resource non_existing_id 
                       In this case:
                       - Since the resource is invalid a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_RRResource_BadRequest">
            <summary>
            Test case: DelegationCheck is only made to be used for MaskinportenServices, not resource registry resources
                       In this case:
                       - Since the resource is an AltinnApp, a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.MaskinportenSchemaControllerTest.DelegationCheck_InsufficientAccessLevel">
            <summary>
            Test case: DelegationCheck checks that minimum required access level is fulfilled
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545, meaning the resource scope-access-schema is delegable for the user
                       - The user is currently authorized with a level 2 while the resource requires a minum level of 3
            Expected: DelegationCheck returns a responce error matching expected
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.PolicyInformationPointControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.PolicyInformationPointController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.PolicyInformationPointControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.PolicyInformationPointController})">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Tests.Controllers.PolicyInformationPointControllerTest"/> class.
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.PolicyInformationPointControllerTest.Scenarios">
            <summary>
            Sets up test scenarios for <see cref="M:Altinn.AccessManagement.Controllers.PolicyInformationPointController.GetAllDelegationChanges(Altinn.AccessManagement.Core.Models.DelegationChangeInput,System.Threading.CancellationToken)"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.PolicyInformationPointControllerTest.GetDelegationChanges_ValidResponse(System.String)">
            <summary>
            Test case: Tests if you can get all delegation changes for a resource
            Expected: Returns delegation changes for a resource
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest">
            <summary>
            Tests for AccessManagmet Resource metadata
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.ResourceController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_ResourceStored">
            <summary>
            Test calling InsertAccessManagementResource with valid data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_MissingBearerToken">
            <summary>
            Test calling InsertAccessManagementResource with missing token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_InvalidBearerToken">
            <summary>
            Test calling InsertAccessManagementResource with invalid token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_NoInput">
            <summary>
            Test calling InsertAccessManagementResource with empty body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_InvalidModel">
            <summary>
            Test calling InsertAccessManagementResource with empty body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_ResourcePartialStored">
            <summary>
            Test calling InsertAccessManagementResource with valid data one filing in write
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceControllerTest.InsertAccessManagementResource_AllFailed">
            <summary>
            Test calling InsertAccessManagementResource with valid data one filing in write
            </summary>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.ResourceOwnerAuthorizedPartiesControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.ResourceOwnerAuthorizedPartiesController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceOwnerAuthorizedPartiesControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.ResourceOwnerAuthorizedPartiesController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceOwnerAuthorizedPartiesControllerTest.PostResourceOwnerAuthorizedParties_InvalidToken_Unauthorized(System.String)">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        without valid token
            Expected:   - Should return 401 Unauthorized
            Reason:     Operation requires valid token
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceOwnerAuthorizedPartiesControllerTest.PostResourceOwnerAuthorizedParties_ValidToken_MissingAuthorizationScope_Forbidden(System.String)">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid token but missing required scope
            Expected:   - Should return 403 Forbidden
            Reason:     Operation requires valid token with authorized scope
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.ResourceOwnerAuthorizedPartiesControllerTest.PostResourceOwnerAuthorizedParties_Ok(System.String,Altinn.AccessManagement.Models.BaseAttributeExternal,System.Boolean,System.Boolean,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal})">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid token including authorized scope
            Expected:   - Should return 200 OK
                        - Should return the expected Authorized Party list for the requested party
            Reason:     See individual test case description in <see cref="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties"></see>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.RightsInternalController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.RightsInternalController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_UserDelegation_KeyRoleUnitDelegation_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000095 have for the From party 50005545 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50005545) has delegated the "Park" action directly to the user.
                       - The From unit (50005545) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_UserDelegation_KeyRoleUnitDelegation_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000095 have for the From party 50005545 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50005545) has delegated the "Park" action directly to the user.
                       - The From unit (50005545) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_DAGL_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50005545 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_DAGL_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50005545 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_HADM_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20001337 have for the From party 50005545 for the digdirs_company_car resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_HADM_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20001337 have for the From party 50005545 for the digdirs_company_car resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_UserDelegation_MainUnitToUserDelegation_MainUnitToKeyRoleDelegation_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50004221 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "Race" action directly to the user.
                       - The main unit (50004222) has delegated the "Park" action to the user.
                       - The main unit (50004222) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_ResourceRight_UserDelegation_MainUnitToUserDelegation_MainUnitToKeyRoleDelegation_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50004221 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "Race" action directly to the user.
                       - The main unit (50004222) has delegated the "Park" action to the user.
                       - The main unit (50004222) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_AppRight_UserDelegation_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20001337 have for the From party 50001337 for the Altinn App org1/app1.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_AppRight_UserDelegation_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20001337 have for the From party 50001337 for the Altinn App org1/app1.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_AppRight_DAGL_ReturnAllPolicyRights_False">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50005545 for the Altinn App ttd/rf-0002.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RightsQuery_AppRight_DAGL_ReturnAllPolicyRights_True">
            <summary>
            Test case: RightsQuery returns a list of rights the To userid 20000490 have for the From party 50005545 for the Altinn App ttd/rf-0002.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user has Permit for the rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_AppRight_DAGL_ReturnAllPolicyRights_False">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20000490 is able to delegate to others, for the From party 50005545 for the Altinn App ttd/rf-0002.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
            Expected: GetDelegableRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_AppRight_DAGL_ReturnAllPolicyRights_True">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20000490 is able to delegate to others, for the From party 50005545 for the Altinn App ttd/rf-0002.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user can delegate the right (which is indicated by the CanDelegate bool).
            Expected: GetDelegableRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_ResourceRight_UserDelegation_MainUnitToUserDelegation_MainUnitToKeyRoleDelegation_ReturnAllPolicyRights_False">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20000490 is able to delegate to others, for the From party 50004221 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "Race" action directly to the user.
                       - The main unit (50004222) has delegated the "Park" action to the user.
                       - The main unit (50004222) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_ResourceRight_UserDelegation_MainUnitToUserDelegation_MainUnitToKeyRoleDelegation_ReturnAllPolicyRights_True">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20000490 is able to delegate to others, for the From party 50004221 for the jks_audi_etron_gt resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "Race" action directly to the user.
                       - The main unit (50004222) has delegated the "Park" action to the user.
                       - The main unit (50004222) has delegated the "Drive" action to the party 50005545 where the user is DAGL and have keyrole privileges.
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user can delegate the right (which is indicated by the CanDelegate bool).
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_ResourceRight_HADM_ReturnAllPolicyRights_False">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20001337 is able to delegate to others, for the From party 50005545 for the digdirs_company_car resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_ResourceRight_HADM_ReturnAllPolicyRights_True">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20001337 is able to delegate to others, for the From party 50005545 for the digdirs_company_car resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user can delegate the right (which is indicated by the CanDelegate bool).
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_AppRight_UserDelegation_ReturnAllPolicyRights_False">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20001337 is able to delegate to others, for the From party 50001337 for the Altinn App org1/app1.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegableRightsQuery_AppRight_UserDelegation_ReturnAllPolicyRights_True">
            <summary>
            Test case: DelegableRightsQuery returns a list of rights the To userid 20001337 is able to delegate to others, for the From party 50001337 for the Altinn App org1/app1.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
                       - The returnAllPolicyRights query param is set to True and operation should return all rights found in the resource registry XACML policy whether or not the user can delegate the right (which is indicated by the CanDelegate bool).
            Expected: GetRights returns a list of right matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_DAGL_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - 6 out of 9 of the rights for the resource: generic-access-resource is delegable through having DAGL:
                            - generic-access-resource:read
                            - generic-access-resource:admai-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_DAGL_HasTheDelegableRightsExistingForEndUsers">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the app ttd/apps-test.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - 8 out of 10 of the rights for the app: ttd/apps-test is delegable through having DAGL:
                            - apps-test,ttd:instantiate
                            - apps-test,ttd:read
                            - apps-test,ttd,Task_1:read
                            - apps-test,ttd,Task_1:write
                            - apps-test,EndEvent_1,ttd:read
                            - apps-test,EndEvent_1,ttd:write
                            - apps-test,ttd:delete
                            - apps-test,events,ttd:read
                      - 2 out of the 10 rights is only available to the service owner and is removed entirly from the result as it is not available for any end users
                            - apps-test,EndEvent_1,ttd:complete
                            - apps-test,ttd:write
                      - Also some of the rules is also available to the service owner in those cases only the detail for this access is removed from the result this is for
                            - apps-test,ttd:instantiate
                            - apps-test,ttd:read
            
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected: 8 Delegable with roles returned Delegable as role is correct, 2 Not connected to any roles filtered away. All Rule details for Service Owner is Filtered away
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_NoRoleOrRights_AllRightsNotDelegableServiceOwnerRightsFilteredAway">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005546 for the app ttd/apps-test.
                       In this case:
                       - The user 20000490 has no rights for the From unit 50005546
                       - 8 out of 10 of the rights for the app: ttd/apps-test is delegable through having Roles (DAGL, REGNA, ADMAI):
                            - apps-test,ttd:instantiate
                            - apps-test,ttd:read
                            - apps-test,ttd,Task_1:read
                            - apps-test,ttd,Task_1:write
                            - apps-test,EndEvent_1,ttd:read
                            - apps-test,EndEvent_1,ttd:write
                            - apps-test,ttd:delete
                            - apps-test,events,ttd:read
                      - 2 out of the 10 rights is only available to the service owner and is removed entirly from the result as it is not available for any end users
                            - apps-test,EndEvent_1,ttd:complete
                            - apps-test,ttd:write
                      - Also some of the rules is also available to the service owner in those cases only the detail for this access is removed from the result this is for
                            - apps-test,ttd:instantiate
                            - apps-test,ttd:read
            
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected: 8 Delegable with roles returned but not delegable as role is missing, 2 Not connected to any roles filtered away. All Rule details for Service Owner is Filtered away
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_PRIV_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of itself (partyId 50002598) for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 has PRIV role for itself (party 50002598)
                       - 5 out of 9 of the rights for the resource: generic-access-resource is delegable through having PRIV:
                            - generic-access-resource:read
                            - generic-access-resource:write
                            - generic-access-resource:admai-delegated-action
                            - generic-access-resource,priv-delegation-subtask:delegated-action-to-user
                            - generic-access-resource,priv-delegation-subtask:delegated-action-to-keyroleunit
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_HADM_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated userid 20001337 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
                       - 6 out of 9 of the rights for the resource: generic-access-resource is delegable through having HADM (which inheirits same rights for delegation as DAGL):
                            - generic-access-resource:read
                            - generic-access-resource:admai-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_GenericAccessResource_SubUnitToUserDelegation_SubUnitToKeyRoleUnitDelegation_MainUnitToUserDelegation_MainUnitToKeyRoleUnitDelegation_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated 20000490 is authorized to delegate on behalf of the reportee party 50004221 for the generic-access-resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "subunit-delegated-action" action directly to the user.
                       - The From unit (50004221) has delegated the "subunit-delegated-action-to-keyunit" action directly to the user.
                       - The main unit (50004222) has delegated the "mainunit-delegated-action" action to the user.
                       - The main unit (50004222) has delegated the "mainunit-delegated-action-to-keyunit" action to the party 50005545 where the user is DAGL and have keyrole privileges.
                       - 4 out of 8 rights are thus delegable and should contain the information of the actual recipient of the delegation
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_AppRight_UserDelegation_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the org1_app1 Altinn App.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
            Expected: DelegationCheck returns a list of RightDelegationCheckResult matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_ServiceRight_UserDelegation_HasDelegableRights">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the 1337_1338 Altinn 2 service.
                       In this case:
                       - The test scenario is setup using existing test data for 1337/1338, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "1338,1337,task1:sign" and "rightKey": "1338,1337,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
            Expected: DelegationCheck returns a list of RightDelegationStatus matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_InvalidResource_BadRequest">
            <summary>
            Test case: DelegationCheck returns a list of rights the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the invalid resource non_existing_id
                       In this case:
                       - Since the resource is invalid a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.DelegationCheck_MaskinportenSchema_BadRequest">
            <summary>
            Test case: DelegationCheck when the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the MaskinportenSchema resource jks_audi_etron_gt
                       In this case:
                       - Since the resource is a MaskinportenSchema a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToPerson_ByDagl_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The user is delegating:
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToSystemUser_ByDagl_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The user is delegating:
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource2_FromOrg_ToSystemUser_ByDagl_ResourceNotAllowed">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The user is delegating:
                            - generic-access-resource2,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource2,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource2,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource2,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_App_FromOrg_ToSystemUser_ByDagl_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the app: ttd/apps-test from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The user is delegating:
                            - ttd,apps-test:read
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToUserUuid_ByDagl_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 is DAGL for the From unit 50005545
                       - The user is delegating:
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                       - The recipient is a person identified through user UUID
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToPerson_ByDagl_MissingToLastName">
            <summary>
            Test case: Delegation returns validation problem details when trying to delegate to SSN without specifying last name of recipient
            Expected: Delegation returns validation problem details
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromPerson_ToPerson_ByPriv_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of itself (partyId 50002598) for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 has PRIV role for itself (party 50002598)
                       - The user delegates:
                            - generic-access-resource:read
                            - generic-access-resource:write
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromPerson_ToOrganizationUuid_ByPriv_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000490 is authorized to delegate on behalf of itself (partyId 50002598) for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 has PRIV role for itself (party 50002598)
                       - The user delegates:
                            - generic-access-resource:read
                            - generic-access-resource:write
                       - The To organization is identified by it's organization uuid: 00000000-0000-0000-0001-000000000004
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToPerson_ByHadm_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20001337 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20001337 is HADM for the From unit 50005545
                       - The user is using HADM privilege to self delegate rights 
                       - 5 out of 8 of the rights for the resource: generic-access-resource is delegable through having HADM (which inheirits same rights for delegation as DAGL):
                            - generic-access-resource:read
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:subunit-delegated-action-to-keyroleunit
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action
                            - generic-access-resource,org-delegation-subtask:mainunit-delegated-action-to-keyroleunit
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromSubunit_ToOrg_ByDelegation_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated 20000490 is authorized to delegate on behalf of the reportee party 50004221 for the generic-access-resource from the resource registry.
                       In this case:
                       - The From unit (50004221) is a subunit of 500042222.
                       - The From unit (50004221) has delegated the "subunit-delegated-action" action directly to the user.
                       - The From unit (50004221) has delegated the "subunit-delegated-action-to-keyunit" action directly to the user.
                       - The main unit (50004222) has delegated the "mainunit-delegated-action" action to the user.
                       - The main unit (50004222) has delegated the "mainunit-delegated-action-to-keyunit" action to the party 50005545 where the user is DAGL and have keyrole privileges.
                       - 4 out of 8 rights are thus delegable and should contain the information of the actual recipient of the delegation
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToEcUser_ByAdmai_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000095 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 has the roles ADMAI and UTINN for the From unit 50005545
                       - The UTINN gives the user access to delegate:
                            - generic-access-resource:admai-delegated-action
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_GenericAccessResource_FromOrg_ToEcUserUuid_ByAdmai_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated userid 20000095 is authorized to delegate on behalf of the reportee party 50005545 for the generic-access-resource from the resource registry.
                       In this case:
                       - The user 20000490 has the roles ADMAI and UTINN for the From unit 50005545
                       - The UTINN gives the user access to delegate:
                            - generic-access-resource:admai-delegated-action
                       - The Enterprise user is identified in To attribute by it's user Uuid: 00000000-0000-0000-0002-000000010727
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_AppRight_PartialSuccess">
            <summary>
            Test case: Delegation returns a list of rights the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the org1_app1 Altinn App.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
                       - The user is trying to delegate:
                            - app1,org1:read
                            - app1,org1:write
                       - The user only have delegable rights for app1,org1:read
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_Altinn2Service_Success">
            <summary>
            Test case: Delegation returns a list of rights the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the org1_app1 Altinn App.
                       In this case:
                       - The test scenario is setup using existing test data for Org1/App1, offeredBy 50001337 and coveredbyuser 20001337, where the delegation policy contains rules for resources not in the App policy:
                            ("rightKey": "app1,org1,task1:sign" and "rightKey": "app1,org1,task1:write"). This should normally not happen but can become an real scenario where delegations have been made and then the resource/app policy is changed to remove some rights.
                       - The user is trying to delegate:
                            - app1,org1:read
                            - app1,org1:write
                       - The user only have delegable rights for app1,org1:read
            Expected: Delegation returns a RightsDelegationResponse matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_InvalidResource_BadRequest">
            <summary>
            Test case: Delegation when the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the invalid resource non_existing_id 
                       In this case:
                       - Since the resource is invalid a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.Delegation_MaskinportenSchema_BadRequest">
            <summary>
            Test case: Delegation when the authenticated 20001337 is authorized to delegate on behalf of the reportee party 50001337 for the MaskinportenSchema resource jks_audi_etron_gt
                       In this case:
                       - Since the resource is a MaskinportenSchema a BadRequest response with a ValidationProblemDetails model response should be returned
            Expected: Responce error model is matching expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RevokeRightsOfferedDelegations_ReturnNoContent(System.String,Altinn.AccessManagement.Models.RevokeOfferedDelegationExternal,System.String,System.String,System.String)">
            <summary>
            Test case: Revoke given delegation
            Expected: - Should return 201 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.RightsInternalControllerTest.RevokeRightsReceivedDelegations_ReturnNoContent(System.String,Altinn.AccessManagement.Models.RevokeReceivedDelegationExternal,System.String,System.String,System.String)">
            <summary>
            Test case: Revoke given delegation
            Expected: - Should return 201 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.MaskinportenSchemaController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.#ctor(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.MaskinportenSchemaController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.WithAssertDbContainsDelegationsToParty(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that a delegation from and to party exists in database
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.WithAssertResponseContainsDelegations(Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IParty)">
            <summary>
            Assert response
            </summary>
            <param name="from">delegated from</param>
            <param name="to">delegation to</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations">
            <summary>
            Seeds for <see cref="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.GET_GetOfferedMaskinportenSchemaDelegations(Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations)"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">party id</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations.#ctor(System.String,System.Int32,System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[])">
            <summary>
            Seeds for <see cref="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.GET_GetOfferedMaskinportenSchemaDelegations(Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations)"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">party id</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations.Seeds">
            <summary>
            Seeds
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.GET_GetOfferedMaskinportenSchemaDelegations(Altinn.AccessManagement.Tests.Controllers.V2MaskinportenSchemaControllerTest.SeedGetOfferedMaskinportenSchemaDelegations)">
            <summary>
            <see cref="M:Altinn.AccessManagement.Controllers.MaskinportenSchemaController.GetOfferedMaskinportenSchemaDelegations(System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="acceptanceCriteria">acceptance criteria</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.ResourceController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.#ctor(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.ResourceController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.WithAssertResourceExistsInDb(Altinn.AccessManagement.Core.Models.AccessManagementResource)">
            <summary>
            Asserts that resource exists in DB
            </summary>
            <param name="expected">excpected resource to exsist</param>
            <returns></returns>
        </member>
        <member name="F:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.TestAltinnApp">
            <summary>
            Test input
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource">
            <summary>
            Seeds for <see cref="T:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource.#ctor(System.String,System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[])">
            <summary>
            Seeds for <see cref="T:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource.Seeds">
            <summary>
            Seeds
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.POST_UpsertResource(Altinn.AccessManagement.Tests.Controllers.V2ResourceControllerTest.SeedPostUpsertResource)">
            <summary>
            <see cref="M:Altinn.AccessManagement.Controllers.ResourceController.Post(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AccessManagementResource})"/>
            </summary>
            <param name="acceptanceCriteria">acceptance criteria</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.RightsInternalController"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.#ctor(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            <see cref="T:Altinn.AccessManagement.Controllers.RightsInternalController"/>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered">
            <summary>
            Seeds for <see cref="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.GET_RightsDelegationsOffered(Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered)"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">partyId in URL</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered.#ctor(System.String,System.Int32,System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[])">
            <summary>
            Seeds for <see cref="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.GET_RightsDelegationsOffered(Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered)"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">partyId in URL</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered.Seeds">
            <summary>
            Seeds
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.GET_RightsDelegationsOffered(Altinn.AccessManagement.Tests.Controllers.V2RightsInternalControllerTest.SeedGetRightsDelegationsOffered)">
            <summary>
            <see cref="M:Altinn.AccessManagement.Controllers.RightsInternalController.GetOfferedRights(System.Int32,System.Threading.CancellationToken)"/>
            </summary>
            <param name="acceptanceCriteria">acceptance test</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.CustomWebApplicationFactory`1">
            <summary>
            CustomWebApplicationFactory for integration tests
            </summary>
            <typeparam name="TStartup">Entrypoint</typeparam>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.CustomWebApplicationFactory`1.ConfigureWebHost(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            ConfigureWebHost for setup of configuration and test services
            </summary>
            <param name="builder">IWebHostBuilder</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties">
            <summary>
            Test data builder for testing AuthorizedParties
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.UnauthenticatedNoValidToken">
            <summary>
            Sets up a request without a valid token
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.UnauthenticatedValidTokenMissingUserContext">
            <summary>
            Sets up a request with a valid token but missing a valid urn:altinn:userid claim
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ValidResourceOwnerTokenMissingScope">
            <summary>
            Sets up a request with a valid token but missing a valid authorization scope for authorized party list API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonToPerson">
            <summary>
            Sets up the authenticated user,
            getting authorized parties from only Altinn 3
            where the user has received delegations from a person,
            of both an Altinn App and a Resource
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonToPersonInclA2">
            <summary>
            Sets up the authenticated user,
            getting authorized parties from both Altinn 3 and Altinn 2
            where the user has received delegations from a person,
            of both an Altinn App, a Resource and a Role from Altinn 2
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonToOrg">
            <summary>
            Sets up the authenticated user as DAGL of an organization,
            getting authorized parties from only Altinn 3
            where the user's organization has received delegations from a person,
            of both an Altinn App and a Resource
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonToOrgInclA2">
            <summary>
            Sets up the authenticated user as DAGL of an organization,
            getting authorized parties from both Altinn 3 and Altinn 2
            where the user's organization has received delegations from a person,
            of both an Altinn App, a Resource and a Role from Altinn 2
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.MainUnitAndSubUnitToPerson">
            <summary>
            Sets up the authenticated user,
            getting authorized parties from only Altinn 3
            where the user has received the following delegations:
                from mainunit:
                    the resource: devtest_gar_authparties-main-to-person
                from subunit:
                    the altinn app: ttd/am-devtest-sub-to-person
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.MainUnitAndSubUnitToPersonInclA2">
            <summary>
            Sets up the authenticated user,
            getting authorized parties from only Altinn 3
            where the user has received the following delegations:
                from mainunit:
                    the resource: devtest_gar_authparties-main-to-person
                    the role: REGNA
                from subunit:
                    the altinn app: ttd/am-devtest-sub-to-person
                    the role: SISKD
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.MainUnitAndSubUnitToOrg">
            <summary>
            Sets up the authenticated user as DAGL of an organization,
            getting authorized parties from only Altinn 3
            where the user's organization has received the following delegations:
                from mainunit:
                    the resource: devtest_gar_authparties-main-to-org
                from subunit:
                    the altinn app: ttd/am-devtest-sub-to-org
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.MainUnitAndSubUnitToOrgInclA2">
            <summary>
            Sets up the authenticated user as DAGL of an organization,
            getting authorized parties from only Altinn 3
            where the user's organization has received the following delegations:
                from mainunit:
                    the resource: devtest_gar_authparties-main-to-org
                    the role: UTINN
                from subunit:
                    the altinn app: ttd/am-devtest-sub-to-org
                    the role: APIADM
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.SubUnitToPerson">
            <summary>
            Sets up the authenticated user,
            getting authorized parties from only Altinn 3
            where the user has received the following delegations:
                from subunit:
                    the altinn app: ttd/am-devtest-sub-to-person
                    the resource: devtest_gar_authparties-sub-to-person
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonGettingSelf_BadRequest">
            <summary>
            Sets up the authenticated user,
            getting it's own authorized party
            without including Altinn 2 authorized parties
            
            Expected result: empty response since Altinn 2 is required in order to get self through PRIV role
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonGettingSelfInclA2_Success">
            <summary>
            Sets up the authenticated user,
            getting it's own authorized party
            including Altinn 2 authorized parties
            
            Expected result: success, own authorized party is found including the PRIV authorized role
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonGettingA3Delegator_Success">
            <summary>
            Test case:  GET AuthorizedParty/{A3DelegatorPartyId} for authenticated user, without including Altinn 2 authorized parties
            Expected:   - Should return 200 OK
                        - Should include expected authorized party model of the authenticated user
            Reason:     Since Altinn 3 delegation exists A2 authorized parties is not needed to find Authorized Party with an authorized resource connection
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonGettingA3DelegatorInclA2_Success">
            <summary>
            Test case:  GET AuthorizedParty/{A3DelegatorPartyId} for authenticated user, including Altinn 2 authorized parties
            Expected:   - Should return 200 OK
                        - Should include expected authorized party model of the authenticated user
            Reason:     Since Altinn 3 delegation exists Altinn 2 authorized parties is not needed to find Authorized Party with an authorized resource connection,
                        but will enrich the Authorized Party with any authorized roles from Altinn 2
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.PersonGettingOwnList_Success">
            <summary>
            Test case:  GET {party}/authorizedparties?includeAltinn2={includeAltinn2}
                        with the authenticated user and getting the authorized party list for it's own {party}
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the authenticated user
            Reason:     Authenticated users are authorized for getting own authorized party list
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.AccessManagerGettingOrgList_Success">
            <summary>
            Test case:  GET {party}/authorizedparties?includeAltinn2={includeAltinn2}
                        with the authenticated user being an authorized Access Manager for the {party} organization
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the organization
            Reason:     Authenticated users who are authorized as Access Manager for organizations should be allowed to get the organizations authorized party list
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.AccessManagerGettingPersonList_Forbidden">
            <summary>
            Test case:  GET {party}/authorizedparties?includeAltinn2={includeAltinn2}
                        with the authenticated user being an authorized Access Manager for the {party} person
            Expected:   - Should return 403 Forbidden
                        - Should include expected authorized party list of the organization
            Reason:     Authenticated users who are authorized as Access Manager for organizations should be allowed to get the organizations authorized party list
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetPersonList_ByPersonId">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for a person identified by urn:altinn:person:identifier-no
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetPersonList_ByPersonId_InclResourcesThroughRoles">
            <summary>
            Test case:  <![CDATA[POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}&includeAuthorizedResourcesThroughRoles={inclRoleResources}]]>
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for a person identified by urn:altinn:person:identifier-no
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
                        - Should include authorized resources the user has access to through roles for each authorized party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetPersonList_ByPersonUuid">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for a person identified by urn:altinn:person:uuid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetPersonList_ByPartyId">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for a person identified by urn:altinn:partyid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetPersonList_ByUserId">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for a person identified by urn:altinn:userid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetOrgList_ByOrganizationNumber">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:organization:identifier-no
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetOrgList_ByOrganizationNumber_InclResourcesThroughRoles">
            <summary>
            Test case:  <![CDATA[POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}&includeAuthorizedResourcesThroughRoles={inclRoleResources}]]>
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:organization:identifier-no
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
                        - Should include authorized resources the user has access to through roles for each authorized party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetOrgList_ByOrganizationUuid">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:organization:uuid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetOrgList_ByPartyId">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:partyid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetEnterpriseUserList_ByEnterpriseUserUsername">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:enterpriseuser:username
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetEnterpriseUserList_ByEnterpriseUserUsername_InclResourcesThroughRoles">
            <summary>
            Test case:  <![CDATA[POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}&includeAuthorizedResourcesThroughRoles={inclRoleResources}]]>
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:enterpriseuser:username
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
                        - Should include authorized resources the user has access to through roles for each authorized party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetEnterpriseUserList_ByEnterpriseUserUuid">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:enterpriseuser:uuid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.ResourceOwner_GetEnterpriseUserList_ByUserId">
            <summary>
            Test case:  POST resourceowner/authorizedparties?includeAltinn2={includeAltinn2}
                        with a valid resource owner token with the scope: altinn:accessmanagement/authorizedparties.resourceowner
                        getting authorized party list for an organization identified by urn:altinn:userid
            Expected:   - Should return 200 OK
                        - Should include expected authorized party list of the requested party
            Reason:     Authenticated resource owner organizations authorized with scope: altinn:accessmanagement/authorizedparties.resourceowner
                        are authorized to get authorized party list of any person, user or organization in Altinn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Data.TestDataAuthorizedParties.AssertAuthorizedPartyExternalEqual(Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal,Altinn.AccessManagement.Core.Models.AuthorizedPartyExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.AuthorizedParty"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.PostgresFixture">
            <summary>
            For running exclusively database tests. Before each tests, method <see cref="M:Altinn.AccessManagement.Tests.Fixtures.PostgresFixture.New"/> must be called in order
            to create a new database that runs isolated for that tests. This should be used as an <see cref="T:Xunit.IClassFixture`1"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresFixture.New">
            <summary>
            Creates a new database and runs the migrations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresFixture.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresFixture.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.PostgresServer">
            <summary>
            Postgres singleton that creates a npg sql server and creates a new database for each test 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.DbPassword">
            <summary>
            Database Password
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.DbUserName">
            <summary>
            Database Username
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.DbAdminName">
            <summary>
            Database Admin
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.StartUsing(System.Object)">
            <summary>
            Must be called before getting creating databases
            </summary>
            <param name="consumer">this</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.StopUsing(System.Object)">
            <summary>
            Should be called after tests are executed
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresServer.NewDatabase">
            <summary>
            Creates a new database and connection string
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase">
            <summary>
            Container for persisting connections string and database name
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.#ctor(System.String,System.String)">
            <summary>
            Container for persisting connections string and database name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.Dbname">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.DelegationMetadata">
            <summary>
            Creates <see cref="T:Altinn.AccessManagement.Persistence.DelegationMetadataRepository"/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.ResourceMetadata">
            <summary>
            Creates <see cref="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.ResourceMetadata"/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.Admin">
            <summary>
            Admin name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.User">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.PostgresDatabase.Value">
            <summary>
            Implements <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.RepositoryContainer">
            <summary>
            RepositoryContainer
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.RepositoryContainer.#ctor(Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository,Altinn.AccessManagement.Core.Repositories.Interfaces.IResourceMetadataRepository)">
            <summary>
            RepositoryContainer
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.RepositoryContainer.DelegationMetadataRepository">
            <summary>
            DelegationMetadataRepository
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.RepositoryContainer.ResourceMetadataRepository">
            <summary>
            ResourceMetadataRepository
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer">
            <summary>
            Build a Delegation Change
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.New(System.Action{Altinn.AccessManagement.Core.Models.DelegationChange}[])">
            <summary>
            Creates a new delegation
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithDelegationChangeRevokeLast(Altinn.AccessManagement.Core.Models.DelegationChange)">
            <summary>
            sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.DelegationChangeType"/> to given delegation
            </summary>
            <param name="delegation">delegation</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithResource(Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.ResourceId"/> to given "resource"
            </summary>
            <param name="resource">resource</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithToUser(Altinn.AccessManagement.Tests.Seeds.IUserProfile)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByUserId"/> to given "profile"
            </summary>
            <param name="profile">user profile</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithToUser(System.Int32)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByUserId"/> to given "profile"
            </summary>
            <param name="userId">manual set user ID</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithToParty(Altinn.AccessManagement.Tests.Seeds.IParty)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByPartyId"/> to given party
            </summary>
            <param name="party">party</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithToParty(System.Int32)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByPartyId"/> to given party
            </summary>
            <param name="partyId">manually sets Party ID</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithFrom(Altinn.AccessManagement.Tests.Seeds.IParty)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.OfferedByPartyId"/> to given party 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithFrom(System.Int32)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.OfferedByPartyId"/> to given party 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithPerformedByUserProfile(Altinn.AccessManagement.Tests.Seeds.IUserProfile)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByUserId"/> to given userId
            </summary>
            <param name="profile">User profile</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.DelegationChangeComposer.WithPerformedByParty(Altinn.AccessManagement.Tests.Seeds.IParty)">
            <summary>
            Sets the field <see cref="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByPartyId"/> to given party
            </summary>
            <param name="party">party</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture">
            <summary>
            Test server for Access management API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture.ConfigureHostBuilderWithScenarios(Altinn.AccessManagement.Tests.Scenarios.Scenario[])">
            <summary>
            Creates a specific mock context based on given scenarios.
            </summary>
            <param name="scenarios">list of scenarios</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture.InitializeAsync">
            <summary>
            Signalize usage of postgres server
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture.DisposeAsync">
            <summary>
            Removes itself as consumer of the postgres server
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Fixtures.Host">
            <summary>
            Container for the test server API and HTTP Client for sending requests 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Fixtures.Host.#ctor(Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory{Program},System.Net.Http.HttpClient,Altinn.AccessManagement.Tests.Contexts.MockContext)">
            <summary>
            Container for the test server API and HTTP Client for sending requests 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.Host.Api">
            <summary>
            Test server
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.Host.Client">
            <summary>
            Http Client with predefined base route to the API
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Fixtures.Host.Repository">
            <summary>
            Repository Container that contains database implementation
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Health.HealthCheckTests">
            <summary>
            Health check 
            </summary>
            
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Health.HealthCheckTests.#ctor(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            Health check 
            </summary>
            
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Health.HealthCheckTests.VerifyHealthCheck_OK">
            <summary>
            Verify that component responds on health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Health.HealthCheckTests.VerifyAliveCheck_OK">
            <summary>
            Verify that component responds on health check
            </summary>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Core.Helpers.DelegationHelper"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.SortRulesByDelegationPolicyPath_ThreeAppsSameOfferedByAndCoveredBy_Success">
            <summary>
            Scenario:
            Tests the SortRulesByDelegationPolicyPath function
            Input:
            List of un ordered rules for delegation of 3 different apps to/from the same set of OfferedBy/CoveredBy parties
            Expected Result:
            Dictionary with rules sorted by the path of the 3 delegation policy files
            Success Criteria:
            Dictionary with the expected keys (policy paths) and values (sorted rules for each file)
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.SortRulesByDelegationPolicyPath_OneAppSameOfferedBy_ThreeCoveredBy_Success">
            <summary>
            Scenario:
            Tests the SortRulesByDelegationPolicyPath function
            Input:
            List of un ordered rules for delegation of the same apps from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            Expected Result:
            Dictionary with rules sorted by the path of the 3 delegation policy files
            Success Criteria:
            Dictionary with the expected keys (policy paths) and values (sorted rules for each file)
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.SortRulesByDelegationPolicyPath_Unsortables_Success">
            <summary>
            Scenario:
            Tests the SortRulesByDelegationPolicyPath function
            Input:
            List of un ordered rules for delegation of the same apps from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            Expected Result:
            Dictionary with rules sorted by the path of the 3 delegation policy files
            Success Criteria:
            Dictionary with the expected keys (policy paths) and values (sorted rules for each file)
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_True">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns true when it finds a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing read and write rules for org1/app1, and a API Rule model for write
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_PolicyResourcesOutOfOrder_True">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns true when it finds a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing read and write rules for org1/app1, and a API Rule model for read
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_SingleComplexRulePolicy_True">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns true when it finds a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing a single rule for spanning multiple different resources and actions
            A rule for one of the last combinations for action and resource (eat, banana) 
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_SignForTask_True">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns true when it finds a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing XacmlRule for sign on task1 for org1/app1, and a API Rule model representation for the same rule
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_InvalidAction_False">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns false when it does not find a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing read and write rules for org1/app1, and a API Rule model for sign
            Expected Result:
            False
            Success Criteria:
            Rule is not found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_InvalidOrg_False">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns false when it does not find a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing read and write rules for org1/app1, and a API Rule model for read but for org2/app1
            Expected Result:
            False
            Success Criteria:
            Rule is not found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_InvalidApp_False">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns false when it does not find a given API rule model as a XacmlRule in a XacmlPolicy
            Input:
            A XacmlPolicy containing read and write rules for org1/app1, and a API Rule model for read but for org1/app2
            Expected Result:
            False
            Success Criteria:
            Rule is not found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.DelegationHelperTest.PolicyContainsMatchingRule_PolicyContainsRule_PolicyWithoutAppLevelResource_False">
            <summary>
            Scenario:
            Tests that the PolicyContainsMatchingRule function returns false when the App policy does not contain org/app level resource specification.
            Input:
            A XacmlPolicy containing no rules with resource specification on org/app level (all resources are more specific e.g incl task/appresource)
            A rule which match action but not a complete resource match
            Expected Result:
            False
            Success Criteria:
            Rule is not found and expected result is returned
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Core.Helpers.PolicyHelper"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.#ctor">
            <summary>
            Constructor setting up dependencies
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.GetAltinnAppsPolicyPath">
            <summary>
            Scenario:
            Tests that the GetAltinnAppsPolicyPath method returns a correct path based on the input parameters.
            Input:
            Org and app from the AltinnAppId.
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.GetRolesWithAccess">
            <summary>
            Scenario:
            Tests that the GetAltinnAppsPolicyPath method returns a correct path based on the input parameters.
            Input:
            Org and app from the AltinnAppId.
            Expected Result:
            True
            Success Criteria:
            Rule is found and expected result is returned
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.GetDelegationPolicyPath_OrgEmpty">
            <summary>
            Scenario:
            Tests that the GetDelegationPolicyPath method throws the expected argument exception when org does not have a value
            Input:
            ResourceId is null because this is a org/app scenario but only app has been provided as part of the resource
            Expected Result:
            Argument exception thrown
            Success Criteria:
            Argument exception has the expected error message
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.GetDelegationPolicyPath_AppEmpty">
            <summary>
            Scenario:
            Tests that the GetDelegationPolicyPath method throws the expected argument exception when app does not have a value
            Input:
            ResourceId is null because this is a org/app scenario but only org has been provided as part of the resource
            Expected Result:
            Argument exception thrown
            Success Criteria:
            Argument exception has the expected error message
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Helpers.PolicyHelperTest.GetDelegationPolicyPath_ResourceIdEmpty">
            <summary>
            Scenario:
            Tests that the GetDelegationPolicyPath method throws the expected argument exception when resourceId does not have a value
            Input:
            Org and App is null because this is a resourceId scenario but resourceId has been provided as an empty string in the delegation
            Expected Result:
            Argument exception thrown
            Success Criteria:
            Argument exception has the expected error message
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock"/> class
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock.PostDelegationCheck(System.Int32,System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock.PostDelegation(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.SblRightDelegationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.Altinn2RightsClientMock.ClearReporteeRights(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock"/> class
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock.GetDecisionPointRolesForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock.GetRolesForDelegation(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AltinnRolesClientMock.GetAuthorizedPartiesWithRoles(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.AuthenticationMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationMock.RefreshToken(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationMock.GetSystemUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationMock.GetDefaultRightsForRegisteredSystem(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.AuthenticationNullRefreshMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationNullRefreshMock.RefreshToken(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationNullRefreshMock.GetSystemUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.AuthenticationNullRefreshMock.GetDefaultRightsForRegisteredSystem(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.ConfigurationManagerStub">
            <summary>
            Represents a stub of <see cref="T:Microsoft.IdentityModel.Protocols.ConfigurationManager`1"/> to be used in integration tests.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ConfigurationManagerStub.GetConfigurationAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ConfigurationManagerStub.RequestRefresh">
            <inheritdoc />
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.DelegationChangeEventQueueMock">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationChangeEventQueueMock.Push(Altinn.AccessManagement.Core.Models.DelegationChange)">
            <summary>
            Mocks pushing delegation changes to the event queue
            </summary>
            <param name="delegationChange">The delegation change stored in postgresql</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository"></see> interface
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.MetadataChanges">
            <summary>
            Property for storing delegation changes locally for verification later from the integration tests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.#ctor">
            <summary>
            Constructor setting up dependencies
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.InsertDelegation(Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType,Altinn.AccessManagement.Core.Models.DelegationChange,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetCurrentDelegationChange(Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},Altinn.AccessManagement.Enums.UuidType,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllAppDelegationChanges(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllCurrentAppDelegationChanges(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllCurrentAppDelegationChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},Altinn.AccessManagement.Enums.UuidType,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllCurrentResourceRegistryDelegationChanges(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllCurrentResourceRegistryDelegationChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},Altinn.AccessManagement.Enums.UuidType,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetOfferedResourceRegistryDelegations(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetReceivedResourceRegistryDelegationsForCoveredByPartys(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetResourceRegistryDelegationChanges(System.Collections.Generic.List{System.String},System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetReceivedResourceRegistryDelegationsForCoveredByUser(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetAllDelegationChangesForAuthorizedParties(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationMetadataRepositoryMock.GetOfferedDelegations(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.DelegationRequestMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequestsWrapper"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.DelegationRequestMock.GetDelegationRequestsAsync(System.String,System.String,System.Nullable{System.Int32},Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.JwtCookiePostConfigureOptionsStub">
            <summary>
            Represents a stub for the <see cref="T:AltinnCore.Authentication.JwtCookie.JwtCookiePostConfigureOptions"/> class to be used in integration tests.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.JwtCookiePostConfigureOptionsStub.PostConfigure(System.String,AltinnCore.Authentication.JwtCookie.JwtCookieOptions)">
            <inheritdoc />
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.MessageHandlerMock">
            <summary>
            Class for mocking http responses when testing
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.MessageHandlerMock.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Tests.Mocks.MessageHandlerMock"/> class.
            </summary>
            <param name="expectedResponseStatus">Expected HttpStatusCode</param>
            <param name="httpContent">Expected response content</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.MessageHandlerMock.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetPartiesAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetPartiesAsync(System.Collections.Generic.List{System.Guid},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetPartyAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.LookupPartyBySSNOrOrgNo(Altinn.Platform.Register.Models.PartyLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetKeyRoleParties(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetMainUnits(Altinn.AccessManagement.Core.Models.SblBridge.MainUnitQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PartiesClientMock.GetPartiesForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PdpPermitMock">
            <summary>
            tmp
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PdpPermitMock.GetDecisionForRequest(Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonRequestRoot)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PdpPermitMock.GetDecisionForUnvalidateRequest(Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonRequestRoot,System.Security.Claims.ClaimsPrincipal)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PepWithPDPAuthorizationMock">
            <summary>
            Mock for IPDP
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PepWithPDPAuthorizationMock.GetDecisionForRequest(Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonRequestRoot)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PepWithPDPAuthorizationMock.GetDecisionForUnvalidateRequest(Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonRequestRoot,System.Security.Claims.ClaimsPrincipal)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PolicyFactoryMock">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyFactoryMock.#ctor(Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock})">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyFactoryMock.Create(Altinn.AccessManagement.Core.Enums.PolicyAccountType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyFactoryMock.Create(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock})">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.GetPolicyAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.GetPolicyVersionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.WritePolicyAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.DeletePolicyVersionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.WritePolicyConditionallyAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.TryAcquireBlobLease(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.ReleaseBlobLease(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRepositoryMock.PolicyExistsAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock})">
            <summary>
            Constructor setting up dependencies
            </summary>
            <param name="httpContextAccessor">httpContextAccessor</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.GetPolicyAsync(Altinn.Authorization.ABAC.Xacml.XacmlContextRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.GetPolicyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.GetPolicyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.PolicyRetrievalPointMock.GetPolicyVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.ProfileClientMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ProfileClientMock.GetUser(Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.ResourceMetadataRepositoryMock">
            <summary>
            Mock for ResourceMetadataRepository
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceMetadataRepositoryMock.InsertAccessManagementResource(Altinn.AccessManagement.Core.Models.AccessManagementResource,System.Threading.CancellationToken)">
            <summary>
            Mock
            </summary>
            <param name="resource">the resource to store in AccessManagment</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>the inserted/updated resource</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock">
            <summary>
            Mock class for <see cref="T:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient"></see> interface
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Integration.Clients.ResourceRegistryClient"/> class
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock.GetResource(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock.GetResources(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock.GetResourceList(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.ResourceRegistryClientMock.GetSubjectResources(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Mocks.SigningKeyResolverMock">
            <summary>
            Mock for finding signing key on disck
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.SigningKeyResolverMock.GetSigningCredentials">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Mocks.SigningKeyResolverMock.GetSigningKeys(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Models.Role">
            <summary>
            Entity representing a Role
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.Role.Type">
            <summary>
            Gets or sets the role type
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.Role.Value">
            <summary>
            Gets or sets the role
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes">
            <summary>
            TT
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.OrgValue">
            <summary>
            Gets or sets the value for org attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.AppValue">
            <summary>
            Gets or sets the value for app attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.InstanceValue">
            <summary>
            Gets or sets the value for instance attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.ResourcePartyValue">
            <summary>
            Gets or sets the value for resourceparty attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.TaskValue">
            <summary>
            Gets or sets the value for task attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.AppResourceValue">
            <summary>
            Gets or sets the value for app resource. 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.ResourceRegistryId">
            <summary>
            Gets or sets the resource registry Id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Models.XacmlResourceAttributes.OrganizationNumber">
            <summary>
            Gets or sets the OrganizationNumber for the org owning the resource
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.#ctor">
            <summary>
            Constructor setting up dependencies
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.WritePolicy_TC01">
            <summary>
            Test case: Write to storage a file.
            Expected: WritePolicyAsync returns true.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.WritePolicy_TC02">
            <summary>
            Test case: Write a file to storage where the org parameter arguments is empty.
            Expected: WritePolicyAsync throws ArgumentException.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.WritePolicy_TC03">
            <summary>
            Test case: Write a file to storage where the app parameter arguments is empty.
            Expected: WritePolicyAsync throws ArgumentException.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.WritePolicy_TC04">
            <summary>
            Test case: Write to storage a file that is null.
            Expected: WritePolicyAsync throws ArgumentException.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.WritePolicy_TC05">
            <summary>
            Test case: Write to storage a file that is null.
            Expected: WritePolicyAsync throws ArgumentException.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_Valid">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, where all rules are deleted the db is updated with RevokeLast status
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_Valid_DelegationEventQueue_Push_Exception">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, where all rules are deleted the db is updated with RevokeLast status,
            but pushing RevokeLast event to DelegationChangeEventQueue fails which should trigger crittical error logging
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules are deleted from policy and delegationchange stored in postgresql, critical error is logged
            Success Criteria:
            All returned rules match expected, and critical error has been logged
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_PolicyAlredyDeleted">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one policy is returned as already deleted the rules ok to delete is deleted the one already deleted ignored
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of deleted policy is ignored rest is deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_ForOrganizationValid">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether all rules are returned as successfully deleated whera all rules are deleted the db is also updated with isDeleted status
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_DBFetchFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one rules are returned as not successfully deleated due to error retriving data from db whera all rules are deleted the db is also updated with isDeleted status
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_DataStorageLeaseFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one rules are returned as not successfully deleted due to error locking data for update in blob storage where all rules are deleted the db is also updated with isDeleted status
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_DataWriteFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one rules are returned as not successfully deleted due to error writing data for update in blob storage.
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_PolicyPathInvalid">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one rules are returned as not successfully deleted due to undefined resource
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_PostgreeUpdateFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one policy are returned as not successfully deleted due to error update changelog.
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicyRules_PolicyPathDoesNotExist">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, whether one rules are returned as not successfully deleated due to error finding the file on blob storage where all rules are deleted the db is also updated with isDeleted status
            Input:
            List of unordered rules for deletion multiple apps same OfferedBy to one CoveredBy user, and one coveredBy organization/partyid
            Expected Result:
            List of all rules actualy deleted.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_Valid">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, all rules are returned as successfully created
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_Valid_DelegationEventQueue_Push_Exception">
            <summary>
            Scenario:
            Tests the TryDeleteDelegationPolicies operation, where all rules in a given delegation policy are deleted and stored in delegationchange database with RevokeLast status,
            but pushing RevokeLast event to DelegationChangeEventQueue fails which should trigger crittical error logging
            Input:
            List of RequestToDelete models identifying the delegation policies to be deleted
            Expected Result:
            List of all rules are deleted from policy and delegationchange stored in postgresql, critical error is logged
            Success Criteria:
            All returned rules match expected, and critical error has been logged
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_StorageLeaseFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to error locking the data for update
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_DBFetchFail">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to error fetching data from DB
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_PolicyPathDoesNotExist">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to error finding data on blob storage
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_DBUpdateFails">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to error updating data in DB
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_UndefinedResource">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to error in resource to delete
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryDeleteDelegationPolicies_PolicyAlreadyDeleted">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicies function, one rule are returned as failed due to policy already deleted
            Input:
            List of unordered rules for deletion of the same apps from the same OfferedBy to one CoveredBy user
            Expected Result:
            List of all rules deleted returned.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_Valid">
            <summary>
            Tests the TryWriteDelegationPolicyRules function, whether all rules are returned as successfully created
            Input:
            List of unordered rules for delegation of the same apps from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            Expected Result:
            List of all rules (now in sorted order of the resulting 3 delegation policy files) with success flag and rule id set.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_UnknownApp_PartialSuccess">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when only partial set of the rules are returned as successfully created.
            Input:
            List of unordered rules for delegation from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            One of the rules are for an app where no app policy exists and should fail.
            Expected Result:
            List of all rules (now in sorted order of the resulting 3 delegation policy files).
            Only stored rules should have success flag and rule id set.
            Success Criteria:
            All returned rules match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_UnknownResource_PartialSuccess">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when only partial set of the rules are returned as successfully created.
            Input:
            List of unordered rules for delegation from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            One of the rules for org1, app1 contains a non-existing resource and should fail all rules for that app.
            Expected Result:
            List of all rules (now in sorted order of the resulting 3 delegation policy files).
            Only stored rules should have success flag and rule id set.
            Success Criteria:
            All returned rules match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_UnknownActionForResource_PartialSuccess">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when only partial set of the rules are returned as successfully created.
            Input:
            List of unordered rules for delegation from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            One of the rules for org1, app1 is for an action which does not exist for that resource in the app policy and should fail all rules for that app.
            Expected Result:
            List of all rules (now in sorted order of the resulting 3 delegation policy files).
            Only stored rules should have success flag and rule id set.
            Success Criteria:
            All returned rules match expected
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_PartialSuccess_UnsortableRule">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when only partial set of the rules are returned as successfully created, caused by one of the rules not having a complete model for sorting to a delegation policy filepath
            Input:
            List of unordered rules for delegation of the same apps from the same OfferedBy to two CoveredBy users, and one coveredBy organization/partyid
            Expected Result:
            List of all rules (now in sorted order of the resulting 3 delegation policy files) with success flag and rule id set.
            Success Criteria:
            All returned rules match expected and have success flag and rule id set
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_Error_BlobStorageAqcuireLeaseLockException">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when blobLeaseClient.AcquireAsync throws exception when trying to get lease lock on delegation policy blob
            Input:
            Single rule
            Expected Result:
            The blob storage throws exception when aqcuiring lease lock
            Success Criteria:
            The blob storage exception is handled and logged. The rule is returned as not created.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_Error_BlobStorageLeaseLockWriteException">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when blob storage write throws exception caused by lease locking
            Input:
            Single rule
            Expected Result:
            The blob storage write throws exception
            Success Criteria:
            The blob storage exception is handled and logged. The rule is returned as not created.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_Error_PostgreGetCurrentException">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when getting current delegation change from postgre fails
            Input:
            Single rule
            Expected Result:
            The postgre integration throws exception when getting the current change from the database
            Success Criteria:
            The postgre exception is handled and logged. The rule is returned as not created.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_Error_PostgreWriteDelegationChangeException">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, when writing the new current delegation change to postgre fails
            Input:
            Single rule
            Expected Result:
            The postgre integration throws exception when writing the new delegation change to the database
            Success Criteria:
            The postgre exception is handled and logged. The rule is returned as not created.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.PolicyAdministrationPointTest.TryWriteDelegationPolicyRules_DelegationEventQueue_Push_Exception">
            <summary>
            Scenario:
            Tests the TryWriteDelegationPolicyRules function, but pushing the delegation event to the queue fails.
            Input:
            List with a rule for delegation of the app error/delegationeventfail between for a single offeredby/coveredby combination resulting in a single delegation policy.
            Expected Result:
            Internal exception cause pushing delegation event to fail, after delegation has been stored.
            Success Criteria:
            TryWriteDelegationPolicyRules returns rules as created, but a Critical Error has been logged
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnOrganizationResolverTests">
            <summary>
            Resolver tests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnOrganizationResolverTests.TestResolveOrganzation(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IEnumerable{System.String},System.Action{System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch}})">
            <summary>
            Organization resolver tests
            </summary>
            <param name="attributes">attributes that are given by callee</param>
            <param name="wants">attributes that are wanted by callee</param>
            <param name="assert">assert method that verifies the result</param>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnOrganizationResolverTests.ResolveIdentifierNoToPartyId">
            <summary>
            should resolve <see cref="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.ResolveOrganizationNumber"/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnOrganizationResolverTests.ResolvePartyIdToIdentifierNo">
            <summary>
            should resolve <see cref="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.ResolvePartyId"/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnOrganizationResolverTests.ResolveUnkownPartyIdToEmptyResult">
            <summary>
            should trigger <see cref="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.ResolvePartyId"/>, but return the same result as input as given
            party ID don't exist.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests">
            <summary>
            Resolver tests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.TestResolvePerson(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IEnumerable{System.String},System.Action{System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch}})">
            <summary>
            Person resolver tests
            </summary>
            <param name="attributes">attributes that are given by callee</param>
            <param name="wants">attributes that are wanted by callee</param>
            <param name="assert">assert method that verifies the result</param>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.ResolveProfileUsingIdentifierNo">
            <summary>
            should resolve <see cref="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingIdentifierNo"/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.ResolveProfileUsingUserId">
            <summary>
            should resolve <see cref="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingUserId" />
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.ResolvePartyUsingPartyId">
            <summary>
            should resolve <see cref="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolvePartyUsingPartyId" />
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.ResolveProfileUsingPartyId">
            <summary>
            should trigger <see cref="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingPartyId"/>/>
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Resolvers.Altinn.AltinnPersonResolverTests.ResolveUnkownPartyIdToEmptyResult">
            <summary>
            should trigger <see cref="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolvePartyUsingPartyId"/>, but return the same result as input as given
            party ID don't exist.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Resolvers.ResolverServiceCollection">
            <summary>
            ResolverServiceCollection
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Resolvers.ResolverServiceCollection.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}[])">
            <summary>
            ConfigureServices
            </summary>
            <param name="actions">actions</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Resolvers.ResolverServiceCollection.DefaultServiceCollection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            DefaultServiceCollection
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios">
            <summary>
            Different scenarios that populates mock context and postgres db with data.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.Defaults(Altinn.AccessManagement.Tests.Contexts.MockContext)">
            <summary>
            Defaults setup
            1. Add resources to dn
            2. Add random delegation to delegationchange table.
                - Uses random ID in range [9000, 99999]
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.WherePersonHasKeyRole(Altinn.AccessManagement.Tests.Seeds.IUserProfile,Altinn.AccessManagement.Tests.Seeds.IParty[])">
            <summary>
            Ensures that given profile has a key role for given org i mock context
            </summary>
            <param name="profile">profile</param>
            <param name="organizations">organization</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.WhereUnitHasMainUnit(Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IParty)">
            <summary>
            Add subunit as a mainunit in mock context 
            </summary>
            <param name="subunit">subunit</param>
            <param name="mainunit">mainunit</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.WithoutResource(Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource)">
            <summary>
            Removes a resource from mock context
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.WithRevokedDelegationToUser(Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IUserProfile,Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource)">
            <summary>
            Add revoke delegation to db from given party to user
            </summary>
            <param name="organization">organization that revoking delegation</param>
            <param name="person">person that lose the delegation to the organization</param>
            <param name="resource">resource</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.FromOrganizationToPerson(Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IUserProfile,Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource)">
            <summary>
            Adds mock context and db seeds. for given organization, person and resource
            </summary>
            <param name="from">from organization</param>
            <param name="to">to person</param>
            <param name="resource">resource</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.DelegationScenarios.FromOrganizationToOrganization(Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IParty,Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource)">
            <summary>
            Adds mock context and db seeds. for given organization, person and resource
            </summary>
            <param name="from">from organization</param>
            <param name="to">to person</param>
            <param name="resource">resource</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Scenarios.Scenario">
            <summary>
            Scenario function signature
            </summary>
            <param name="mock">mock context object</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Scenarios.TokenScenario">
            <summary>
            Creates a bearer token that's used when calling the test server. The token will be attached to the HTTP client right after creating
            the client. <see cref="M:Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture.ConfigureHostBuilderWithScenarios(Altinn.AccessManagement.Tests.Scenarios.Scenario[])"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.TokenScenario.PersonToken(Altinn.AccessManagement.Tests.Seeds.PersonSeeds.PersonBase,System.Int32)">
            <summary>
            creates a JWT user token for given person and sets the field <see cref="P:Altinn.AccessManagement.Tests.Contexts.MockContext.HttpHeaders" />
            </summary>
            <param name="person">The person which a token should be generated</param>
            <param name="authenticationLevel">level of authentication [1, 2, 3] </param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Scenarios.TokenScenario.PlatformToken(System.String,System.String)">
            <summary>
            Sets headers PlatformAccessToken with an access token containing given claims issuer and app
            </summary>
            <param name="issuer">issuer of the token</param>
            <param name="app">name of the app</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Seeds.IParty">
            <summary>
            For seeds
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Seeds.IParty.Party">
            <summary>
            Get Party profile from seed
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Seeds.IUserProfile">
            <summary>
            For seeds
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Seeds.IUserProfile.UserProfile">
            <summary>
            Get User profile from seed
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource">
            <summary>
            For seeds
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource.DbResource">
            <summary>
            Db resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Tests.Seeds.IAccessManagementResource.Resource">
            <summary>
            Get resource from seed
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Services.DelegationRequestTests">
            <summary>
            Test class for <see cref="T:Altinn.AccessManagement.Controllers.DelegationRequestsController"></see>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Services.DelegationRequestTests.#ctor(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.DelegationRequestsController})">
            <summary>
            Constructor setting up factory, test client and dependencies
            </summary>
            <param name="factory">CustomWebApplicationFactory</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Services.DelegationRequestTests.Test1">
            <summary>
            Test1
            </summary>
            <returns>Result</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Services.DelegationRequestTests.Test2">
            <summary>
            Test2
            </summary>
            <returns>Result</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.ControllerTestTemplate">
            <summary>
            Controller Name, use XML tag see
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.ControllerTestTemplate.#ctor(Altinn.AccessManagement.Tests.Fixtures.WebApplicationFixture)">
            <summary>
            Controller Name, use XML tag see
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint">
            <summary>
            Seeds for <see cref="T:Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">parameter to api route</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint.#ctor(System.String,System.Int32,System.Action{Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer}[])">
            <summary>
            Seeds for <see cref="T:Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint"/>
            </summary>
            <param name="acceptanceCriteria">Acceptance Criteria</param>
            <param name="partyId">parameter to api route</param>
            <param name="actions">modifiers for <see cref="T:Altinn.AccessManagement.Tests.AcceptanceCriteriaComposer"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint.Seeds">
            <summary>
            List of test scenarios
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.ControllerTestTemplate.POST_SeedNameOfEndpoint(Altinn.AccessManagement.Tests.ControllerTestTemplate.SeedNameOfEndpoint)">
            <summary>
            Controller Action Name and prefix method, use XML tag see
            </summary>
            <param name="acceptanceCriteria">acceptance criteria</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Templates.DatabaseTestTemplate">
            <summary>
            Template
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Templates.DatabaseTestTemplate.#ctor(Altinn.AccessManagement.Tests.Fixtures.PostgresFixture)">
            <summary>
            Template
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Templates.DatabaseTestTemplate.Test_DatabaseTestTemplate">
            <summary>
            Template
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Utils.AssertionUtil">
            <summary>
            Class with methods that can help with assertions of larger objects.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertCollections``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Action{``0,``0})">
            <summary>
            Asserts that two collections of objects have the same property values in the same positions.
            </summary>
            <typeparam name="T">The Type</typeparam>
            <param name="expected">A collection of expected instances</param>
            <param name="actual">The collection of actual instances</param>
            <param name="assertMethod">The assertion method to be used</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.Authorization.ABAC.Xacml.XacmlContextResponse,Altinn.Authorization.ABAC.Xacml.XacmlContextResponse)">
            <summary>
            Assert that two <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlContextResponse"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonResponse,Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonResponse)">
            <summary>
            Assert that two <see cref="T:Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonResponse"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationChange}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationChange}})">
            <summary>
            Assert that two dictionaries of <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChange"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationChange},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationChange})">
            <summary>
            Assert that two lists of <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChange"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(System.Collections.Generic.List{Altinn.AccessManagement.Models.DelegationChangeExternal},System.Collections.Generic.List{Altinn.AccessManagement.Models.DelegationChangeExternal})">
            <summary>
            Assert that two lists of <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChange"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.AccessManagement.Core.Models.DelegationChangeEventList,Altinn.AccessManagement.Core.Models.DelegationChangeEventList)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChangeEventList"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.AccessManagement.Core.Models.DelegationChangeEvent,Altinn.AccessManagement.Core.Models.DelegationChangeEvent)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChangeEvent"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.AccessManagement.Core.Models.SimpleDelegationChange,Altinn.AccessManagement.Core.Models.SimpleDelegationChange)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.SimpleDelegationChange"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.Authorization.ABAC.Xacml.XacmlContextRequest,Altinn.Authorization.ABAC.Xacml.XacmlContextRequest)">
            <summary>
            Assert that two <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlContextRequest"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Boolean)">
            <summary>
            Assert that two Lists of <see cref="T:Altinn.AccessManagement.Core.Models.Rule"/> have the same number of rules and each rule have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
            <param name="assertOutputValues">Whether output only values should also be asserted</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertEqual(Altinn.AccessManagement.Core.Models.Rule,Altinn.AccessManagement.Core.Models.Rule,System.Boolean)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.Rule"/> have the same property values.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
            <param name="assertOutputValues">Whether output only values should also be asserted</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertMaskinportenSchemaDelegationExternalEqual(Altinn.AccessManagement.Models.MaskinportenSchemaDelegationExternal,Altinn.AccessManagement.Models.MaskinportenSchemaDelegationExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.MaskinportenSchemaDelegationExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertCompetentAuthorityEqual(Altinn.AccessManagement.Models.CompetentAuthorityExternal,Altinn.AccessManagement.Models.CompetentAuthorityExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.CompetentAuthorityExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertDelegationEqual(Altinn.AccessManagement.Models.MPDelegationExternal,Altinn.AccessManagement.Models.MPDelegationExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.MPDelegationExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertPartyEqual(Altinn.AccessManagement.Models.PartyExternal,Altinn.AccessManagement.Models.PartyExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.PartyExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRuleEqual(Altinn.AccessManagement.Core.Models.Rule,Altinn.AccessManagement.Core.Models.Rule)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.Rule"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRightExternalEqual(Altinn.AccessManagement.Models.RightExternal,Altinn.AccessManagement.Models.RightExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.RightExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRightSourceExternalEqual(Altinn.AccessManagement.Models.RightSourceExternal,Altinn.AccessManagement.Models.RightSourceExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.RightSourceExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertBaseRightExternalEqual(Altinn.AccessManagement.Models.BaseRightExternal,Altinn.AccessManagement.Models.BaseRightExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.BaseRightExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRightsDelegationResponseExternalEqual(Altinn.AccessManagement.Models.RightsDelegationResponseExternal,Altinn.AccessManagement.Models.RightsDelegationResponseExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.RightsDelegationResponseExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRightDelegationResultExternalEqual(Altinn.AccessManagement.Models.RightDelegationResultExternal,Altinn.AccessManagement.Models.RightDelegationResultExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.RightDelegationResultExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertValidationProblemDetailsEqual(Microsoft.AspNetCore.Mvc.ValidationProblemDetails,Microsoft.AspNetCore.Mvc.ValidationProblemDetails)">
            <summary>
            Assert that two <see cref="T:Microsoft.AspNetCore.Mvc.ValidationProblemDetails"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertRightDelegationCheckExternalEqual(Altinn.AccessManagement.Models.RightDelegationCheckResultExternal,Altinn.AccessManagement.Models.RightDelegationCheckResultExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.RightDelegationCheckResultExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertDetailExternalEqual(Altinn.AccessManagement.Models.DetailExternal,Altinn.AccessManagement.Models.DetailExternal)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Models.DetailExternal"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertDetailParametersExternalEqual(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Altinn.AccessManagement.Models.AttributeMatchExternal}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Altinn.AccessManagement.Models.AttributeMatchExternal}})">
            <summary>
            Assert that two detail parameter dictionaries have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.AssertAuthorizedPartyEqual(Altinn.AccessManagement.Core.Models.AuthorizedParty,Altinn.AccessManagement.Core.Models.AuthorizedParty)">
            <summary>
            Assert that two <see cref="T:Altinn.AccessManagement.Core.Models.AuthorizedParty"/> have the same property in the same positions.
            </summary>
            <param name="expected">An instance with the expected values.</param>
            <param name="actual">The instance to verify.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.AssertionUtil.ListAccessManagementResourceAreEqual(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AccessManagementResource},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AccessManagementResource})">
            <summary>
            Compares two list contains the same data 
            </summary>
            <param name="expected">the expected list</param>
            <param name="actual">the actual list</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Utils.JwtTokenMock">
            <summary>
            Represents a mechanism for creating JSON Web tokens for use in integration tests.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.JwtTokenMock.GenerateToken(System.Security.Claims.ClaimsPrincipal,System.TimeSpan,System.String)">
            <summary>
            Generates a token with a self signed certificate included in the integration test project.
            </summary>
            <param name="principal">The claims principal to include in the token.</param>
            <param name="tokenExpiry">How long the token should be valid for.</param>
            <param name="issuer">The URL of the token issuer</param>
            <returns>A new token.</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Utils.SetupUtils">
            <summary>
            Utility class for usefull common operations for setup for unittests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.SetupUtils.GetTestClient(Altinn.AccessManagement.Tests.CustomWebApplicationFactory{Altinn.AccessManagement.Controllers.DelegationRequestsController})">
            <summary>
            Gets a HttpClient for unittests testing
            </summary>
            <param name="customFactory">Web app factory to configure test services for</param>
            <returns>HttpClient</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.SetupUtils.DeleteAppBlobData(System.String,System.String)">
            <summary>
            Deletes a app blob stored locally
            </summary>
            <param name="org">Org</param>
            <param name="app">App</param>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.SetupUtils.AddAuthCookie(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String)">
            <summary>
            Adds an auth cookie to the request message
            </summary>
            <param name="requestMessage">the request message</param>
            <param name="token">the tijen to be added in the cookie</param>
            <param name="cookieName">the name of the cookie</param>
            <param name="xsrfToken">the xsrf token</param>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Utils.TestDataUtil">
            <summary>
            Mock class for helping setup test data
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetRuleModel(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,Altinn.AccessManagement.Core.Models.RuleType,System.String,System.Boolean)">
            <summary>
            Creates a rule model from the input
            </summary>
            <param name="delegatedBy">delegatedBy</param>
            <param name="offeredByPartyId">offeredByPartyId</param>
            <param name="coveredBy">coveredBy</param>
            <param name="coveredByAttributeType">coveredByAttributeType</param>
            <param name="action">action</param>
            <param name="org">org</param>
            <param name="app">app</param>
            <param name="task">task</param>
            <param name="appresource">appresource</param>
            <param name="createdSuccessfully">createdSuccessfully</param>
            <param name="ruleType">ruleType</param>
            <param name="resourceRegistryId">resourceregistry id.</param>
            <param name="delegatedByParty">Value indicating delegatedBy is party</param>
            <returns>Rule model</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetRequestToDeleteModel(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a RequestToDelete model from the input
            </summary>
            <param name="lastChangedByUserId">lastChangedByUserId</param>
            <param name="offeredByPartyId">offeredByPartyId</param>
            <param name="org">org</param>
            <param name="app">app</param>
            <param name="ruleIds">ruleIds</param>
            <param name="coveredByPartyId">coveredByPartyId</param>
            <param name="coveredByUserId">coveredByUserId</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetAltinnAppDelegationChange(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,Altinn.AccessManagement.Core.Models.DelegationChangeType,System.Int32)">
            <summary>
            Creates a DelegationChange model from the input
            </summary>
            <param name="altinnAppId">altinnAppId</param>
            <param name="offeredByPartyId">offeredByPartyId</param>
            <param name="coveredByUserId">coveredByUserId</param>
            <param name="coveredByPartyId">coveredByPartyId</param>
            <param name="performedByUserId">performedByUserId</param>
            <param name="changeType">changeType</param>
            <param name="changeId">changeId</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetDelegations(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Sets up mock data for delegation list 
            </summary>
            <param name="offeredByPartyId">partyid of the reportee that delegated the resource</param>
            <param name="resourceId">resource identifier</param>
            <param name="resourceName">Resource name</param>
            <param name="performedByUserId">who performed the delegation</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetResource(System.String,System.String,Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Creates a ServiceResource model.
            </summary>
            <param name="resourceId">ResourceId.</param>
            <param name="resourceTitle">title of the resource</param>
            <param name="resourceType">Type of the resource</param>
            <param name="description">Description of the resource</param>
            <param name="validFrom">The valid from date</param>
            <param name="validTo">The valid to date</param>
            <param name="status">The status of resource</param>
            <returns>Returns the newly created ServiceResource.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetResourceRegistryDelegationChange(System.String,Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,Altinn.AccessManagement.Core.Models.DelegationChangeType,System.Int32)">
            <summary>
            Creates a DelegationChange model from the input.
            </summary>
            <returns>DelegationChange.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetRolesWithAccess">
            <summary>
            Creates a list of roles.
            </summary>
            <returns>The newly created list of roles.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetOfferedMaskinportenSchemaDelegations(System.Int32)">
            <summary>
            Sets up mock data for offered maskinporten schema delegations
            </summary>
            <param name="offeredByPartyId">The party id of the reportee to retrieve offered delegations for</param>
            <returns>Offered maskinporten schema delegations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetReceivedMaskinportenSchemaDelegations(System.Int32)">
            <summary>
            Sets up mock data for received maskinporten schema delegations
            </summary>
            <param name="coveredByPartyId">The party id of the reportee to retrieve received delegations for</param>
            <returns>Received maskinporten schema delegations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetAdminDelegations(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Sets up mock data for admin delegation list 
            </summary>
            <param name="supplierOrg">partyid of the reportee that delegated the resource</param>
            <param name="consumerOrg">partyid of the reportee that received the delegation</param>
            <param name="resourceIds">resource id</param>
            <returns>Received delegations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetOrganisation(System.String)">
            <summary>
            Gets the organisation information
            </summary>
            <param name="orgNummer">the organisation number</param>
            <returns>organisation information</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetTestParty(System.Int32)">
            <summary>
            Gets the party information
            </summary>
            <param name="partyId">The party id</param>
            <returns>Party information</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Utils.TestDataUtil.GetTestPartyWithSubUnit(System.Int32)">
            <summary>
            Gets the party information for a party with subunit
            </summary>
            <param name="partyId">The party id</param>
            <returns>Party information</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Tests.Util.PrincipalUtil">
            <summary>
            Utility class for usefull common operations for setup of authentication tokens for integration tests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Util.PrincipalUtil.GetToken(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a user token
            </summary>
            <param name="userId">The user id</param>
            <param name="partyId">The users party id</param>
            <param name="authenticationLevel">The users authentication level</param>
            <returns>jwt token string</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Util.PrincipalUtil.GetAccessToken(System.String,System.String)">
            <summary>
            Get access token for issuer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Util.PrincipalUtil.GetAccessToken(System.String)">
            <summary>
            Gets an access token for an app
            </summary>
            <param name="appId">The app to add as claim</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Util.PrincipalUtil.GetClaimsPrincipal(System.String,System.String,System.String,System.String[])">
            <summary>
            Builds a claims principal used to generate an Altinn-token for an organization with the provided scopes, essentially mocking a Maskinporten-token exchanged to an Altinn-token.
            </summary>
            <param name="org">Org code</param>
            <param name="orgNumber">Organization number</param>
            <param name="scope">Scopes to add to token</param>
            <param name="consumerPrefix">If maskinporten token sets the scope prefixes the organization owns or authorized for</param>
            <returns>Claims principal</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Tests.Util.PrincipalUtil.GetOrgToken(System.String,System.String,System.String,System.String[])">
            <summary>
            Generates an Altinn-token for an organization with the provided scopes, essentially mocking a Maskinporten-token exchanged to an Altinn-token.
            </summary>
            <param name="org">Org code</param>
            <param name="orgNumber">Organization number</param>
            <param name="scope">Scopes to add to token</param>
            <param name="consumerPrefix">If maskinporten token sets the scope prefixes the organization owns or authorized for</param>
            <returns>Altinn org-token</returns>
        </member>
        <member name="T:TestDataRevokeOfferedDelegationExternal">
            <summary>
            testdata
            </summary>
        </member>
        <member name="M:TestDataRevokeOfferedDelegationExternal.FromPersonToPerson">
            <summary>
            An input model that specifies revoking an existing delegation for resource app_org1_app1 with action read from Orjan to Paula.
            The delegation 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeOfferedDelegationExternal.FromPersonToOrganization">
            <summary>
            An input model that specifies revoking an existing delegation from Paula to Orstad Accounting. The delegation should 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeOfferedDelegationExternal.FromOrganizationToOrganization">
            <summary>
            a
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeOfferedDelegationExternal.FromOrganizationToPerson">
            <summary>
            summary
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeOfferedDelegationExternal.FromOrganizationToEnterpriseuser">
            <summary>
            summary
            </summary>
            <returns></returns>
        </member>
        <member name="T:TestDataRevokeReceivedDelegationExternal">
            <summary>
            testdata
            </summary>
        </member>
        <member name="M:TestDataRevokeReceivedDelegationExternal.FromPersonToPerson">
            <summary>
            An input model that specifies revoking an existing delegation from Orjan to Paula.
            The delegation 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeReceivedDelegationExternal.FromPersonToOrganization">
            <summary>
            An input model that specifies an delegation from Paula
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeReceivedDelegationExternal.FromOrganizationToOrganization">
            <summary>
            a
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestDataRevokeReceivedDelegationExternal.FromOrganizationToPerson">
            <summary>
            summary
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
