@page "/entities/"
@inject IEntityRepository entityData


<PageTitle>Entities</PageTitle>

<PageHeader>
    <LeftContent>
        <H1>Entities</H1>
    </LeftContent>
    <RightContent>
        <input @bind-value="SearchTerm" @oninput=HandleInputTextInput></input>
    </RightContent>
</PageHeader>




@if(Entities != null && Entities.Any())
{
    <H4>Result : @Entities.Count()</H4>
    <Accordion>
        @foreach(var entity in Entities.Take(20))
        {
            <ListItem Title="@entity.Name" Url=@($"/entity/{entity.Id}") Tags=@([entity.Variant.Name])></ListItem>
        }
    </Accordion>
}


@code {

    public string SearchTerm { get; set; } = "";
    public IEnumerable<ExtEntity> Entities { get; set; } = new List<ExtEntity>();

    private async Task HandleInputTextInput(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        await LoadData(1);
    }

    private async Task LoadData(int page)
    {
        if(SearchTerm.Length < 2)
        {
            return;
        }
        var opt = UserData.GetRequestOptions();

        opt.UsePaging = true;
        opt.PageNumber = page;
        opt.PageSize = 20;

        var filter = entityData.CreateFilterBuilder();
        filter.Add(t => t.Name, SearchTerm, Persistence.Core.Helpers.FilterComparer.StartsWith);
        Entities = await entityData.GetExtended(filter, opt);
    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadData(1);

    }

}
