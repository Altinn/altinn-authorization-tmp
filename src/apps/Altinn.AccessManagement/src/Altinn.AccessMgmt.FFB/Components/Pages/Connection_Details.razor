@page "/connection/{Id:guid}"
@inject IConnectionService connectionService
@inject IConnectionRepository connectionRepository
@inject IConnectionPackageRepository connectionPackageRepository
@inject IConnectionResourceRepository connectionResourceRepository
@inject IAssignmentRepository assignmentRepository
@inject IDelegationRepository delegationRepository
@inject IAssignmentPackageRepository assignmentPackageRepository

<PageTitle>Tildeling</PageTitle>

@if(Connection != null)
{
    <PageHeader>
        <LeftContent>
            <BreadcrumbContainer>
                <BreadcrumbItem Url=@($"/entity/{Connection.From.Id}")>@Connection.From.Name</BreadcrumbItem>
                <BreadcrumbItem Url=@($"/entity/{Connection.To.Id}")>@Connection.To.Name</BreadcrumbItem>
            </BreadcrumbContainer>
            @if (IsDelegation)
            {
                <H1>Delegering</H1>
                <p><Icon Name="circle-info"></Icon> <strong>@Connection.From.Name</strong> har satt opp <strong>@Connection.Facilitator.Name</strong> med rollen <strong>@Connection.Role.Name</strong>. <strong>@Connection.Facilitator.Name</strong> har delegert dette videre til <strong>@Connection.To.Name</strong> med rollen <strong>@Connection.FacilitatorRole.Name</strong></p>
            }
            else
            {
                <H1>Tildeling</H1>
                <p><Icon Name="circle-info"></Icon> <strong>@Connection.From.Name</strong> har satt opp <strong>@Connection.To.Name</strong> med rollen <strong>@Connection.Role.Name</strong>.</p>
            }
        </LeftContent>
        <RightContent>
            <ButtonGroup>
                @*   <Button OnClick=@(() => CreateDelegationIsOpen = !CreateDelegationIsOpen)>Ny delegering</Button>
                <Button OnClick=@(() => CreateAssignmentPackageModalIsOpen = !CreateAssignmentPackageModalIsOpen)>Gi pakke</Button>
                <Button OnClick=@(() => CreateAssignmentResourceModalIsOpen = !CreateAssignmentResourceModalIsOpen)>Gi ressurs</Button> *@
            </ButtonGroup>
        </RightContent>
    </PageHeader>


    @if (IsDelegation)
    {
        <div>
            <VerticalTable>
                <VerticalTableCell Title="From"><a href=@($"/entity/{Connection.From.Id}")>@Connection.From.Name</a></VerticalTableCell>
                <VerticalTableCell Title="Role"><a href=@($"/role/{Connection.Role.Id}")>@Connection.Role.Name</a></VerticalTableCell>
                <VerticalTableCell Title="Facilitator"><a href=@($"/entity/{Connection.Facilitator.Id}")>@Connection.Facilitator.Name</a></VerticalTableCell>
                <VerticalTableCell Title="Facilitator Role"><a href=@($"/role/{Connection.FacilitatorRole.Id}")>@Connection.FacilitatorRole.Name</a></VerticalTableCell>
                <VerticalTableCell Title="To"><a href=@($"/entity/{Connection.To.Id}")>@Connection.To.Name</a></VerticalTableCell>
            </VerticalTable>
        </div>
    }
    else
    {
        <div>
            <VerticalTable>
                <VerticalTableCell Title="From"><a href=@($"/entity/{Connection.From.Id}")>@Connection.From.Name</a></VerticalTableCell>
                <VerticalTableCell Title="Role"><a href=@($"/role/{Connection.Role.Id}")>@Connection.Role.Name</a></VerticalTableCell>
                <VerticalTableCell Title="To"><a href=@($"/entity/{Connection.To.Id}")>@Connection.To.Name</a></VerticalTableCell>
            </VerticalTable>
        </div>
    }

    <Grid>

        @if(Packages != null && Packages.Any())
        {
            <div>
                <H2>Packages</H2>
                <SimpleTable>
                    <Head>
                        <SimpleTableRow IsHeaderRow>
                            <th>Name</th>
                            <th>IsDelegable</th>
                            <th>Urn</th>
                        </SimpleTableRow>
                    </Head>
                    <Body>
                        @foreach(var package in Packages)
                        {
                            <SimpleTableRow>
                                <td>@package.Name</td>
                                <td>@package.IsDelegable</td>
                                <td>@package.Urn</td>
                            </SimpleTableRow>
                        }
                    </Body>
                </SimpleTable>
            </div>
        }

        @if (Resources != null && Resources.Any())
        {
            <div>
                <SimpleTable>
                    <Head>
                        <SimpleTableRow IsHeaderRow>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Type</th>
                            <th>Provider</th>
                        </SimpleTableRow>
                    </Head>
                    <Body>
                        @foreach (var resource in Resources)
                        {
                            <SimpleTableRow>
                                <td>@resource.Name</td>
                                <td>@resource.Description</td>
                                <td>@resource.TypeId</td>
                                <td>@resource.ProviderId</td>
                            </SimpleTableRow>
                        }
                    </Body>
                </SimpleTable>
            </div>
        }

        @if (ClientDelegations != null && ClientDelegations.Any())
        {
            <div>
                <H2>Clients</H2>
                <SimpleTable>
                    <Head>
                        <SimpleTableRow IsHeaderRow>
                            <th>Name</th>
                        </SimpleTableRow>
                    </Head>
                    <Body>
                        @foreach (var delegation in ClientDelegations)
                        {
                            <SimpleTableRow>
                                <td>@delegation.Id</td>
                            </SimpleTableRow>
                        }
                    </Body>
                </SimpleTable>
            </div>
        }

        @if (AgentDelegations != null && AgentDelegations.Any())
        {
            <div>
                <H2>Agents</H2>
                <SimpleTable>
                    <Head>
                        <SimpleTableRow IsHeaderRow>
                            <th>Name</th>
                        </SimpleTableRow>
                    </Head>
                    <Body>
                        @foreach (var delegation in AgentDelegations)
                        {
                            <SimpleTableRow>
                                <td>@delegation.Id</td>
                            </SimpleTableRow>
                        }
                    </Body>
                </SimpleTable>
            </div>
        }

    </Grid>

}

@code {
    [Parameter] public Guid Id { get; set; }
    public ExtConnection Connection { get; set; }
    public Assignment Assignment { get; set; }
    public Delegation Delegation { get; set; }

    public IEnumerable<Package> Packages { get; set; }
    public IEnumerable<Resource> Resources { get; set; }

    public bool IsDelegation { get; set; }

    public IEnumerable<ExtDelegation> AgentDelegations { get; set; }
    public IEnumerable<ExtDelegation> ClientDelegations { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Connection = await connectionService.Get(Id);
        Assignment = await assignmentRepository.Get(Id);
        Delegation = await delegationRepository.Get(Id);

        IsDelegation = Delegation != null;

        Packages = await connectionService.GetPackages(Id); // connectionPackageRepository.GetB(Id);
        Resources = await connectionService.GetResources(Id); // connectionResourceRepository.GetB(Id);

        if (!IsDelegation)
        {
            /*Find all Agents*/
            var agentFilter = delegationRepository.CreateFilterBuilder();
            agentFilter.Equal(t => t.FromId, Connection.Id);
            AgentDelegations = await delegationRepository.GetExtended(agentFilter);

            /*Find all Clients*/
            var clientFilter = delegationRepository.CreateFilterBuilder();
            clientFilter.Equal(t => t.ToId, Connection.Id);
            ClientDelegations = await delegationRepository.GetExtended(clientFilter);
        }
        
       
    }
}
