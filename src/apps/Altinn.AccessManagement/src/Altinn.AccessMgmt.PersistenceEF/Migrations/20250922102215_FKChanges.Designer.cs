// <auto-generated />
using System;
using Altinn.AccessMgmt.PersistenceEF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Altinn.AccessMgmt.PersistenceEF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922102215_FKChanges")]
    partial class FKChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text")
                        .HasColumnName("iconurl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Urn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_area_groupid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_area_name");

                    b.ToTable("area", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AreaGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id")
                        .HasName("pk_areagroup");

                    b.HasIndex("EntityTypeId")
                        .HasDatabaseName("ix_areagroup_entitytypeid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_areagroup_name");

                    b.ToTable("areagroup", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("toid");

                    b.HasKey("Id")
                        .HasName("pk_assignment");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_assignment_fromid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_assignment_roleid");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_assignment_toid");

                    b.HasIndex("FromId", "ToId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_assignment_fromid_toid_roleid");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("FromId", "ToId", "RoleId"), new[] { "Id" });

                    b.ToTable("assignment", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AssignmentPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.HasKey("Id")
                        .HasName("pk_assignmentpackage");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_assignmentpackage_assignmentid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_assignmentpackage_packageid");

                    b.HasIndex("AssignmentId", "PackageId")
                        .IsUnique()
                        .HasDatabaseName("ix_assignmentpackage_assignmentid_packageid");

                    b.ToTable("assignmentpackage", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AssignmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id")
                        .HasName("pk_assignmentresource");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_assignmentresource_assignmentid");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_assignmentresource_resourceid");

                    b.HasIndex("AssignmentId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("ix_assignmentresource_assignmentid_resourceid");

                    b.ToTable("assignmentresource", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text")
                        .HasColumnName("iconurl");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditarea");

                    b.ToTable("auditarea", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditAreaGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditareagroup");

                    b.ToTable("auditareagroup", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("toid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditassignment");

                    b.ToTable("auditassignment", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditAssignmentPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditassignmentpackage");

                    b.ToTable("auditassignmentpackage", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditAssignmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditassignmentresource");

                    b.ToTable("auditassignmentresource", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditDelegation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("FacilitatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("facilitatorid");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("toid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditdelegation");

                    b.ToTable("auditdelegation", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditDelegationPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<Guid?>("AssignmentPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentpackageid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("DelegationId")
                        .HasColumnType("uuid")
                        .HasColumnName("delegationid");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid?>("RolePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("rolepackageid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditdelegationpackage");

                    b.ToTable("auditdelegationpackage", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditDelegationResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("DelegationId")
                        .HasColumnType("uuid")
                        .HasColumnName("delegationid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditdelegationresource");

                    b.ToTable("auditdelegationresource", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parentid");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variantid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditentity");

                    b.ToTable("auditentity", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditEntityLookup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityid");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("boolean")
                        .HasColumnName("isprotected");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditentitylookup");

                    b.ToTable("auditentitylookup", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditEntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditentitytype");

                    b.ToTable("auditentitytype", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditEntityVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditentityvariant");

                    b.ToTable("auditentityvariant", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditEntityVariantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variantid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditentityvariantrole");

                    b.ToTable("auditentityvariantrole", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("areaid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<bool>("HasResources")
                        .HasColumnType("boolean")
                        .HasColumnName("hasresources");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("boolean")
                        .HasColumnName("isassignable");

                    b.Property<bool>("IsDelegable")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelegable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditpackage");

                    b.ToTable("auditpackage", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditPackageResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditpackageresource");

                    b.ToTable("auditpackageresource", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logourl");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditprovider");

                    b.ToTable("auditprovider", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditProviderType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditprovidertype");

                    b.ToTable("auditprovidertype", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditresource");

                    b.ToTable("auditresource", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditResourceType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditresourcetype");

                    b.ToTable("auditresourcetype", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("boolean")
                        .HasColumnName("isassignable");

                    b.Property<bool>("IsKeyRole")
                        .HasColumnType("boolean")
                        .HasColumnName("iskeyrole");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditrole");

                    b.ToTable("auditrole", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditRoleLookup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditrolelookup");

                    b.ToTable("auditrolelookup", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditRoleMap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("GetRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("getroleid");

                    b.Property<Guid>("HasRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("hasroleid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditrolemap");

                    b.ToTable("auditrolemap", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditRolePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<bool>("CanAssign")
                        .HasColumnType("boolean")
                        .HasColumnName("canassign");

                    b.Property<bool>("CanDelegate")
                        .HasColumnType("boolean")
                        .HasColumnName("candelegate");

                    b.Property<Guid?>("EntityVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityvariantid");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("hasaccess");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditrolepackage");

                    b.ToTable("auditrolepackage", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Audit.AuditRoleResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<DateTimeOffset>("Audit_ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validto");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<string>("Audit_DeleteOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_deleteoperation");

                    b.Property<Guid?>("Audit_DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedby");

                    b.Property<Guid?>("Audit_DeletedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_deletedbysystem");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("Id", "Audit_ValidFrom", "Audit_ValidTo")
                        .HasName("pk_auditroleresource");

                    b.ToTable("auditroleresource", "dbo_history");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Connection", b =>
                {
                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("toid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.Property<Guid?>("ViaId")
                        .HasColumnType("uuid")
                        .HasColumnName("viaid");

                    b.Property<Guid?>("ViaRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("viaroleid");

                    b.HasKey("FromId", "ToId", "RoleId", "Reason")
                        .HasName("pk_connections");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_connections_fromid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_connections_packageid");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_connections_resourceid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_connections_roleid");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_connections_toid");

                    b.HasIndex("ViaId")
                        .HasDatabaseName("ix_connections_viaid");

                    b.HasIndex("ViaRoleId")
                        .HasDatabaseName("ix_connections_viaroleid");

                    b.ToTable("connections", (string)null);

                    b.ToView("connection", "dbo");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Delegation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("FacilitatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("facilitatorid");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("toid");

                    b.HasKey("Id")
                        .HasName("pk_delegation");

                    b.HasIndex("FacilitatorId")
                        .HasDatabaseName("ix_delegation_facilitatorid");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_delegation_fromid");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_delegation_toid");

                    b.HasIndex("FromId", "ToId", "FacilitatorId")
                        .IsUnique()
                        .HasDatabaseName("ix_delegation_fromid_toid_facilitatorid");

                    b.ToTable("delegation", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.DelegationPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignmentPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignmentpackageid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("DelegationId")
                        .HasColumnType("uuid")
                        .HasColumnName("delegationid");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid?>("RolePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("rolepackageid");

                    b.HasKey("Id")
                        .HasName("pk_delegationpackage");

                    b.HasIndex("DelegationId")
                        .HasDatabaseName("ix_delegationpackage_delegationid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_delegationpackage_packageid");

                    b.HasIndex("DelegationId", "PackageId")
                        .IsUnique()
                        .HasDatabaseName("ix_delegationpackage_delegationid_packageid");

                    b.ToTable("delegationpackage", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.DelegationResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("DelegationId")
                        .HasColumnType("uuid")
                        .HasColumnName("delegationid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id")
                        .HasName("pk_delegationresource");

                    b.HasIndex("DelegationId")
                        .HasDatabaseName("ix_delegationresource_delegationid");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_delegationresource_resourceid");

                    b.HasIndex("DelegationId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("ix_delegationresource_delegationid_resourceid");

                    b.ToTable("delegationresource", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parentid");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variantid");

                    b.HasKey("Id")
                        .HasName("pk_entity");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_entity_parentid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_entity_typeid");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_entity_variantid");

                    b.HasIndex("Name", "RefId", "TypeId", "VariantId")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_name_refid_typeid_variantid");

                    b.ToTable("entity", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityLookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityid");

                    b.Property<bool>("IsProtected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isprotected");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_entitylookup");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("ix_entitylookup_entityid");

                    b.HasIndex("EntityId", "Key")
                        .IsUnique()
                        .HasDatabaseName("ix_entitylookup_entityid_key");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("EntityId", "Key"), new[] { "Value", "Id" });

                    b.ToTable("entitylookup", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.HasKey("Id")
                        .HasName("pk_entitytype");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_entitytype_providerid");

                    b.HasIndex("Name", "ProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_entitytype_name_providerid");

                    b.ToTable("entitytype", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("pk_entityvariant");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_entityvariant_typeid");

                    b.HasIndex("Name", "TypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_entityvariant_name_typeid");

                    b.ToTable("entityvariant", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variantid");

                    b.HasKey("Id")
                        .HasName("pk_entityvariantrole");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_entityvariantrole_roleid");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_entityvariantrole_variantid");

                    b.HasIndex("VariantId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_entityvariantrole_variantid_roleid");

                    b.ToTable("entityvariantrole", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("areaid");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<bool>("HasResources")
                        .HasColumnType("boolean")
                        .HasColumnName("hasresources");

                    b.Property<bool>("IsAssignable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isassignable");

                    b.Property<bool>("IsDelegable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdelegable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("Urn")
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id")
                        .HasName("pk_package");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_package_areaid");

                    b.HasIndex("EntityTypeId")
                        .HasDatabaseName("ix_package_entitytypeid");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_package_providerid");

                    b.HasIndex("ProviderId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_package_providerid_name");

                    b.ToTable("package", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.PackageResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.HasKey("Id")
                        .HasName("pk_packageresource");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packageresource_packageid");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_packageresource_resourceid");

                    b.HasIndex("PackageId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("ix_packageresource_packageid_resourceid");

                    b.ToTable("packageresource", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logourl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("pk_provider");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_provider_name");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_provider_typeid");

                    b.ToTable("provider", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.ProviderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_providertype");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_providertype_name");

                    b.ToTable("providertype", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("RefId")
                        .HasColumnType("text")
                        .HasColumnName("refid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("pk_resource");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_resource_providerid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_resource_typeid");

                    b.ToTable("resource", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.ResourceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_resourcetype");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_resourcetype_name");

                    b.ToTable("resourcetype", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entitytypeid");

                    b.Property<bool>("IsAssignable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isassignable");

                    b.Property<bool>("IsKeyRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("iskeyrole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerid");

                    b.Property<string>("Urn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("urn");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("EntityTypeId")
                        .HasDatabaseName("ix_role_entitytypeid");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_role_providerid");

                    b.HasIndex("Urn")
                        .IsUnique()
                        .HasDatabaseName("ix_role_urn");

                    b.HasIndex("ProviderId", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_role_providerid_code");

                    b.HasIndex("ProviderId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_providerid_name");

                    b.ToTable("role", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleLookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_rolelookup");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_rolelookup_roleid");

                    b.HasIndex("RoleId", "Key")
                        .IsUnique()
                        .HasDatabaseName("ix_rolelookup_roleid_key");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RoleId", "Key"), new[] { "Value", "Id" });

                    b.ToTable("rolelookup", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("GetRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("getroleid");

                    b.Property<Guid>("HasRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("hasroleid");

                    b.HasKey("Id")
                        .HasName("pk_rolemap");

                    b.HasIndex("GetRoleId")
                        .HasDatabaseName("ix_rolemap_getroleid");

                    b.HasIndex("HasRoleId")
                        .HasDatabaseName("ix_rolemap_hasroleid");

                    b.HasIndex("HasRoleId", "GetRoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_rolemap_hasroleid_getroleid");

                    b.ToTable("rolemap", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RolePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<bool>("CanAssign")
                        .HasColumnType("boolean")
                        .HasColumnName("canassign");

                    b.Property<bool>("CanDelegate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("candelegate");

                    b.Property<Guid?>("EntityVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityvariantid");

                    b.Property<bool>("HasAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("hasaccess");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("packageid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_rolepackage");

                    b.HasIndex("EntityVariantId")
                        .HasDatabaseName("ix_rolepackage_entityvariantid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_rolepackage_packageid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_rolepackage_roleid");

                    b.HasIndex("RoleId", "PackageId")
                        .IsUnique()
                        .HasDatabaseName("ix_rolepackage_roleid_packageid")
                        .HasFilter("entityvariantid IS NULL");

                    b.HasIndex("RoleId", "PackageId", "EntityVariantId")
                        .IsUnique()
                        .HasDatabaseName("ix_rolepackage_roleid_packageid_entityvariantid")
                        .HasFilter("entityvariantid IS NOT NULL");

                    b.ToTable("rolepackage", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Audit_ChangeOperation")
                        .HasColumnType("text")
                        .HasColumnName("audit_changeoperation");

                    b.Property<Guid?>("Audit_ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedby");

                    b.Property<Guid?>("Audit_ChangedBySystem")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_changedbysystem");

                    b.Property<DateTimeOffset>("Audit_ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_validfrom");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resourceid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleresource");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_roleresource_resourceid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_roleresource_roleid");

                    b.HasIndex("RoleId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("ix_roleresource_roleid_resourceid");

                    b.ToTable("roleresource", "dbo");

                    b.HasAnnotation("EnableAudit", true);
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Utils.TranslationEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text")
                        .HasColumnName("languagecode");

                    b.Property<string>("FieldName")
                        .HasColumnType("text")
                        .HasColumnName("fieldname");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type", "LanguageCode", "FieldName")
                        .HasName("pk_translationentry");

                    b.ToTable("translationentry", "dbo");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Area", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.AreaGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_areagroup_groupid");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AreaGroup", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_areagroup_entitytype_entitytypeid");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_entity_fromid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_role_roleid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_entity_toid");

                    b.Navigation("From");

                    b.Navigation("Role");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AssignmentPackage", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignmentpackage_assignment_assignmentid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_assignmentpackage_package_packageid");

                    b.Navigation("Assignment");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.AssignmentResource", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignmentresource_assignment_assignmentid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_assignmentresource_resource_resourceid");

                    b.Navigation("Assignment");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Connection", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_connections_entity_fromid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_connections_package_packageid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_connections_resource_resourceid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_connections_role_roleid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_connections_entity_toid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "Via")
                        .WithMany()
                        .HasForeignKey("ViaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_connections_entity_viaid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "ViaRole")
                        .WithMany()
                        .HasForeignKey("ViaRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_connections_role_viaroleid");

                    b.Navigation("From");

                    b.Navigation("Package");

                    b.Navigation("Resource");

                    b.Navigation("Role");

                    b.Navigation("To");

                    b.Navigation("Via");

                    b.Navigation("ViaRole");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Delegation", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "Facilitator")
                        .WithMany()
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delegation_entity_facilitatorid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delegation_assignment_fromid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Assignment", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delegation_assignment_toid");

                    b.Navigation("Facilitator");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.DelegationPackage", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delegationpackage_delegation_delegationid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_delegationpackage_package_packageid");

                    b.Navigation("Delegation");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.DelegationResource", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delegationresource_delegation_delegationid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_delegationresource_resource_resourceid");

                    b.Navigation("Delegation");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Entity", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_entity_entity_parentid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entity_entitytype_typeid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entity_entityvariant_variantid");

                    b.Navigation("Parent");

                    b.Navigation("Type");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityLookup", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entitylookup_entity_entityid");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entitytype_provider_providerid");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariant", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entityvariant_entitytype_typeid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariantRole", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entityvariantrole_role_roleid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entityvariantrole_entityvariant_variantid");

                    b.Navigation("Role");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Package", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_package_area_areaid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_package_entitytype_entitytypeid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_package_provider_providerid");

                    b.Navigation("Area");

                    b.Navigation("EntityType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.PackageResource", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packageresource_package_packageid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_packageresource_resource_resourceid");

                    b.Navigation("Package");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Provider", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.ProviderType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_provider_providertype_typeid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Resource", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_resource_provider_providerid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.ResourceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_resource_resourcetype_typeid");

                    b.Navigation("Provider");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.Role", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_role_entitytype_entitytypeid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role_provider_providerid");

                    b.Navigation("EntityType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleLookup", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolelookup_role_roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleMap", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "GetRole")
                        .WithMany()
                        .HasForeignKey("GetRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolemap_role_getroleid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "HasRole")
                        .WithMany()
                        .HasForeignKey("HasRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolemap_role_hasroleid");

                    b.Navigation("GetRole");

                    b.Navigation("HasRole");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RolePackage", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.EntityVariant", "EntityVariant")
                        .WithMany()
                        .HasForeignKey("EntityVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_rolepackage_entityvariant_entityvariantid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rolepackage_package_packageid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolepackage_role_roleid");

                    b.Navigation("EntityVariant");

                    b.Navigation("Package");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Altinn.AccessMgmt.PersistenceEF.Models.RoleResource", b =>
                {
                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_roleresource_resource_resourceid");

                    b.HasOne("Altinn.AccessMgmt.PersistenceEF.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleresource_role_roleid");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
