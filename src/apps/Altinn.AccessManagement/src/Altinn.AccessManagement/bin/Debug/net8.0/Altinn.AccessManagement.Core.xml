<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Altinn.AccessManagement.Core</name>
    </assembly>
    <members>
        <member name="T:Altinn.AccessManagement.Core.Asserters.Assertion`1">
            <summary>
            The function signature of an Assertion that validates data
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Asserters.Asserter`1">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Any(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.All(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Single(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Evaluate(System.Collections.Generic.IEnumerable{`0},Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Join(Microsoft.AspNetCore.Mvc.ValidationProblemDetails[])">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.AddError(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.KeyValuePair{System.String,System.String[]})">
            <summary>
            add error to the dictionary
            </summary>
            <param name="errors">error dictionary</param>
            <param name="entry">the key-value pair that should be written to the error dict</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter">
            <summary>
            Asserts values for model <see cref="T:Altinn.AccessManagement.Core.Models.AttributeMatch"/>.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.HasAttributeTypes(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Passes if all the given attribute types are contained in the given list of attributes.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.AttributesAreIntegers(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Checks if all given types has a value of type integer. Attributes that don't exist in the list of attributes are ignored.
            </summary>
            <param name="assert">list of attributes</param>
            <param name="types">URN of the types that should be integers</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.AttributesAreBoolean(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Checks if all given types has a value of type boolean. Attributes that don't exist in the list of attributes are ignored.
            </summary>
            <param name="assert">list of attributes</param>
            <param name="types">URN of the types that should be boolean</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.AttributeCompare(System.String,System.Func{Altinn.AccessManagement.Core.Models.AttributeMatch,System.Boolean})">
            <summary>
            Can pass a custom compare function that compares a single attribute an return a boolean that specifies if it passed or not.
            </summary>
            <param name="type">list of attributes</param>
            <param name="cmp">compare function</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.AllAttributesHasValues(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Passes if all attributes has a populated value field. Content is irrelevant, but it can't be an empty string or null 
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.IsDelegatableResource(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Checks if a resource is delegable. The resource must be in the list of attributes otherwise it fails.
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.DefaultTo(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            A default list of assertions that contains the baseline for validating in input delegaton to an entity.
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.DefaultFrom(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            A default list of assertions that contains the baseline for validating in input delegaton from an entity.
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.Altinn2InternalIds(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            A list of assertions for validating input is a single value of either of the internal Altinn 2 identifiers: UserId or PartyId.
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.AttributeMatchAsserter.DefaultResource(Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            A default list of assertions that contains the baseline for validating input for a resource.
            </summary>
            <param name="assert">list of assertions</param>
            <param name="errors">dictionary for writing assertion errors</param>
            <param name="values">list of attributes</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Asserters.IAssert`1">
            <summary>
            Contains the basic methods for combining and nesting assertions.
            Use the <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Evaluate(System.Collections.Generic.IEnumerable{`0},Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])"/> to make assertions for one dataset. If you have multiple datasets,
            you can pass the evaluations to the <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Join(Microsoft.AspNetCore.Mvc.ValidationProblemDetails[])"/> to get a single assertions result for all
            the datasets.
            </summary>
            <typeparam name="TModel">the model that should</typeparam>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.IAssert`1.Join(Microsoft.AspNetCore.Mvc.ValidationProblemDetails[])">
            <summary>
            Joins multiple evaluations to a single result
            </summary>
            <param name="evaluations">evaluations</param>
            <returns>
            returns null if all the assertions passed. If an assertion generated an error then these errors will be present in <see cref="P:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.Errors"/>
            dictionary where the keys should be named the assertion method and value should contain the message(s).
            </returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.IAssert`1.Evaluate(System.Collections.Generic.IEnumerable{`0},Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <summary>
            Executes all the assertions using the given dataset 
            </summary>
            <param name="values">the values to be asserted</param>
            <param name="actions">assertions</param>
            <returns>
            returns null if all the assertions passed. If an assertion generated an error then these errors will be present in <see cref="P:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.Errors"/>
            dictionary where the keys should be named the assertion method and value should contain the message(s).
            </returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.IAssert`1.Single(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <summary>
            Single will omit writing to the error dict if there is just one assertion that passes.
            Can be combined with <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Any(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])"/> and <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.All(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])"/>
            to create even more complex assertion.
            </summary>
            <param name="actions">assertions</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.IAssert`1.All(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <summary>
            All errors are directly written to the errors dictionary. This method works as calling the Evaluate method directly
            with a set of asserts. However, this can also be combined inside <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Any(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])"/> or <see cref="M:Altinn.AccessManagement.Core.Asserters.Asserter`1.Single(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])"/>
            to create even more complex assertion.
            </summary>
            <param name="actions">assertions</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Asserters.IAssert`1.Any(Altinn.AccessManagement.Core.Asserters.Assertion{`0}[])">
            <summary>
            If any given asserts don't add an error to the errors dictionary parameter, then all other errors are ignored
            </summary>
            <param name="actions">assertions</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient">
            <summary>
            Interface for client for getting Altinn rights from AltinnII SBL Bridge
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient.PostDelegationCheck(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get Altinn rights from AltinnII SBL bridge
            </summary>
            <param name="authenticatedUserId">the authenticated user id</param>
            <param name="reporteePartyId">the party id of the reportee/from party</param>
            <param name="serviceCode">the service code</param>
            <param name="serviceEditionCode">the service edition code</param>
            <returns>Delegation Check Response</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient.PostDelegation(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.SblRightDelegationRequest)">
            <summary>
            Post delegation of Altinn 2 service rights to SBL bridge
            </summary>
            <param name="authenticatedUserId">the authenticated user id</param>
            <param name="reporteePartyId">the party id of the reportee/from party</param>
            <param name="delegationRequest">the delegation request model</param>
            <returns>Delegation Response</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient.ClearReporteeRights(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Operation to clear a recipients cached rights from a given reportee/from party, and the recipients authorized parties/reportees
            </summary>
            <param name="fromPartyId">The party id of the from party</param>
            <param name="toPartyId">The party id of the to party</param>
            <param name="toUserId">The user id of the to party (if the recipient is a user)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>HttpResponse</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient">
            <summary>
            Interface for client for getting Altinn roles from AltinnII SBL Bridge
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient.GetDecisionPointRolesForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the decision point roles for the loggedin user for a selected party
            </summary>
            <param name="coveredByUserId">the logged in user id</param>
            <param name="offeredByPartyId">the partyid of the person/org the logged in user is representing</param>
            <param name="cancellationToken">Cancellation token for the request</param>
            <returns>list of actors that the logged in user can represent</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient.GetRolesForDelegation(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the roles the user has for a given reportee, as basis for evaluating rights for delegation.
            For any user having HADM this means, getting additional roles as DAGL etc.
            </summary>
            <param name="coveredByUserId">the user id</param>
            <param name="offeredByPartyId">the partyid of the person/org the user is representing</param>
            <param name="cancellationToken">Cancellation token for the request</param>
            <returns>list of actors that the logged in user can represent</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient.GetAuthorizedPartiesWithRoles(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the list of authorized parties from Altinn 2 that a given user have one or more accesses for, including 
            </summary>
            <param name="userId">The user to get the list of AuthorizedParties for</param>
            <param name="cancellationToken">Cancellation token for the request</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient">
            <summary>
            Authentication interface.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient.RefreshToken(System.Threading.CancellationToken)">
            <summary>
            Refreshes the AltinnStudioRuntime JwtToken.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Response message from Altinn Platform with refreshed token.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient.GetSystemUser(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetching a System user from Authentication
            </summary>
            <param name="partyId">The party id of the party the systemUSer is registered on</param>
            <param name="systemUserId">The uuid identifying the systemUser</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient.GetDefaultRightsForRegisteredSystem(System.String,System.Threading.CancellationToken)">
            <summary>
            Get defined rights for a given System
            </summary>
            <param name="systemId">The uuid identifier of the system</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient">
            <summary>
            Interface for a client wrapper for integration with SBL bridge delegation request API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetPartyAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns partyInfo
            </summary>
            <param name="partyId">The party ID to lookup</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>party information</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetPartiesAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a list of parties
            </summary>
            <param name="partyIds">List of party IDs to lookup</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the lookup party IDs are for a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>List of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetPartiesAsync(System.Collections.Generic.List{System.Guid},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a list of parties
            </summary>
            <param name="partyUuids">List of party uuids to lookup</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the parties are a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>List of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetPartiesForUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of parties for user
            </summary>
            <param name="userId">The user id</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>List of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetKeyRoleParties(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method that fetches a list of PartyIds the given user id has key role access to (where the user inherit delegations to their organization)
            </summary>
            <param name="userId">The user id</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>list of PartyIds where the logged in user have key role access</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.GetMainUnits(Altinn.AccessManagement.Core.Models.SblBridge.MainUnitQuery,System.Threading.CancellationToken)">
            <summary>
            Method that fetches a list of main units for the input list of sub unit partyIds. If any of the input partyIds are not a sub unit the response model will have null values for main unit properties.
            </summary>
            <param name="subunitPartyIds">The list of PartyIds to check and retrieve any main units for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>list of main units</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient.LookupPartyBySSNOrOrgNo(Altinn.Platform.Register.Models.PartyLookup,System.Threading.CancellationToken)">
            <summary>
            Looks up a party based on SSN or OrgNumber.
            </summary>
            <param name="partyLookup">
            SSN or OrgNumber as a PartyLookup object.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>
            The party that represents the given SSN or OrgNumber.
            </returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient">
            <summary>
            Interface for Profile functionality.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient.GetUser(Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup,System.Threading.CancellationToken)">
            <summary>
            Method for getting the userprofile for a given user identified by one of the available types of user identifiers:
                UserId (from Altinn 2 Authn UserProfile)
                Username (from Altinn 2 Authn UserProfile)
                SSN/Dnr (from Freg)
                Uuid (from Altinn 2 Party/UserProfile implementation will be added later)
            </summary>
            <param name="userProfileLookup">Model for specifying the user identifier to use for the UserProfile lookup</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The UserProfile for the given user</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient">
            <summary>
            Interface for client integration with the Resource Registry
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient.GetResource(System.String,System.Threading.CancellationToken)">
            <summary>
            Integration point for retrieving a single resoure by it's resource id
            </summary>
            <param name="resourceId">The identifier of the resource in the Resource Registry</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource if exists</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient.GetResources(System.Threading.CancellationToken)">
            <summary>
            Integration point for retrieving a list of resources
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource list if exists</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient.GetResourceList(System.Threading.CancellationToken)">
            <summary>
            Integration point for retrieving the full list of resources
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource full list of all resources if exists</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient.GetSubjectResources(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Integration point for retrieving all resources having any of the request subjects in one or more resource policy rules
            </summary>
            <param name="subjects">Urn string representation of the subjects to lookup resources for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Dictionary of all resources per subject, having policy rules with the subject</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Configuration.CacheConfig">
            <summary>
            Cache configuration settings
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.PolicyCacheTimeout">
            <summary>
            Gets or sets the policy cache timeout (in minutes) 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.AltinnRoleCacheTimeout">
            <summary>
            Gets or sets the Altinn role cache timeout (in minutes) 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.PartyCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of party information
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.MainUnitCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of mainunits
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.KeyRolePartyIdsCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of keyrole partyIds
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.ResourceRegistryResourceCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of a resource from the resource registry
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.ResourceRegistrySubjectResourcesCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of a subject resources from the resourceregistry
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.CacheConfig.RightsCacheTimeout">
            <summary>
            Gets or sets the cache timeout (in minutes) for lookup of a rights
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Configuration.FeatureFlags">
            <summary>
            Feature management flags
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Configuration.FeatureFlags.RightsDelegationApi">
            <summary>
            Feature flag for activating the Rights Delegation API
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Configuration.FeatureFlags.RightsDelegationApiExternal">
            <summary>
            Feature flag for activating the Rights Delegation API External
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Configuration.GeneralSettings">
            <summary>
            General configuration settings
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.GeneralSettings.Hostname">
            <summary>
            Gets or sets the host name.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Configuration.UserProfileLookupSettings">
            <summary>
            UserProfile Lookup Settings
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.UserProfileLookupSettings.FailedAttemptsCacheLifetimeSeconds">
            <summary>
            Gets or sets the cache timeout for number of failed lookup attempts (in seconds) 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Configuration.UserProfileLookupSettings.MaximumFailedAttempts">
            <summary>
            Gets or sets the maximum number of failed attempts before lockout 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes">
            <summary>
            The different claim types.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.AuthenticationLevel">
            <summary>
            AuthenticationLevel.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.UserId">
            <summary>
            User id.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.PartyID">
            <summary>
            Party id.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.RepresentingPartyId">
            <summary>
            The representing party id.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.UserName">
            <summary>
            Usernam.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.Developer">
            <summary>
            Developer.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.DeveloperToken">
            <summary>
            Developertoken.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.DeveloperTokenId">
            <summary>
            Developertoken id.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.AuthenticateMethod">
            <summary>
            Method of authentication.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.Org">
            <summary>
            Organization.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnCoreClaimTypes.OrgNumber">
            <summary>
            Organization number.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants">
            <summary>
            Altinn specific XACML constants used for urn identifiers and attributes
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.Prefixes">
            <summary>
            Altinn specific prefixes
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.Prefixes.PolicyId">
            <summary>
            The Policy Id prefix.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.Prefixes.ObligationId">
            <summary>
            The Obligation Id prefix.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.Prefixes.ObligationAssignmentid">
            <summary>
            The Obligation Assignment Id prefix.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers">
            <summary>
            Match attribute identifiers
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.OrgAttribute">
            <summary>
            Org attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.AppAttribute">
            <summary>
            App attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.InstanceAttribute">
            <summary>
            Instance attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.AppResourceAttribute">
            <summary>
            App resource attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.TaskAttribute">
            <summary>
            Task attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.EndEventAttribute">
            <summary>
            End-event attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PartyAttribute">
            <summary>
            Party Id attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.UserAttribute">
            <summary>
            User Id attribute match indentifier 
            </summary>>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.RoleAttribute">
            <summary>
            Role Code attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.ResourceRegistryAttribute">
            <summary>
            Resource Registry attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.OrganizationName">
            <summary>
            Organization name
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.OrganizationNumberAttribute">
            <summary>
            Organization number attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.SocialSecurityNumberAttribute">
            <summary>
            Social security number attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.ServiceCodeAttribute">
            <summary>
            Altinn 2 service code attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.ServiceEditionCodeAttribute">
            <summary>
            Altinn 2 service edition code attribute match indentifier 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PersonUuid">
            <summary>
            Person uuid
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PersonId">
            <summary>
            National identity number for a person
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PersonLastName">
            <summary>
            Last name of a person 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PersonUserName">
            <summary>
            Person username
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.EnterpriseUserUuid">
            <summary>
            Enterprise user uuid
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.EnterpriseUserName">
            <summary>
            Enterprise user username
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.OrganizationUuid">
            <summary>
            Organization uuid
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.OrganizationId">
            <summary>
            Organization number
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.SystemUserUuid">
            <summary>
            SystemUser uuid
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeCategory">
            <summary>
            Attribute categories.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeCategory.MinimumAuthenticationLevel">
            <summary>
            The minimum authentication level category.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeCategory.MinimumAuthenticationLevelOrg">
            <summary>
            The minimum authentication level for organization category
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.AuthzConstants">
            <summary>
            Constants related to authorization.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.ALTINNII_AUTHORIZATION">
            <summary>
            Policy tag for authorizing Altinn.Platform.Authorization API access from AltinnII Authorization
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.INTERNAL_AUTHORIZATION">
            <summary>
            Policy tag for authorizing internal Altinn.Platform.Authorization API access
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_MASKINPORTEN_DELEGATION_READ">
            <summary>
            Policy tag for reading an maskinporten delegation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_MASKINPORTEN_DELEGATION_WRITE">
            <summary>
            Policy tag for writing an maskinporten delegation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_ACCESS_MANAGEMENT_READ">
            <summary>
            Policy tag for reading access management information
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_ACCESS_MANAGEMENT_WRITE">
            <summary>
            Policy tag for writing access management delegations
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_MASKINPORTEN_DELEGATIONS_PROXY">
            <summary>
            Policy tag for scope authorization on the proxy API from Altinn II for the maskinporten integration API
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.POLICY_RESOURCEOWNER_AUTHORIZEDPARTIES">
            <summary>
            Policy tag for scope authorization on the resource owner API for getting the Authorized Party list for a third party
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.SCOPE_AUTHORIZEDPARTIES_ENDUSERSYSTEM">
            <summary>
            Scope giving access to getting authorized parties for a given subject.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.SCOPE_AUTHORIZEDPARTIES_RESOURCEOWNER">
            <summary>
            Scope giving access to getting authorized parties for any third party, for which the third party have access to one or more of the resource owners services, apps or resources.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.SCOPE_AUTHORIZEDPARTIES_ADMIN">
            <summary>
            Scope giving access to getting all authorized parties for any third party
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.SCOPE_MASKINPORTEN_DELEGATIONS">
            <summary>
            Scope giving access to delegations for Maskinporten schemes owned by authenticated party 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.SCOPE_MASKINPORTEN_DELEGATIONS_ADMIN">
            <summary>
            Scope giving access to delegations for arbitrary Maskinporten schemes
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.CLAIM_MASKINPORTEN_SCOPE">
            <summary>
            Claim for scopes from maskinporten token
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.CLAIM_MASKINPORTEN_CONSUMER">
            <summary>
            Claim for full consumer from maskinporten token
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.AuthzConstants.CLAIM_MASKINPORTEN_CONSUMER_PREFIX">
            <summary>
            Claim for consumer prefixes from maskinporten token
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute">
            <summary>
            Attribute representations in XACML
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.OrgAttribute">
            <summary>
            xacml string that represents org
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.AppAttribute">
            <summary>
            xacml string that represents app
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.InstanceAttribute">
            <summary>
            xacml string that represents instanceid
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.AppResourceAttribute">
            <summary>
            xacm string that represents appresource
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.TaskAttribute">
            <summary>
            xacml string that represents task
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.EndEventAttribute">
            <summary>
            xacml string that represents end event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.PartyAttribute">
            <summary>
            xacml string that represents party
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.OrganizationNumberAttribute">
            <summary>
            xacml string that represents organization number 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.UserAttribute">
            <summary>
            xacml string that represents user
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.RoleAttribute">
            <summary>
            xacml string that represents role
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Constants.XacmlRequestAttribute.ResourceRegistryAttribute">
            <summary>
            xacml string that represents resource
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.AuthorizedPartyType">
            <summary>
            Enum for different types of Authorized Party
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.AuthorizedPartyType.None">
            <summary>
            Unknown or unspecified
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.AuthorizedPartyType.Person">
            <summary>
            Party Type is a Person
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.AuthorizedPartyType.Organization">
            <summary>
            Party Type is an Organization
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.AuthorizedPartyType.SelfIdentified">
            <summary>
            Party Type is a Self Identified user
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.DelegableStatus">
            <summary>
            Enum for different right delegation status responses
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegableStatus.NotDelegable">
            <summary>
            User is not able to delegate the right
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegableStatus.Delegable">
            <summary>
            User is able to delegate the right
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.DelegationActionType">
            <summary>
            Enum for the different delegation action types
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationActionType.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationActionType.Delegation">
            <summary>
            Delegation action
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationActionType.Revoke">
            <summary>
            Revoke action
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.DelegationStatus">
            <summary>
            Enum for different right delegation status responses
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationStatus.NotDelegated">
            <summary>
            Right was not delegated
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationStatus.Delegated">
            <summary>
            Right was delegated
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.DelegationType">
            <summary>
            Enum for the different the types of delegations exist for a delegated right in Altinn Authorization
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.DirectUserDelegation">
            <summary>
            Delegated to user
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.DirectUserDelegationFromMainUnit">
            <summary>
            Delegated to user, from main unit
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.DirectOrgDelegation">
            <summary>
            Delegated to organization
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.DirectOrgDelegationFromMainUnit">
            <summary>
            Delegated to organization, from main unit
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.KeyRoleDelegation">
            <summary>
            Delegated to key role relation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DelegationType.KeyRoleDelegationFromMainUnit">
            <summary>
            Delegated to key role relation, from main unit
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.DetailCode">
            <summary>
            Fixed values for DetailCodes
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.Unknown">
            <summary>
            Unknown reason
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.RoleAccess">
            <summary>
            Has access by a delegated role in ER or Altinn 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.DelegationAccess">
            <summary>
            Has access by direct delegation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.SrrRightAccess">
            <summary>
            The service requires explicit access in SRR and the reportee has this
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.MissingRoleAccess">
            <summary>
            Has not access by a delegation of role in ER or Altinn
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.MissingDelegationAccess">
            <summary>
            Has not access by direct delegation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.MissingSrrRightAccess">
            <summary>
            The service requires explicit access in SRR and the reportee is missing this
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.InsufficientAuthenticationLevel">
            <summary>
            The service requires explicit authentication level and the reportee is missing this
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.DetailCode.AlreadyDelegated">
            <summary>
            The receiver already has the right
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.PolicyAccountType">
            <summary>
            Storage Account
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType">
            <summary>
            Enum representation of the different types of resource attribute match types supported
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType.None">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType.ResourceRegistry">
            <summary>
            Resource registered in the Altinn Resource Registry
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType.AltinnAppId">
            <summary>
            Legacy App resource identified by org owner and app name
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType.Altinn2Service">
            <summary>
            Legacy Altinn 2 service resource identified by service codes
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.ResourceRegistry.ResourcePartyType">
            <summary>
            Defines the type of party that a resource is targeting
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection">
            <summary>
            Enum for deciding which authRequests to get
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection.None">
            <summary>
            Default none
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection.Incoming">
            <summary>
            Incoming requests
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection.Outgoing">
            <summary>
            Outgoing requests
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection.Both">
            <summary>
            Both incoming and outgoing
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Enums.RightSourceType">
            <summary>
            Enum for different the source types exist for a right in Altinn Authorization
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RightSourceType.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RightSourceType.AppPolicy">
            <summary>
            XACML policy for an Altinn app
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RightSourceType.ResourceRegistryPolicy">
            <summary>
            XACML policy for a resource from the resource registry
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Enums.RightSourceType.DelegationPolicy">
            <summary>
            Altinn delegation policy
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ReferenceSource">
            <summary>
            Enum for the different reference sources for resources in the resource registry
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ReferenceType">
            <summary>
            Enum for reference types of resources in the resource registry
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType">
            <summary>
            Enum representation of the different types of resources supported by the resource registry
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.CompetentAuthority">
            <summary>
            Model representation of Competent Authority part of the ServiceResource model
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.CompetentAuthority.Organization">
            <summary>
            The organization number
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.CompetentAuthority.Orgcode">
            <summary>
            The organization code
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.CompetentAuthority.Name">
            <summary>
            The organization name. If not set it will be retrived from register based on Organization number
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ContactPoint">
            <summary>
            Defines a contact point
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ContactPoint.Category">
            <summary>
            The type of contact point, phone, email ++
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ContactPoint.Email">
            <summary>
            The contact details. The actual phone number, email adress
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ContactPoint.Telephone">
            <summary>
            Phone details
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ContactPoint.ContactPage">
            <summary>
            Contact page
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.Keyword">
            <summary>
            Model for defining keywords
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.Keyword.Word">
            <summary>
            The key word
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.Keyword.Language">
            <summary>
            Language of the key word
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceReference">
            <summary>
            Model representation of the resource reference part of the ServiceResource model
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceReference.ReferenceSource">
            <summary>
            The source the reference identifier points to
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceReference.Reference">
            <summary>
            The reference identifier
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceReference.ReferenceType">
            <summary>
            The reference type
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch">
            <summary>
            Model for performing search for resources in the resource registry
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch.ResourceType">
            <summary>
            ResourceType
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceSearch.Keyword">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource">
            <summary>
            Model describing a complete resource from the resource registry.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Identifier">
            <summary>
            The identifier of the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Title">
            <summary>
            The title of service
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.RightDescription">
            <summary>
            Description explaining the rights a recipient will receive if given access to the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Homepage">
            <summary>
            The homepage
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Status">
            <summary>
            The status
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Spatial">
            <summary>
            spatial coverage
            This property represents that area(s) a Public Service is likely to be available only within, typically the area(s) covered by a particular public authority.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.ContactPoints">
            <summary>
            List of possible contact points
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Produces">
            <summary>
            Linkes to the outcome of a public service
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.IsPartOf">
            <summary>
            IsPartOf
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.ThematicAreas">
            <summary>
            ThematicAreas
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.ResourceReferences">
            <summary>
            ResourceReference
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Delegable">
            <summary>
            Is this resource possible to delegate to others or not
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Visible">
            <summary>
            The visibility of the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.HasCompetentAuthority">
            <summary>
            HasCompetentAuthority
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.LimitedByRRR">
            <summary>
            Defines if the resource is limited by Resource Rights Registry
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.SelfIdentifiedUserEnabled">
            <summary>
            The user acting on behalf of party can be a selfidentifed users
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.EnterpriseUserEnabled">
            <summary>
            The user acting on behalf of party can be an enterprise users
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.ResourceType">
            <summary>
            ResourceType
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.AvailableForType">
            <summary>
            Available for type defines which type of entity / person that resource targets
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.AuthorizationReference">
            <summary>
            List of autorizationReference attributes to reference this resource in authorization API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource.ToString">
            <summary>
            Writes key information when this object is written to Log.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.SubjectResources">
            <summary>
            Defines resources that a given subject have access to
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.SubjectResources.Subject">
            <summary>
            The subject
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceRegistry.SubjectResources.Resources">
            <summary>
            List of resources that the given subject has access to
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus">
            <summary>
            Enum for determining the status of an Authorization Request 
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.None">
            <summary>
            Should not be used as a status for an AuthorizationRequest.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.Unopened">
            <summary>
            Used when a AuthorizationRequest is unopened.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.Opened">
            <summary>
            Used when a AuthorizationRequest is opened.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.Accepted">
            <summary>
            Used when a AuthorizationRequest is accepted.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.Rejected">
            <summary>
            Used when a AuthorizationRequest is rejected.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus.Created">
            <summary>
            Used when a AuthorizationRequest is created.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.AccessManagementResource">
            <summary>
            Entity holding resource information for storing in AccessManagement
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AccessManagementResource.ResourceId">
            <summary>
            Primary key created when inserted in Access management
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AccessManagementResource.ResourceRegistryId">
            <summary>
            The resource registry id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AccessManagementResource.ResourceType">
            <summary>
            The type of resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AccessManagementResource.Created">
            <summary>
            When the resource was created in access management
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AccessManagementResource.Modified">
            <summary>
            The last time modified in access management
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.AttributeMatch">
            <summary>
            This model describes a pair of AttributeId and AttributeValue for use in matching in XACML policies, for instance a resource, a user, a party or an action.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="id">type</param>
            <param name="value">value</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AttributeMatch.Id">
            <summary>
            Gets or sets the attribute id for the match
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AttributeMatch.Value">
            <summary>
            Gets or sets the attribute value for the match
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.Equals(Altinn.AccessManagement.Core.Models.AttributeMatch,Altinn.AccessManagement.Core.Models.AttributeMatch)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.GetHashCode(Altinn.AccessManagement.Core.Models.AttributeMatch)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AttributeMatch.ToString">
            <summary>
            String representation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Authentication.DefaultRight">
            <summary>
            DTO for a Default Right on a Registered System
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.DefaultRight.Resource">
            <summary>
            The list of resources at the Service Provider which the Right is for.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Authentication.SystemUser">
            <summary>
            The model of the System User response given in the CRUD API in SystemUserController.cs
            This model will be exchanged between this Authentication component, the PostGress db and the BFF for the Frontend.
            The BFF will provide a tailored DTO to the Frontend.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.Id">
            <summary>
            GUID created by the "real" Authentication Component
            When the Frontend send a request for the creation of a new SystemUser the Id is null
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.IntegrationTitle">
            <summary>
            The Title is by default the same as the System's Display Name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.SystemId">
            <summary>
            Identifier for off the shelf systems, registered in the SystemRegister db.
            Should be human readable (instead of a GUID) and unique string without whitespace.                
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.ProductName">
            <summary>
            Identifier for off the shelf systems, registered in the SystemRegister db.
            Should be human readable (instead of a GUID) and unique string without whitespace.                
            To be deprecated, use the systemId field going forward, it contains the same value.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.SystemInternalId">
            <summary>
            The underlying identifier for the System for persistance in the db.        
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.PartyId">
            <summary>
            The PartyID identifies the end-user Organisation, and is fetched from the login Context and
            user party serivces
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.ReporteeOrgNo">
            <summary>
            The Organization Number for the end-user as it is stored in ER Registry        
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.Created">
            <summary>
            Nice to have for debugging and logging.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.IsDeleted">
            <summary>
            False by default, if a SystemUser is deleted in the API,
            it is marked as IsDeleted ("tombstoned") rather than actually deleted
            from the database. This is to avoid complications with cascade delete,
            and the need to maintain consistent logging, and possible compliance rules.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.SupplierName">
            <summary>
            The name of the Supplier of the Product used in this Integration.
            In later phases, it will be possible to use non-supplier based Products, in which case the ClientId property should be filled out.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Authentication.SystemUser.SupplierOrgNo">
            <summary>
            The organization number for the Supplier of the Product 
            In later phases, it will be possible to use non-supplier based Products, in which case the ClientId property should be filled out.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource">
            <summary>
            Model definition for a resource on an authorization request
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource.ServiceCode">
            <summary>
             Gets or sets The ServiceCode that request need 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource.ServiceEditionCode">
            <summary>
             Gets or sets The ServiceEditionCode that request need 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource.AltinnAppId">
            <summary>
             Gets or sets The AltinnAppId that request need 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource.Operations">
            <summary>
             Gets or sets The OperationType that request need 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizationRequestResource.Metadata">
            <summary>
             Gets or sets The Metadata that request need 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.AuthorizedPartiesResult">
            <summary>
            Wrapper model for the response from a AuthorizedParties lookup request
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedPartiesResult.AuthorizedParties">
            <summary>
            The list of authorized parties
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.AuthorizedParty">
            <summary>
            Model representing an authorized party, meaning a party for which a user has been authorized for one or more rights (either directly or through role(s), rightspackage
            Used in new implementation of what has previously been named ReporteeList in Altinn 2.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AuthorizedParty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.AuthorizedParty"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AuthorizedParty.#ctor(Altinn.Platform.Register.Models.Party,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.AuthorizedParty"/> class based on a <see cref="T:Altinn.Platform.Register.Models.Party"/> class.
            </summary>
            <param name="party">Party model from registry</param>
            <param name="includeSubunits">Whether model should also build list of subunits if any exists</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AuthorizedParty.#ctor(Altinn.AccessManagement.Core.Models.SblAuthorizedParty,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.AuthorizedParty"/> class based on a <see cref="T:Altinn.AccessManagement.Core.Models.SblAuthorizedParty"/> class.
            </summary>
            <param name="sblAuthorizedParty">Authorized Party model from Altinn 2 SBL Bridge</param>
            <param name="includeSubunits">Whether model should also build list of subunits if any exists</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.PartyUuid">
            <summary>
            Gets or sets the universally unique identifier of the party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.Name">
            <summary>
            Gets or sets the name of the party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.OrganizationNumber">
            <summary>
            Gets the organization number if the party is an organization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.PersonId">
            <summary>
            Gets the national identity number if the party is a person
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.PartyId">
            <summary>
            Gets or sets the party id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.Type">
            <summary>
            Gets or sets the type of party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.UnitType">
            <summary>
            Gets or sets the unit type if the party is an organization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.IsDeleted">
            <summary>
            Gets or sets whether this party is marked as deleted in the Central Coordinating Register for Legal Entities
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.OnlyHierarchyElementWithNoAccess">
            <summary>
            Gets or sets a value indicating whether the party is only included as a hierarchy element without any access. Meaning a main unit where the authorized subject only have access to one or more of the subunits.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.AuthorizedResources">
            <summary>
            Gets or sets a collection of all resource identifier the authorized subject has some access to on behalf of this party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.AuthorizedRoles">
            <summary>
            Gets or sets a collection of all rolecodes for roles from either Enhetsregisteret or Altinn 2 which the authorized subject has been authorized for on behalf of this party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.AuthorizedParty.Subunits">
            <summary>
            Gets or sets a set of subunits of this party, which the authorized subject also has some access to.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.AuthorizedParty.EnrichWithResourceAccess(System.String)">
            <summary>
            Enriches this authorized party and any subunits with the list of authorized resources
            </summary>
            <param name="resourceId">The list of resource IDs to add to the authorized party (and any subunits) list of authorized resources</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.BaseAttribute">
            <summary>
            This model describes a an Attribute consisting of an Attribute Type and Attribute Value which can also be represented as a Urn by combining the properties as '{type}:{value}'
            It's used both for external API input/output but also internally for working with attributes and matching to XACML-attributes used in policies, indentifying for instance a resource, a user, a party or an action.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.BaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.BaseAttribute"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.BaseAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.BaseAttribute"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.BaseAttribute.#ctor(Altinn.AccessManagement.Enums.UuidType,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.BaseAttribute"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.BaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.BaseAttribute"/> class.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.BaseAttribute.Type">
            <summary>
            Gets or sets the attribute id for the match
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.BaseAttribute.Value">
            <summary>
            Gets or sets the attribute value for the match
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.BaseAttribute.Urn">
            <summary>
            Gets or sets the attribute value for the match
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Delegation">
            <summary>
            An enriched delegation model describing a delegation of a resource between two parties. Combines information from <see cref="T:Altinn.AccessManagement.Core.Models.DelegationChange"/>, <see cref="T:Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource"/>
            as well as Party information for both the offering and receiving parties.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.OfferedByPartyId">
            <summary>
            Gets or sets the party id of the party which have offered the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.OfferedByName">
            <summary>
            Gets or sets the name of the party which have offered the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.OfferedByOrganizationNumber">
            <summary>
            Gets or sets the organization number of the party which have offered the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.CoveredByPartyId">
            <summary>
            Gets or sets the party id of the party which have received the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.CoveredByName">
            <summary>
            Gets or sets the name of the party which have received the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.CoveredByOrganizationNumber">
            <summary>
            Gets or sets the organization number of the party which have received the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.PerformedByUserId">
            <summary>
            Gets or sets the user id of the user that performed the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.PerformedByPartyId">
            <summary>
            Gets or sets the party id of the party that performed the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.Created">
            <summary>
            Gets or sets the date and timestamp the delegation was performed
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.ResourceId">
            <summary>
            Gets or sets the resource id of the resource registered in the resource registry which have been delegated
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.ResourceType">
            <summary>
            Gets or sets the type of resource which have been delegated
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.ResourceTitle">
            <summary>
            Dictionary of the title of resource in all registered languages
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.ResourceReferences">
            <summary>
            List of reference values associated with the resource. This can be service codes from Altinn II, Delegation Scheme Id from Altinn II, Scopes from Maskinporten or just an external URL.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.HasCompetentAuthority">
            <summary>
            HasCompetentAuthority
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.Description">
            <summary>
            Dictionary of the description of the resource in all registered languages
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Delegation.RightDescription">
            <summary>
            Dictionary of the delegation description of the resource in all registered languages. THe delegation description gives additional information about what the consequence and rights the recipient of a delegation will receive.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationActionResult">
            <summary>
            Response model for the result of a delegation or revoke of one or more rights between two parties.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationActionResult.From">
            <summary>
            Gets or sets a set of attribute id and attribute value for the party offering rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationActionResult.To">
            <summary>
            Gets or sets a set of attribute id and attribute value for the party receiving rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationActionResult.Rights">
            <summary>
            Gets or sets a list of rights
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChange">
            <summary>
            This model describes a delegation change as stored in the Authorization postgre DelegationChanges table.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.DelegationChangeId">
            <summary>
            Gets or sets the delegation change id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.ResourceRegistryDelegationChangeId">
            <summary>
            Gets or sets the resource registry delegation change id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.DelegationChangeType">
            <summary>
            Gets or sets the delegation change type
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.ResourceId">
            <summary>
            Gets or sets the resource id.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.ResourceType">
            <summary>
            Gets or sets the resourcetype.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.OfferedByPartyId">
            <summary>
            Gets or sets the offeredbypartyid, refering to the party id of the user or organization offering the delegation.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.FromUuid">
            <summary>
            The uuid of the party the right is on behalf of
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.FromUuidType">
            <summary>
            The type of party the right is on behalf of (Person, Organization, SystemUser)
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByPartyId">
            <summary>
            Gets or sets the coveredbypartyid, refering to the party id of the organization having received the delegation. Otherwise Null if the recipient is a user.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.CoveredByUserId">
            <summary>
            Gets or sets the coveredbyuserid, refering to the user id of the user having received the delegation. Otherwise Null if the recipient is an organization.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.ToUuid">
            <summary>
            The uuid of the party holding the right
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.ToUuidType">
            <summary>
            The type of party holding the right
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByUserId">
            <summary>
            Gets or sets the user id of the user that performed the delegation change (either added or removed rules to the policy, or deleted it entirely).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByPartyId">
            <summary>
            Gets or sets the party id of the user that performed the delegation change (either added or removed rules to the policy, or deleted it entirely).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByUuid">
            <summary>
            The uuid of the party that performed the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.PerformedByUuidType">
            <summary>
            The type of the party that performed the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.BlobStoragePolicyPath">
            <summary>
            Gets or sets blobstoragepolicypath.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.BlobStorageVersionId">
            <summary>
            Gets or sets the blobstorage versionid
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChange.Created">
            <summary>
            Gets or sets the created date and timestamp for the delegation change
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeEvent">
            <summary>
            Internal model for a delegation change event used between Altinn.Platform.Authorization and this function app
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeEvent.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeEvent.DelegationChange">
            <summary>
            Gets or sets the delegation change.
            </summary>
            <value>
            The delegation change.
            </value>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeEventList">
            <summary>
            The internal wrapper model for expressing a list of delegation change events sent from Altinn.Platform.Authorization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeEventList.DelegationChangeEvents">
            <summary>
            Gets or sets the delegation change events.
            </summary>
            <value>
            The delegation change events.
            </value>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeEventType">
            <summary>
            The type of delegation change event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeEventType.Undefined">
            <summary>
            Undefined default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeEventType.Grant">
            <summary>
            Grant event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeEventType.Revoke">
            <summary>
            Revoke event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeEventType.RevokeLast">
            <summary>
            Revoke last right event
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeInput">
            <summary>
            Contains attribute match info about user, reportee, resource and resourceMatchType that's being used to check all delegation changes for the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeInput.Subject">
            <summary>
            Id and value of the subject getting delegation changes info
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeInput.Party">
            <summary>
            Id and value of party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeInput.Resource">
            <summary>
            Gets the Resource's id
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeList">
            <summary>
            Response model for the list of delegation changes for a resource/app that handles validation errors
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationChangeList.DelegationChanges">
            <summary>
            The list of delegation changes for a resource/app
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationChangeType">
            <summary>
            The type of delegation change
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeType.Undefined">
            <summary>
            Undefined default value
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeType.Grant">
            <summary>
            Grant event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeType.Revoke">
            <summary>
            Revoke event
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.DelegationChangeType.RevokeLast">
            <summary>
            Revoke last right event
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationCheckResponse">
            <summary>
            Response model for the result of a delegation status check, for which rights a user is able to delegate between two parties.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationCheckResponse.From">
            <summary>
            Gets or sets a set of attribute id and attribute value for the party offering rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationCheckResponse.RightDelegationCheckResults">
            <summary>
            Gets or sets a list of right delegation status models
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationLookup">
            <summary>
            Model for looking up, identify or represent a delegation of one or more rights delegated from one party/organization/user to another party/organization/user
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationLookup.From">
            <summary>
            Gets or sets a set of attribute id and attribute value for the party offering rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationLookup.To">
            <summary>
            Gets or sets a set of attribute id and attribute value for the party receiving rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationLookup.Rights">
            <summary>
            Gets or sets a list of rights
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationRequest">
            <summary>
            This element describe a public class DelegationRequest
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.Guid">
            <summary>
             Gets or sets the Guid of a valid DelegationRequest
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.RequestStatus">
            <summary>
            Gets or sets the status of an AuthorizationRequest
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.CoveredBy">
            <summary>
             Gets or sets The OrgID/personalID for who gets the delegation when the delegationRequest is approved
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.CoveredByName">
            <summary>
             Gets or sets The OrgID/personalID for who gets the delegation when the delegationRequest is approved
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.OfferedBy">
            <summary>
             Gets or sets The personalID who offer the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.OfferedByName">
            <summary>
             Gets or sets The name who offer the delegation
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.RedirectUrl">
            <summary>
             Gets or sets The RedirectUrl is a link that sends the user back to the external website after he/she made an operation in Altinn
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.RequestMessage">
            <summary>
             Gets or sets the RequestMessage if any
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.KeepSessionAlive">
            <summary>
             Gets or sets a value indicating whether the session should be kept alive after a redirect
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.Created">
            <summary>
             Gets or sets the date of when the request was created
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.LastChanged">
            <summary>
             Gets or sets the date of when the request was last changed
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequest.RequestResources">
            <summary>
             Gets or sets The RequestServices are all information of services which the DelegationRequest need 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.DelegationRequests">
            <summary>
            Represents a list of DelegationRequests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.DelegationRequests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.DelegationRequests"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.DelegationRequests.#ctor(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Models.DelegationRequests"/> class.
            </summary>
            <param name="list">List of consents</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.DelegationRequests.ContinuationToken">
            <summary>
            Gets or sets the Continuation Token used for pagination and
            sequential retrieval. The returned value consists of the
            lastChanged timestamp of the last consent element returned and the
            ID. When this token is sent as an  argument in the continue
            parameter, the request will limit the responses only to consents
            that are  changed after this time. The ID will prevent endless
            loops if many elements have the same timestamp.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Detail">
            <summary>
            This model describes a detail while providing a specific code for identifying a specific recurring detail and parameters needed for context and understanding.
            Can be extended for specific detailing/metadata/informational purposes.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Detail.Code">
            <summary>
            Gets or sets the detail identifier code
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Detail.Description">
            <summary>
            Gets or sets a human readable (english) description of the detail
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Detail.Parameters">
            <summary>
            Gets or sets a dictionary of parameters which is related to the detail code and description
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ListObjectResult">
            <summary>
            A list object is a wrapper around a list of items to allow for the API to be
            extended in the future without breaking backwards compatibility.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ListObjectResult`1">
            <summary>
            A concrete list object.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Items">The items.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.ListObjectResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            A concrete list object.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Items">The items.</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ListObjectResult`1.Items">
            <summary>The items.</summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.OperationTypeExternal">
            <summary>
            Enum definition of the AltinnII external operation types
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.OperationTypeExternal.Read">
            <summary>
            Operation type is Read operation in ServiceEngine database
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.OperationTypeExternal.Write">
            <summary>
            Operation Type is Write in ServiceEngine database.
            This represents Create, FillIn, SendIn, SendBack and Delete actions.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.OperationTypeExternal.Sign">
            <summary>
            Operation Type is Sign in ServiceEngine database .
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.OperationTypeExternal.Access">
            <summary>
            Operation used for Link services (at least for now) which are external services
            which only require a single general operation 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.PaginatedResult">
            <summary>
            A paginated <see cref="T:Altinn.AccessManagement.Core.Models.ListObjectResult`1"/>.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.PaginatedResult.Create``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Create a new <see cref="T:Altinn.AccessManagement.Core.Models.PaginatedResult`1"/>.
            </summary>
            <typeparam name="T">The type of items</typeparam>
            <param name="items">The items</param>
            <param name="next">The optional next-link</param>
            <returns>A new <see cref="T:Altinn.AccessManagement.Core.Models.PaginatedResult`1"/>.</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.PaginatedResult`1">
            <summary>
            A paginated <see cref="T:Altinn.AccessManagement.Core.Models.ListObjectResult`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Links">Pagination links.</param>
            <param name="Items">The items.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.PaginatedResult`1.#ctor(Altinn.AccessManagement.Core.Models.PaginatedResultLinks,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            A paginated <see cref="T:Altinn.AccessManagement.Core.Models.ListObjectResult`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Links">Pagination links.</param>
            <param name="Items">The items.</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PaginatedResult`1.Links">
            <summary>Pagination links.</summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.PaginatedResultLinks">
            <summary>
            Pagination links.
            </summary>
            <param name="Next">Link to the next page of items (if any).</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.PaginatedResultLinks.#ctor(System.String)">
            <summary>
            Pagination links.
            </summary>
            <param name="Next">Link to the next page of items (if any).</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PaginatedResultLinks.Next">
            <summary>Link to the next page of items (if any).</summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.PolicyAttributeMatch">
            <summary>
            This model extends the AttributeMatch model with a boolean value indicating whether the ABAC found a match for the attribute
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PolicyAttributeMatch.MatchFound">
            <summary>
            Gets or sets a value indicating whether the ABAC found a match for the attribute
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.PolicyMatch">
            <summary>
            This model describes a single rule in a delegated policy
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PolicyMatch.OfferedByPartyId">
            <summary>
            Gets or sets the unique identifier for a specific party for which the requested rule in the policy applies
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PolicyMatch.Resource">
            <summary>
            Gets or sets resource match which uniquely identifies the resource this policy applies to.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.PolicyMatch.CoveredBy">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the coveredby id
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup">
            <summary>
            Input model for internal UserProfile lookup requests, where one of the lookup identifiers available must be set for performing the lookup request:
                UserId (from Altinn 2 Authn UserProfile)
                Username (from Altinn 2 Authn UserProfile)
                SSN/Dnr (from Freg)
                Uuid (from Altinn 2 Party/UserProfile implementation will be added later)
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup.UserId">
            <summary>
            Gets or sets the users UserId if the lookup is to be performed based on this identifier
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup.Username">
            <summary>
            Gets or sets the users Username if the lookup is to be performed based on this identifier
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup.Ssn">
            <summary>
            Gets or sets the users social security number or d-number from Folkeregisteret if the lookup is to be performed based on this identifier
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup.UserUuid">
            <summary>
            Gets or sets the user uuid if the lookup is to be performed based on this identifier
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RequestToDelete">
            <summary>
            This model describes a list of rules to delete from a single policyfile
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RequestToDelete.RuleIds">
            <summary>
            Gets or sets a list of unique identifier for specific rules within a policy.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RequestToDelete.DeletedByUserId">
            <summary>
            Gets or sets the user id of the user who performed the deletion.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RequestToDelete.PolicyMatch">
            <summary>
            Gets or sets the policy to delete from
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.RequestToDelete.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Method validating the model
            </summary>
            <param name="validationContext">The context to validate for</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RequestToDeleteRuleList">
            <summary>
            Class to wrap a list of RequestToDelete
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.RequestToDeleteRuleList.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Method validating the model
            </summary>
            <param name="validationContext">The context to validate for</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RequestToDeletePolicyList">
            <summary>
            Class to wrap a list of RequestToDelete
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.RequestToDeletePolicyList.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Method validating the model
            </summary>
            <param name="validationContext">The context to validate for</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourceAction">
            <summary>
            This model describes an action that may be used in a rule describing a right.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceAction.Match">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the specific action, from the original app policy
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceAction.Title">
            <summary>
            Gets or sets a title for the action
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceAction.Description">
            <summary>
            Gets or sets a description of the action.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourceAction.RoleGrants">
            <summary>
            Gets or sets which roles are granted access to this action on this resource
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ResourcePolicy">
            <summary>
            This model describes the actions that can be performed for a particular resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourcePolicy.Description">
            <summary>
            Gets or sets a description of the resource policy.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourcePolicy.Title">
            <summary>
            Gets or sets a title for the resource policy to be used for displaying the resource in AltinnII.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourcePolicy.Actions">
            <summary>
            Gets or sets the actions associcated with this particular resource including which roles have been granted access to it
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ResourcePolicy.Resource">
            <summary>
            Gets or sets the list of resource matches which together uniquely identifies the resource in the app policy, e.g. org, app and/or tasks, events etc.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Right">
            <summary>
            This model describes a single right
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.RightKey">
            <summary>
            Gets or sets the right key
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.Resource">
            <summary>
            Gets or sets the list of resource matches which uniquely identifies the resource this right applies to.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.Action">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for a specific action, to identify the action this right applies to
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.HasPermit">
            <summary>
            Gets or sets a value indicating whether the user or party has the right
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.CanDelegate">
            <summary>
            Gets or sets a value indicating whether the user or party is permitted to delegate the right to others
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Right.RightSources">
            <summary>
            Gets or sets the set of identified sources providing the right
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.Right.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Models.Right.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightDelegation">
            <summary>
            Describes the delegation result for a given single right.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegation.From">
            <summary>
            Specifies who have delegated permissions 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegation.To">
            <summary>
            Receiver of the permissions
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegation.Resource">
            <summary>
            Specifies the permissions
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult">
            <summary>
            Response model describing the delegation status for a given single right, whether the authenticated user is able to delegate the right or not on behalf of the from part, or whether the to recipient party already have the right.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult.RightKey">
            <summary>
            Gets or sets the right key
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult.Resource">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for identifying the resource the rights 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult.Action">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for a specific action, to identify the action this right applies to
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult.Status">
            <summary>
            Gets or sets a value indicating whether the right is delegable or not
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationCheckResult.Details">
            <summary>
            Gets or sets a list of details describing the reasons why or why not the right is valid in the current user and reportee party context
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightDelegationResult">
            <summary>
            Response model describing the delegation result for a given single right, whether the authenticated user was able to delegate the right or not on behalf of the from part.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationResult.RightKey">
            <summary>
            Gets or sets the right key
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationResult.Resource">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for identifying the resource which the right provides access to
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationResult.Action">
            <summary>
            Gets or sets the Attribute Id and Attribute Value identifying action the right gives access to perform on the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationResult.Status">
            <summary>
            Gets or sets a value indicating whether the right was successfully delegated or not
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightDelegationResult.Details">
            <summary>
            Gets or sets a list of details describing the reason(s) behind the status (if any can be provided)
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest">
            <summary>
            Request model for a list of all rights for a specific resource, that a user can delegate from a given reportee to a given recipient.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest.From">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the reportee party to delegate rights on behalf of
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest.Resource">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for identifying the resource of the rights to be checked
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightSource">
            <summary>
            This model describes a source from where a right exist for a user or party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.RightSourceType">
            <summary>
            Gets or sets the set of type of source this right originated from (Role, AccessGroup, AppDelegation, ResourceRegistryDelegation etc.)
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.PolicyId">
            <summary>
            Gets or sets the unique identifier for the specific policy the right originates (Output only).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.PolicyVersion">
            <summary>
            Gets or sets the version of the policy which the right originates (Output only).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.RuleId">
            <summary>
            Gets or sets the unique identifier for the specific rule within the policy the right originates (Output only).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.OfferedByPartyId">
            <summary>
            Gets or sets the party offering the rights to the receiving (CoveredBy) entity.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.HasPermit">
            <summary>
            Gets or sets a value indicating whether the user or party has the right
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.CanDelegate">
            <summary>
            Gets or sets a value indicating whether the user or party is permitted to delegate the right to others
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.MinimumAuthenticationLevel">
            <summary>
            Gets or sets a value specifying the minimum required authentication level
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.UserSubjects">
            <summary>
            Gets or sets the list of subject matches the user has.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightSource.PolicySubjects">
            <summary>
            Gets or sets the list of subject matches which provides access to this right in the resource policy
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RightsQuery">
            <summary>
            Queries for a list of all rights between two parties for a specific resource.
            If coveredby user has any key roles, those party ids should be included in the query to have the 3.0 PIP lookup rights inheirited through those as well.
            If offeredby is a sub unit, parenty party id should be supplied to include inheirited rights received through the main unit.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightsQuery.From">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the entity having offered rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightsQuery.To">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the entity having received rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RightsQuery.Resource">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for identifying the resource the rights 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RoleGrant">
            <summary>
            This model describes a role which a particular action is given to.
            example: RoleGrant { "RoleTypeCode": "DAGL", "IsDelegable": true }
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RoleGrant.RoleTypeCode">
            <summary>
            Gets or sets role type code the grant is for.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RoleGrant.IsDelegable">
            <summary>
            Gets or sets a value indicating whether having the specified role also permits the user to delegate the right specified by the ResourceAction to other recipients (if the receiver of the role also have administrative rights).
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.Rule">
            <summary>
            This model describes a single rule in a delegated policy
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.RuleId">
            <summary>
            Gets or sets the unique identifier for a specific rule within a policy (Output only).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.Type">
            <summary>
            Gets or sets the type of rule this is and why it is relevant for a given coveredby (recipient). Only part of output model when querying rules.
            Policies may apply(grant rights) in four different ways:
            1. Direct delegations. This rule applies given directly to the recipient.
            2. Inherited via key role. This rule grants a right given to a party where the recipient has a key role, thus inheriting all rights given to the party.
            3. Inherited as subunit. If offeredby is a subunit, rights given from its parent to the recipient also applies to the subunit.
            4. Inherited as subunit via keyrole.If offeredby is a subunit, rights given from its parent to a party in which the recipient has a key role also applies to the subunit.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.CreatedSuccessfully">
            <summary>
            Gets or sets the a value indicating whered the result of the create operation finished successfully (Output only).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.DelegatedByUserId">
            <summary>
            Gets or sets the user id of the user who performed the delegation. When creating new rules, this is supplied to indicate who performed the delegation, allowing the 3.0 PAP to determine whether or not the user is allowed to do so and to log accordingly. Only part of input model when adding single rules.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.DelegatedByPartyId">
            <summary>
            Gets or sets the party id of the entity who performed the delegation. When creating new rules, this is supplied to indicate who performed the delegation, allowing the 3.0 PAP to determine whether or not the user is allowed to do so and to log accordingly. Only part of input model when adding single rules.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.DelegatedDateTime">
            <summary>
            Datetime used to override now if the Rule is imported from a source with existing Delegation information
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.OfferedByPartyId">
            <summary>
            Gets or sets the party offering the rights to the receiving (CoveredBy) entity.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.OfferedByPartyUuid">
            <summary>
            Gets or sets the uuid of the party offering the rights to the receiving (CoveredBy) entity.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.OfferedByPartyType">
            <summary>
            Gets or sets the type of the party offering the rights to the receiving (CoveredBy) entity.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.CoveredBy">
            <summary>
            Gets or sets the party receiving (covered by) the rights from the delegating (OfferedByPartyId) entity
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.Resource">
            <summary>
            Gets or sets the list of resource matches which uniquely identifies the resource this rule applies to.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.Rule.Action">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for a specific action, to identify the action from the original App Policy
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RuleQuery">
            <summary>
            Queries for a list of already delegated rules from the supplied offeredby for the supplied app. If coveredby
            has any key roles, those party ids can be included in the query to have the 3.0 PIP lookup those as well.
            If offeredby is a sub unit, parenty party id can be supplied to include rules given from that party as well.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RuleQuery.ParentPartyId">
            <summary>
            Gets or sets the unique identifier for a the parent party id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RuleQuery.KeyRolePartyIds">
            <summary>
            Gets or sets the list of key role party ids
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RuleQuery.OfferedByPartyId">
            <summary>
            Gets or sets the unique identifier for a specific party for which the requested rule in the policy applies
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RuleQuery.Resources">
            <summary>
            Gets or sets resource match which uniquely identifies the resource this policy applies to.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.RuleQuery.CoveredBy">
            <summary>
            Gets or sets the set of Attribute Id and Attribute Value for the coveredby id
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.RuleType">
            <summary>
            This model defines the different types of rules and why it is relevant for a given coveredby (recipient).
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RuleType.None">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RuleType.DirectlyDelegated">
            <summary>
            Direct delegations. The policy includes rights given directly to the recipient.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RuleType.InheritedViaKeyRole">
            <summary>
            Inherited via key role. The policy includes rights given to a party where the recipient has a key role, thus inheriting all rights given to the party.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RuleType.InheritedAsSubunit">
            <summary>
            Inherited as subunit. If offeredby is a subunit, rights given from its parent to the recipient also applies to the subunit.
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Core.Models.RuleType.InheritedAsSubunitViaKeyrole">
            <summary>
            Inherited as subunit via keyrole. If offeredby is a subunit, rights given from its parent to a party in which the recipient has a key role also applies to the subunit.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SblBridge.MainUnit">
            <summary>
            Model returned by SBL Bridge partyparents endpoint, describing a main unit (hovedenhet).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.MainUnit.PartyId">
            <summary>
            Gets or sets the PartyId of the main unit
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.MainUnit.SubunitPartyId">
            <summary>
            Gets or sets the PartyId of the subunit
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.MainUnit.OrganizationNumber">
            <summary>
            Gets or sets the organization number of the main unit
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.MainUnit.OrganizationName">
            <summary>
            Gets or sets the name of the main unit
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SblBridge.MainUnitQuery">
            <summary>
            Input Model used by SBL Bridge partyparents endpoint, for listing the subunit partyIds to retrieve mainunit information for.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.MainUnitQuery.PartyIds">
            <summary>
            Gets or sets the PartyId of the main unit
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SblBridge.SblValidationProblemResponse">
            <summary>
            Model for validation problem error messages from SBL Bridge
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.SblValidationProblemResponse.Message">
            <summary>
            Gets or sets the error message
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblBridge.SblValidationProblemResponse.ModelState">
            <summary>
            Gets or sets the model state
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SblAuthorizedParty">
            <summary>
            Model representing an authorized party as returned by the SBL Bridge, meaning a party for which a user has been authorized for one or more rights or role(s) in Altinn 2
            Used in new implementation of what has previously been named ReporteeList in Altinn 2.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.PartyId">
            <summary>
            Gets or sets the ID of the party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.PartyUuid">
            <summary>
            Gets or sets the UUID of the party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.PartyTypeName">
            <summary>
            Gets or sets the type of party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.OrgNumber">
            <summary>
            Gets the parties org number
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.SSN">
            <summary>
            Gets the parties ssn of the party is a person
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.UnitType">
            <summary>
            Gets or sets the UnitType if the party is an organization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.Name">
            <summary>
            Gets or sets the name of the party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.IsDeleted">
            <summary>
            Gets or sets whether this party is marked as deleted in Enhetsregisteret
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.OnlyHierarchyElementWithNoAccess">
            <summary>
            Gets or sets a value indicating whether the party is only for showing the hierarchy (a parent unit with no access)
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.AuthorizedRoles">
            <summary>
            Gets or sets a collection of all rolecodes for roles from either Enhetsregisteret or Altinn 2 which the authorized actor has been authorized for, on behalf of this party
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblAuthorizedParty.ChildParties">
            <summary>
            Gets or sets the value of ChildParties
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SblRightDelegationRequest">
            <summary>
            Model for delegation of rights to SBL Bridge, identify or represent a delegation of one or more rights for an Altinn 2 service to be delegated to a party or user
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblRightDelegationRequest.To">
            <summary>
            Gets or sets the attribute id and attribute value for the user or party receiving rights
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SblRightDelegationRequest.Rights">
            <summary>
            Gets or sets a list of rights
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.SimpleDelegationChange">
            <summary>
            This model describes a delegation change as stored in the PostgreSQL-database Authorization in the table DelegatedPolicy.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.DelegationChangeId">
            <summary>
            Gets or sets the delegation change id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.AltinnAppId">
            <summary>
            Gets or sets the altinnappid. E.g. skd/skattemelding
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.OfferedByPartyId">
            <summary>
            Gets or sets the offeredbypartyid, refering to the party id of the user or organization offering the delegation.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.CoveredByPartyId">
            <summary>
            Gets or sets the coveredbypartyid, refering to the party id of the organization having received the delegation. Otherwise Null if the recipient is a user.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.CoveredByUserId">
            <summary>
            Gets or sets the coveredbyuserid, refering to the user id of the user having received the delegation. Otherwise Null if the recipient is an organization.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.PerformedByUserId">
            <summary>
            Gets or sets the user id of the user that performed the delegation change (either added or removed rules to the policy, or deleted it entirely).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.PerformedByPartyId">
            <summary>
            Gets or sets the party id of the party that performed the delegation change (either added or removed rules to the policy, or deleted it entirely).
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.SimpleDelegationChange.Created">
            <summary>
            Gets or sets the created date and timestamp for the delegation change
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Models.ValidationErrorResult">
            <summary>
            Response model for any errors occuring during processing of a model in the core service layer
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ValidationErrorResult.IsValid">
            <summary>
            Gets or sets a value indicating whether the processing was a success i.e. no errors has been added
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Models.ValidationErrorResult.Errors">
            <summary>
            Gets or sets a dictionary of errors occured during processing
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.TooManyFailedLookupsException">
            <summary>
            Represents a situation where a user has performed too many failed lookup requests.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.TooManyFailedLookupsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.TooManyFailedLookupsException"/> class.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.TooManyFailedLookupsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.TooManyFailedLookupsException"/> class.
            </summary>
            <param name="message">The message that descibes the error.</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Extensions.CoreDependencyInjectionExtensions">
            <summary>
            Extension methods for adding access management core services to the dependency injection container.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Extensions.CoreDependencyInjectionExtensions.AddAccessManagementCore(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Extension methods for adding access management core services to the dependency injection container.
            </summary>
            <param name="builder">web application builder</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Extensions.HttpClientExtension">
            <summary>
            This extension is created to make it easy to add a bearer token to a HttpRequests. 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Extensions.HttpClientExtension.PostAsync(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Extension that add authorization header to request
            </summary>
            <param name="httpClient">The HttpClient</param>
            <param name="authorizationToken">the authorization token (jwt)</param>
            <param name="requestUri">The request Uri</param>
            <param name="content">The http content</param>
            <param name="platformAccessToken">The platformAccess tokens</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A HttpResponseMessage</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Extensions.HttpClientExtension.PutAsync(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Extension that add authorization header to request
            </summary>
            <param name="httpClient">The HttpClient</param>
            <param name="authorizationToken">the authorization token (jwt)</param>
            <param name="requestUri">The request Uri</param>
            <param name="content">The http content</param>
            <param name="platformAccessToken">The platformAccess tokens</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A HttpResponseMessage</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Extensions.HttpClientExtension.GetAsync(System.Net.Http.HttpClient,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Extension that add authorization header to request
            </summary>
            <param name="httpClient">The HttpClient</param>
            <param name="authorizationToken">the authorization token (jwt)</param>
            <param name="requestUri">The request Uri</param>
            <param name="platformAccessToken">The platformAccess tokens</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A HttpResponseMessage</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Extensions.HttpClientExtension.DeleteAsync(System.Net.Http.HttpClient,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Extension that add authorization header to request
            </summary>
            <param name="httpClient">The HttpClient</param>
            <param name="authorizationToken">the authorization token (jwt)</param>
            <param name="requestUri">The request Uri</param>
            <param name="platformAccessToken">The platformAccess tokens</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A HttpResponseMessage</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.AuthenticationHelper">
            <summary>
            helper class for authentication
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.AuthenticationHelper.GetUserId(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the users id
            </summary>
            <param name="context">the http context</param>
            <returns>the logged in users id</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.AuthenticationHelper.GetPartyId(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the authenticated user's party id
            </summary>
            <param name="context">the http context</param>
            <returns>the logged in users party id</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.AuthenticationHelper.GetUserAuthenticationLevel(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the users authentication level
            </summary>
            <param name="context">the http context</param>
            <returns>the logged in users authentication level</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.DelegationHelper">
            <summary>
            Delegation helper methods
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.SortRulesByDelegationPolicyPath(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule}@)">
            <summary>
            Sort rules for delegation by delegation policy file path, i.e. Org/App/OfferedBy/CoveredBy
            </summary>
            <param name="rules">The list of rules to be sorted</param>
            <param name="unsortableRules">The list of rules not able to sort by org/app/offeredBy/CoveredBy</param>
            <returns>A dictionary with key being the filepath for the delegation policy file, and value being the list of rules to be written to the delegation policy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetPartyIdFromAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Int32@)">
            <summary>
            Tries to get the PartyId attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if party id is found as the single attribute in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetUuidFromAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Guid@,Altinn.AccessManagement.Enums.UuidType@)">
            <summary>
            Tries to get the Uuid attribute value from a list of AttributeMatch models and specifies which type it finds by setting based on the id in the attribute match
            </summary>
            <returns>The true if party id is found as the single attribute in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetUserIdFromAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Int32@)">
            <summary>
            Trys to get the UserId attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if user id is found as the single attribute in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetOrganizationNumberFromAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String@)">
            <summary>
            Trys to get the organization number attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if organization number is found as the single attribute in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetSocialSecurityNumberAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String@)">
            <summary>
            Trys to get the social security number attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if social security number is found as the single attribute in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetSocialSecurityNumberAndLastNameAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String@,System.String@)">
            <summary>
            Trys to get both social security number and last name attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if both social security number and last name is found as the only attributes in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetUsernameAndLastNameAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String@,System.String@)">
            <summary>
            Trys to get both username and last name attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if both username and last name is found as the only attributes in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetEnterpriseUserNameAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String@)">
            <summary>
            Trys to get enterprise username attribute value from a list of AttributeMatch models
            </summary>
            <returns>The true if both enterprise username is found as the only attributes in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetSingleAttributeMatchValue(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String,System.String@)">
            <summary>
            Trys to get an single specific attribute value from a list of AttributeMatch models, if it's the only attribute in the list
            </summary>
            <returns>The true if person uuid is found as the only attributes in the collection</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.CheckResourceIsInListOfDefaultRights(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Authentication.DefaultRight},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Check if i given AttributeMatch list is in a list of defaultRights so it is valid for delegation to SystemUsers
            </summary>
            <param name="defaultRights">List of default rights to check if resource is included</param>
            <param name="resource">The rights to delegate to check for existence in list of defaultRights</param>
            <returns>true if all the rights is valid for in the given defaultRights list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.CheckAllPartsInDefaultRightsIsInActualDelegatedResource(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Compares a list of Resource details from allowed default rights with the list of Resource details in the actual delegation so all of the defined resource details
            in the allowed resource must be present in the actual delegation but the actual delegation can have more details narrowing the actual delegation more granulated than
            the allowed resource but not the other way round
            </summary>
            <param name="allowedResource">List describing the allowed resource</param>
            <param name="actualResource">List describing the actual delegation</param>
            <returns>True if the delegation is allowed false if not.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetCoveredByFromMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Guid}@,Altinn.AccessManagement.Enums.UuidType@)">
            <summary>
            Gets a int representation of the CoveredByUserId and CoverdByPartyId from an AttributeMatch list.
            This works under the asumptions that any valid search for å valid policy contains a CoveredBy and this must be in the form
            of a PartyId or a UserId. So any valid search containing a PartyId should not contain a USerId and vice versa.
            If the search does not contain any of those this should be considered as an invalid search.
            </summary>
            <param name="match">the list to fetch coveredBy from</param>
            <param name="coveredByUserId">The value for coveredByUserId or null if not present</param>
            <param name="coveredByPartyId">The value for coveredByPartyId or null if not present</param>
            <param name="coveredByUuid">The uuid of the covered by found in the AttributeMatch list</param>
            <param name="coveredByUuidType">The uuid type of the covered by found in the AttributeMatch list</param>
            <returns>The CoveredByUserId or CoveredByPartyId in the input AttributeMatch list as a string primarily used to create a policy path for fetching a delegated policy file.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetResourceFromAttributeMatch(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the resource attribute values as out params from a Resource specified as a List of AttributeMatches
            </summary>
            <param name="input">The resource to fetch org and app from</param>
            <param name="resourceMatchType">the resource match type</param>
            <param name="resourceId">the resource id. Either a resource registry id or org/app</param>
            <param name="org">the org part of the resource</param>
            <param name="app">the app part of the resource</param>
            <param name="serviceCode">altinn 2 service code</param>
            <param name="serviceEditionCode">altinn 2 service edition code</param>
            <returns>A bool indicating whether params where found</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetDelegationParamsFromRule(Altinn.AccessManagement.Core.Models.Rule,Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType@,System.String@,System.String@,System.String@,System.Int32@,System.Nullable{System.Guid}@,Altinn.AccessManagement.Enums.UuidType@,System.Nullable{System.Guid}@,Altinn.AccessManagement.Enums.UuidType@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.DateTime@)">
            <summary>
            Gets ResourceType, ResourceRegistryId, Org, App, OfferedBy and CoveredBy as out params from a single Rule
            </summary>
            <returns>A bool indicating whether sufficent params where found</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryGetDelegationPolicyPathFromRule(Altinn.AccessManagement.Core.Models.Rule,System.String@)">
            <summary>
            Gets the delegation policy path for a single Rule
            </summary>
            <returns>A bool indicating whether necessary params to build the path where found</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetPolicyCount(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule})">
            <summary>
            Returns the count of unique Policies in a list of Rules
            </summary>
            <param name="rules">List of rules to check how many individual policies exist</param>
            <returns>count of policies</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetRulesCountToDeleteFromRequestToDelete(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RequestToDelete})">
            <summary>
            Returns the count of unique ruleids in a list dele
            </summary>
            <param name="rulesToDelete">List of rules and policies to check how many individual ruleids exist</param>
            <returns>count of rules</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.PolicyContainsMatchingRule(Altinn.Authorization.ABAC.Xacml.XacmlPolicy,Altinn.AccessManagement.Core.Models.Rule)">
            <summary>
            Checks whether the provided XacmlPolicy contains a rule having an identical Resource signature and contains the Action from the rule,
            to be used for checking for duplicate rules in delegation, or that the rule exists in the Apps Xacml policy.
            </summary>
            <returns>A bool</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetAttributeMatchKey(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Gets a string key representing the a list of attributematches
            </summary>
            <returns>A key string</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.SetRuleType(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Int32)">
            <summary>
            Sets the RuleType on each rule in the given list
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.TryParsePartyId(System.String)">
            <summary>
            Extracts the (assumed) party ID from the given 'who' string. 
            </summary>
            <param name="who">
            Who, valid values are an organization number, or a party ID (the letter R followed by 
            the party ID as used in SBL).
            </param>
            <returns>Party ID extracted from 'who', or NULL if 'who' contains no party id.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetReferenceValue(Altinn.AccessManagement.Core.Models.ResourceRegistry.ServiceResource,Altinn.AccessManagement.Core.Models.ResourceRegistry.ReferenceSource,Altinn.AccessManagement.Core.Models.ResourceRegistry.ReferenceType)">
            <summary>
            Gets the reference value for a given resourcereference type
            </summary>
            <param name="resource">resource</param>
            <param name="referenceSource">reference source</param>
            <param name="referenceType">reference type</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetRequestToDeleteResourceRegistryService(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Builds a RequestToDelete request model for revoking all delegated rules for a resource registry service
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetRequestToDeleteResource(System.Int32,System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Int32,Altinn.AccessManagement.Core.Models.AttributeMatch)">
            <summary>
            Builds a RequestToDelete request model for revoking all delegated rules for the resource if delegated between the from and to parties
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetRightDelegationResultsFromRules(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule})">
            <summary>
            Gets the list of Rules as a list of RightDelegationResult
            </summary>
            <param name="rules">The rules output from a delegation to convert</param>
            <returns>List of RightDelegationResult</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.DelegationHelper.GetRightDelegationResultsFromFailedRights(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Right})">
            <summary>
            Gets the list of Rights as a list of RightDelegationResult
            </summary>
            <param name="rights">The rights to convert</param>
            <returns>List of RightDelegationResult</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.Extensions.EnumExtensions">
            <summary>
            Enum Extensions
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.Extensions.EnumExtensions.EnumMemberAttributeValueOrName(System.Enum)">
            <summary>
            Fetch the content of the Value for a defined EnumMemberAttribute or just returns the name if no such declaration exists
            </summary>
            <param name="value">The enum to fetch data from</param>
            <returns>The content of the declared EnumMemberAttribute.Value for the defined enum or just ToString if no EnumMemberAttribute is defined</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.Extensions.GenericExtensions">
            <summary>
            Generic Extensions
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.Extensions.GenericExtensions.SingleToList``1(``0)">
            <summary>
            Creates a new List of objects type, containing just the single object
            </summary>
            <param name="object">The object to create a list of</param>
            <returns>A list containing the object</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.Extensions.StringExtensions">
            <summary>
            Extensions to facilitate sanitization of string values
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.Extensions.StringExtensions.AsFileName(System.String,System.Boolean)">
            <summary>
            Sanitize the input as a file name. 
            </summary>
            <param name="input">The input variable to be sanitized</param>
            <param name="throwExceptionOnInvalidCharacters">Throw exception instead of replacing invalid characters with '-'</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.Extensions.StringExtensions.IsSimilarTo(System.String,System.String)">
            <summary>
            Compare to strings doing a loose compare ignoring case and diacritics
            </summary>
            <param name="text1">First text</param>
            <param name="text2">Second text</param>
            <returns>true if the texts are similar.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove diacritics from a string while normalizing it.
            </summary>
            <param name="text">The text to normalize.</param>
            <returns>The normalized text.</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.JwtTokenUtil">
            <summary>
            This class contains utilities for handling JWT tokens
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.JwtTokenUtil.GetTokenFromContext(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Retrieves JWT token value from HTTP context.
            </summary>
            <param name="context">The HTTP context that contains the token</param>
            <param name="cookieName">The name of the cookie where the token might be stored</param>
            <returns>The JWT token string.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.JwtTokenUtil.AddTokenToRequestHeader(System.Net.Http.HttpClient,System.String)">
            <summary>
            Updates http client by including authorization token in request header
            </summary>
            <param name="client">The HTTP client</param>
            <param name="token">The authorization token</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.PolicyHelper">
            <summary>
            Policy helper methods
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetRolesWithAccess(Altinn.Authorization.ABAC.Xacml.XacmlPolicy)">
            <summary>
            Extracts a list of all roles codes mentioned in a permit rule in a policy. 
            </summary>
            <param name="policy">The policy</param>
            <returns>List of role codes</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetPolicyPath(Altinn.Authorization.ABAC.Xacml.XacmlContextRequest)">
            <summary>
            Finds the correct policy path based on a XacmlContextRequest
            </summary>
            <param name="request">Xacml context request to use for finding the org and app for building the path</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetAltinnAppsPolicyPath(System.String,System.String)">
            <summary>
            Builds the policy path based on org and app names
            </summary>
            <param name="org">The organization name/identifier</param>
            <param name="app">The altinn app name</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetResourceRegistryPolicyPath(System.String)">
            <summary>
            Builds the policy path based on resourceRegistryId
            </summary>
            <param name="resourceRegistryId">The resource registry Id</param>
            <returns>Returns the path to the policyfile.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.CreateRuleFromPolicyAndRuleMatch(Altinn.AccessManagement.Core.Models.RequestToDelete,Altinn.Authorization.ABAC.Xacml.XacmlRule)">
            <summary>
            Creates a Rule representation based on a search and a xacmlRule found in a XacmlPolicyFile based on the search
            </summary>
            <param name="search">The search used to find the correct rule</param>
            <param name="xacmlRule">XacmlRule found by the search param to enrich the result with Action and Resource</param>
            <returns>The created Rule</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetDelegationPolicyPath(Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},Altinn.AccessManagement.Enums.UuidType)">
            <summary>
            Builds the delegation policy path based on org and app names, as well as identifiers for the delegating and receiving entities
            </summary>
            <param name="resourceMatchType">the resource match type</param>
            <param name="resourceId">The id of the resource. Either a resource registry id or org/app</param>
            <param name="org">The organization name/identifier</param>
            <param name="app">The altinn app name</param>
            <param name="offeredBy">The party id of the entity offering the delegated the policy</param>
            <param name="coveredByUserId">The user id of the entity having received the delegated policy or null if party id</param>
            <param name="coveredByPartyId">The party id of the entity having received the delegated policy or null if user id</param>
            <param name="coveredByUuid">the uuid of the coveredBy only valid value when the receiver is a system user</param>
            <param name="uuidType">the type of uuid to set as prefix for the coveredBy</param> 
            <returns>policypath matching input data</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetAltinnAppDelegationPolicyPath(Altinn.AccessManagement.Core.Models.PolicyMatch)">
            <summary>
            Builds the delegation policy path based on input policyMatch
            </summary>
            <param name="policyMatch">param to build policypath from</param>
            <returns>policypath matching input data</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.ParsePolicy(System.IO.Stream)">
            <summary>
            Takes the file IO stream and parses the policy file to a XacmlPolicy <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlPolicy"/>
            </summary>
            <param name="stream">The file IO stream</param>
            <returns>XacmlPolicy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetXmlMemoryStreamFromXacmlPolicy(Altinn.Authorization.ABAC.Xacml.XacmlPolicy)">
            <summary>
            Serializes the XacmlPolicy <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlPolicy"/> to Xml and returns it as a Memory stream
            </summary>
            <param name="policy">The XacmlPolicy model to serialize to a memory stream</param>
            <returns>MemoryStream of the Xml serialized policy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetCoveredByAndType(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},Altinn.AccessManagement.Enums.UuidType)">
            <summary>
            Check the input and returns a vale for CoveredBy and a urn to be used when creating a Attribute match given taht the covered by could be a user, party or SystemUser.
            </summary>
            <param name="coveredByPartyId">PartyId to evaluate for coveredBy</param>
            <param name="coveredByUserId">UserId to evaluate for coveredBy</param>
            <param name="toUuid">Uuid to evaluate for coveredBy</param>
            <param name="toType">The type of covered by to evaluate for type and chose what input to use for covered by value</param>
            <returns>coveredBy value and type of value</returns>
            <exception cref="T:System.ArgumentException">When no valid coveredBy is defined</exception>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.BuildDelegationPolicy(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},Altinn.AccessManagement.Enums.UuidType,System.Collections.Generic.IList{Altinn.AccessManagement.Core.Models.Rule})">
            <summary>
            Builds a XacmlPolicy <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlPolicy"/> representation based on the DelegationPolicy input
            </summary>
            <param name="resourceId">The identifier of the resource, either a resource in the resource registry or altinn app</param>
            <param name="offeredByPartyId">The party id of the entity offering the delegated the policy</param>
            <param name="coveredByPartyId">The party of the entity having received the delegated policy, if the receiving entity is an organization</param>
            <param name="coveredByUserId">The user id of the entity having received the delegated policy, if the receiving entity is a user</param>
            <param name="toUuid">The uuid id of the entity having received the delegated policy</param>
            <param name="toType">The uuid type id of the entity having received the delegated policy</param>
            <param name="rules">The set of rules to be delegated</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.BuildDelegationRule(System.String,System.Int32,System.String,System.String,Altinn.AccessManagement.Core.Models.Rule)">
            <summary>
            Builds a XacmlRule <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlRule"/> representation based on the Rule input
            </summary>
            <param name="resourceId">The identifier of the resource, either a resource in the resource registry or altinn app</param>
            <param name="offeredByPartyId">The party id of the entity offering the delegated the policy</param>
            <param name="coveredBy">The id of the entity having received the delegated policy</param>
            <param name="toType">The type of the entity having received the delegated policy</param>
            <param name="rule">The rule to be delegated</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.BuildDelegationRuleTarget(System.String,System.String,Altinn.AccessManagement.Core.Models.Rule)">
            <summary>
            Builds a XacmlTarget <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlTarget"/> representation based on the Rule input
            </summary>
            <param name="coveredBy">The the entity having received the delegated policy</param>
            <param name="toType">The type of identifier received the delegated policy user, party or system user</param>
            <param name="rule">The rule to be delegated</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.BuildDelegationPolicyMatch(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Builds a XacmlMatch <see cref="T:Altinn.Authorization.ABAC.Xacml.XacmlMatch"/> model
            </summary>
            <param name="function">The compare function type</param>
            <param name="datatype">The attribute data type</param>
            <param name="attributeValue">The attribute value</param>
            <param name="attributeId">The attribute id</param>
            <param name="category">The attribute category</param>
            <param name="mustBePresent">Whether the attribute value must be present</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetResourcePoliciesFromXacmlPolicy(Altinn.Authorization.ABAC.Xacml.XacmlPolicy,System.String)">
            <summary>
            Gets the entire policy as a list of <see cref="T:Altinn.AccessManagement.Core.Models.ResourcePolicy"/>. 
            </summary>
            <param name="policy">The policy</param>
            <param name="language">The language (not in use yet; exactly how is yet to be determined)</param>
            <returns>List of resource policies</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetMinimumAuthenticationLevelFromXacmlPolicy(Altinn.Authorization.ABAC.Xacml.XacmlPolicy)">
            <summary>
            Gets the authentication level requirement from the obligation expression of the XacmlPolicy if specified 
            </summary>
            <param name="policy">The policy</param>
            <returns>Minimum authentication level requirement</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetDecomposedXacmlPolicy(Altinn.Authorization.ABAC.Xacml.XacmlPolicy)">
            <summary>
            Decomposes the provided XacmlPolicy with individual XacmlRules pr. Subject, Resource and Action AllOf combinations
            </summary>
            <param name="policy">The XacmlPolicy to decompose</param>
            <returns>A decomposed XacmlPolicy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetContextAttributes(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},Altinn.Authorization.ABAC.Xacml.XacmlRule)">
            <summary>
            Builds a collection of XacmlContextAttributes which can be used for a decision request, based on a list of subject attributes and an already decomposed XacmlRule (has a single combination of subject, resource and action AllOfs) 
            </summary>
            <param name="subjects">The list of subject values to add to the context (Roles, access groups, delegation recipients etc.)</param>
            <param name="decomposedRule">The decomposed XacmlRule (has a single combination of subject, resource and action AllOfs)</param>
            <returns>A collection of XacmlContextAttributes which can be used for a decision request</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetContextAttributes(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Takes an already decomposed XacmlRule (has a single combination of subject, resource and action AllOfs) and builds a collection of XacmlContextAttributes which can be used for a decision request
            </summary>
            <param name="subjects">The list of subject values to add to the context (Roles, access groups, delegation recipients etc.)</param>
            <param name="resource">The list of attribute values identifying a single resource to add to the context (Org/App, ResourceRegistryId)</param>
            <param name="action">The list of action attribute values identifying a single action to add to the context (Read, Write etc.)</param>
            <returns>A collection of XacmlContextAttributes which can be used for a decision request</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetRightsFromXacmlRules(System.Collections.Generic.ICollection{Altinn.Authorization.ABAC.Xacml.XacmlRule})">
            <summary>
            Creates a collection of Rights (single Resource and Action combinations) from the provided collection of XacmlRules
            </summary>
            <param name="xacmlRules">The collection of XacmlRules</param>
            <returns>A collection of Rights</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetRuleMatchAttributeIdsForCategory(Altinn.Authorization.ABAC.Xacml.XacmlRule,System.String)">
            <summary>
            Gets a collection of distinct AttributeId used in XacmlMatch instances matching the specified attribute category. 
            </summary>
            <param name="rule">The xacml rule to find match attribute ids in</param>
            <param name="category">The attribute category to match</param>
            <returns>Collection of AttributeId</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetRulePolicyAttributeMatchesForCategory(Altinn.Authorization.ABAC.Xacml.XacmlRule,System.String)">
            <summary>
            Gets a nested list of AttributeMatche models for all XacmlMatch instances matching the specified attribute category. 
            </summary>
            <param name="rule">The xacml rule to process</param>
            <param name="category">The attribute category to match</param>
            <returns>Nested list of PolicyAttributeMatch models</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.PolicyHelper.GetAllOfsByCategory(Altinn.Authorization.ABAC.Xacml.XacmlRule,System.String)">
            <summary>
            Gets a collection of all XacmlAllOfs containing all XacmlMatch instances matching the specified attribute category, from a given XacmlRule
            </summary>
            <param name="rule">The xacml rule</param>
            <param name="category">The attribute category to match</param>
            <returns>Collection of AllOfs</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Helpers.RightsHelper">
            <summary>
            Helper methods for rights retrieval
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.GetRoleAttributeMatches(System.Collections.Generic.List{Authorization.Platform.Authorization.Models.Role})">
            <summary>
            Gets the list of Roles as a list of AttributeMatch elements
            </summary>
            <param name="roles">The list of altinn role codes</param>
            <returns>List of attribute matches</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.GetDelegationSubjectAttributeMatches(Altinn.AccessManagement.Core.Models.DelegationChange)">
            <summary>
            Gets the subject list for a given delegation change, for building a XacmlContextRequest
            </summary>
            <param name="delegationChange">The delegation change to retrieve subject from</param>
            <returns>List of attribute matches</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.GetRightsQuery(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Builds a RightsQuery request model for lookup of a users rights for a given service resource on behalf of the given reportee party
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.CheckIfRuleIsAnEndUserRule(Altinn.AccessManagement.Core.Models.Right)">
            <summary>
            Check if it exist any roles giving access to the resource if there is no such access rules this must be a rule defined for the service owner as there is not any way the end user could gain access
            </summary>
            <param name="right">the right to analyze</param>
            <returns>the decision</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.AnalyzeDelegationAccessReason(Altinn.AccessManagement.Core.Models.Right)">
            <summary>
            Analyzes a Right model for a reason for the rights delegation access status
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Helpers.RightsHelper.GetAttributeMatches(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.PolicyAttributeMatch}})">
            <summary>
            Converts a list of policy attribute matches into a list of attribute matches
            </summary>
            <param name="policySubjects">a list of policy attribute matches</param>
            <returns>a list of attribute matches</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationChangeEventQueue">
            <summary>
            The service used to map internal delegation change to delegation change events and push them to the event queue.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationChangeEventQueue.Push(Altinn.AccessManagement.Core.Models.DelegationChange)">
            <summary>
            Converts the delegation change to a delegation change event and pushes it to the event queue.
            Throws exception if something fails
            </summary>
            <param name="delegationChange">The delegation change stored in postgresql</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository">
            <summary>
            Interface for PostgreSQL operations on delegations.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.InsertDelegation(Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType,Altinn.AccessManagement.Core.Models.DelegationChange,System.Threading.CancellationToken)">
            <summary>
            Writes the delegation change metadata to the delegation database
            </summary>
            <param name="resourceMatchType">The resource match type specifying whether the lookup is for an Altinn App delegation or a resource from the Resource Registry</param>
            <param name="delegationChange">The DelegationChange model describing the delegation, to insert in the database</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The complete DelegationChange record stored in the database</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetCurrentDelegationChange(Altinn.AccessManagement.Core.Enums.ResourceAttributeMatchType,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid},Altinn.AccessManagement.Enums.UuidType,System.Threading.CancellationToken)">
            <summary>
            Gets the latest delegation change matching the filter values
            </summary>
            <param name="resourceMatchType">The resource match type specifying whether the lookup is for an Altinn App delegation or a resource from the Resource Registry</param>
            <param name="resourceId">The resourceId to look up. Either Altinn app id (org/app) or resource registry id</param>
            <param name="offeredByPartyId">The party id of the entity offering the delegated the policy</param>
            <param name="coveredByPartyId">The party id of the entity having received the delegated policy, if the entity is an organization</param>
            <param name="coveredByUserId">The user id of the entity having received the delegated policy, if the entity is a user</param>
            <param name="toUuid">The receiver uuid</param>
            <param name="toUuidType">The type of uuid the reciver is</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllAppDelegationChanges(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the delegation change records matching the filter values for a complete changelog
            </summary>
            <param name="altinnAppId">The Altinn app id (org/app)</param>
            <param name="offeredByPartyId">The party id of the entity offering the delegated the policy</param>
            <param name="coveredByPartyId">The party id of the entity having received the delegated policy, if the entity is an organization</param>
            <param name="coveredByUserId">The user id of the entity having received the delegated policy, if the entity is a user</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllCurrentAppDelegationChanges(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the current app delegation change records matching the filter values
            </summary>
            <param name="offeredByPartyIds">The list of party id of the entity offering the delegated the policy</param>
            <param name="altinnAppIds">The list of altinn app ids to look up</param>
            <param name="coveredByPartyIds">The list of party id of the entity having received the delegated policy, if the entity is an organization</param>
            <param name="coveredByUserIds">The list of user id of the entity having received the delegated policy, if the entity is a user</param>
            <param name="cancellationToken">Cancellation token for cancelling the request</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllCurrentAppDelegationChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},Altinn.AccessManagement.Enums.UuidType,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all the current altinn app delegation change records matching the filter values
            </summary>
            <param name="altinnAppIds">The list of altinn app IDs to look up delegations of</param>
            <param name="fromPartyIds">The list of from parties having delegated resources</param>
            <param name="toUuidType">The type of the to uuid recipient of delegated resources</param>
            <param name="toUuid">The uuid of the recipient of delegated resources</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllCurrentResourceRegistryDelegationChanges(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the current resource registry delegation change records matching the filter values
            </summary>
            <param name="offeredByPartyIds">The list of party id of the entity offering the delegated the policy</param>
            <param name="resourceRegistryIds">The list of resource registry ids to look up</param>
            <param name="coveredByPartyIds">The list of party id of the entity having received the delegated policy, if the entity is an organization</param>
            <param name="coveredByUserId">The user id of the user having received the delegated policy</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllCurrentResourceRegistryDelegationChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},Altinn.AccessManagement.Enums.UuidType,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all the current resource registry delegation change records matching the filter values
            </summary>
            <param name="resourceRegistryIds">The list of resource registry IDs to look up delegations of</param>
            <param name="fromPartyIds">The list of from parties having delegated resources</param>
            <param name="toUuidType">The type of the to uuid recipient of delegated resources</param>
            <param name="toUuid">The uuid of the recipient of delegated resources</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetOfferedResourceRegistryDelegations(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <summary>
            Gets all the active resource registry delegations a given party have delegated to others
            </summary>
            <param name="offeredByPartyId">The party id of the entity offering the delegations</param>
            <param name="resourceRegistryIds">The resource registry ids of resources to find delegations of</param>
            <param name="resourceTypes">The types of resources to find delegations of</param>
            <param name="cancellationToken">Cancellation token for cancelling the request</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetOfferedDelegations(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the active delegation given party has offered to others
            </summary>
            <param name="offeredByPartyIds">a</param>
            <param name="cancellationToken">b</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetReceivedResourceRegistryDelegationsForCoveredByPartys(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <summary>
            Gets all the active resource registry delegations a list of parties have received from others
            </summary>
            <param name="coveredByPartyIds">The list of party ids of the entities receiving the delegations</param>
            <param name="offeredByPartyIds">The list of party ids of the entities offering the delegations</param>
            <param name="resourceRegistryIds">The resource registry ids of resources to find delegations of</param>
            <param name="resourceTypes">The types of resources to find delegations of</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetReceivedResourceRegistryDelegationsForCoveredByUser(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType},System.Threading.CancellationToken)">
            <summary>
            Gets all the active resource registry delegations a given user have received from others
            </summary>
            <param name="coveredByUserId">The user id of the entity that received the delegation</param>
            <param name="offeredByPartyIds">The party ids of the entities offering the delegations</param>
            <param name="resourceRegistryIds">The resource registry ids of resources to find delegations of</param>
            <param name="resourceTypes">The types of resources to find delegations of</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetResourceRegistryDelegationChanges(System.Collections.Generic.List{System.String},System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType,System.Threading.CancellationToken)">
            <summary>
            Gets the delgations for a given supplier, consumer and resourcetype based on resourceids
            </summary>
            <param name="resourceIds">the resource ids</param>
            <param name="offeredByPartyId">the party id of the entity that offered the delegation</param>
            <param name="coveredByPartyId">The party id of the entity that received the delegation</param>
            <param name="resourceType">the type of resource</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository.GetAllDelegationChangesForAuthorizedParties(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the active app or resource delegations (except MaskinportenSchema delegations) for the set of covered userIds or partyIds
            </summary>
            <param name="coveredByUserIds">The user ids of the users to get received delegation for</param>
            <param name="coveredByPartyIds">The party ids of the organizations to get received delegation for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyFactory">
            <summary>
            Create clients for interacting with files 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyFactory.Create(Altinn.AccessManagement.Core.Enums.PolicyAccountType,System.String)">
            <summary>
            Creates a client for interacting with storage
            </summary>
            <param name="account">which storage account to write blob</param>
            <param name="filepath">path of the file</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyFactory.Create(System.String)">
            <summary>
            Creates a client for interacting with storage. assuming storage accoutn based on filename.
            </summary>
            <param name="filepath">path of the file</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository">
            <summary>
            Interface for operations on policy files.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.GetPolicyAsync(System.Threading.CancellationToken)">
            <summary>
            Gets file stream for the policy file from blob storage, if it exists at the specified path.
            </summary>
            <param name="cancellationToken">cancellation token</param>
            <returns>File stream of the policy file</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.GetPolicyVersionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets file stream for the specified version of a policy file from blob storage, if it exists at the specified path.
            </summary>
            <param name="version">The blob storage version</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>File stream of the policy file</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.WritePolicyAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes a file stream to blobstorage to the specified path.
            </summary>
            <param name="fileStream">File stream of the policy file to be written</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Azure response BlobContentInfo</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.WritePolicyConditionallyAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes a file stream to blobstorage to the specified path, including the conditional check that the provided blob lease id is valid.
            </summary>
            <param name="fileStream">File stream of the policy file to be written</param>
            <param name="blobLeaseId">The blob lease id, required to be able to write after a lock</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Azure response BlobContentInfo</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.DeletePolicyVersionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a specific version of a blob storage file if it exits on the specified path.
            </summary>
            <param name="version">The blob storage version</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.TryAcquireBlobLease(System.Threading.CancellationToken)">
            <summary>
            Tries to acquire a blob lease on the base blob for the provided filepath.
            </summary>
            <param name="cancellationToken">cancellation token</param>
            <returns>The LeaseId if a release was possible, otherwise null</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.ReleaseBlobLease(System.String,System.Threading.CancellationToken)">
            <summary>
            Releases a blob lease on the base blob for the provided filepath using the provided leaseId.
            </summary>
            <param name="leaseId">The lease id from to release</param>
            <param name="cancellationToken">cancellation token</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyRepository.PolicyExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether there exists a blob at the specified path
            </summary>
            <param name="cancellationToken">cancellation token</param>
            <returns>Bool whether the blob exists or not</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Repositories.Interfaces.IResourceMetadataRepository">
            <summary>
            Repository implementation for PostgreSQL operations on resource register data in access management.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Repositories.Interfaces.IResourceMetadataRepository.InsertAccessManagementResource(Altinn.AccessManagement.Core.Models.AccessManagementResource,System.Threading.CancellationToken)">
            <summary>
            Inserts a placeholder for a resource in Resource Registry into Access Managment
            </summary>
            <param name="resource">Data to insert</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The inserted data with data generated/fetched in db</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.AltinnResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AltinnResolver.#ctor(Altinn.AccessManagement.Core.Resolvers.AltinnResourceResolver,Altinn.AccessManagement.Resolvers.PartyAttributeResolver,Altinn.AccessManagement.Resolvers.UserAttributeResolver,Altinn.AccessManagement.Resolvers.AltinnPersonResolver,Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver)">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn"/> 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.AltinnResourceResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AltinnResourceResolver.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AltinnResourceResolver.ResolveAppOwnerAndAppId">
            <summary>
            Resolves a resource if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.AppOwner"/> and <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.AppId"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AltinnResourceResolver.ResolveResourceRegistryId">
            <summary>
            /// Resolves a resource if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.ResourceRegistryId"/>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.AttributeResolution">
            <summary>
            A data container that encapsulates the needed parameters in order to run a resolver.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolution.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Altinn.AccessManagement.Core.Resolvers.LeafResolver)">
            <summary>
            A data container that encapsulates the needed parameters in order to run a resolver.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolution.Needs">
            <summary>
            The required attributes to be present in order for the resolver to run.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolution.Resolves">
            <summary>
            The attributes the resolver is able to fetch if provided its needs.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolution.Resolver">
            <summary>
            A function reference which, when called upon, does the work.
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.LeafResolver">
            <summary>
            Leaf resolver is a function that fetches new requested attributes based on given attributes
            </summary>
            <param name="attributes">current attributes</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.AttributeResolver">
            <summary>
            A generic node in the parse tree. Root node should be the UrnResolver
            </summary>
            <param name="resourceName">Name of the resource / Urn </param>
            <param name="internalNodes">Internal nodes in the parse tree</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.#ctor(System.String,Altinn.AccessManagement.Core.Resolvers.IAttributeResolver[])">
            <summary>
            A generic node in the parse tree. Root node should be the UrnResolver
            </summary>
            <param name="resourceName">Name of the resource / Urn </param>
            <param name="internalNodes">Internal nodes in the parse tree</param>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.ResourceName">
            <summary>
            Name / URN of the resource.
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.InternalNodes">
            <summary>
            List of internal nodes
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.LeafResolvers">
            <summary>
            List of Leaf Nodes / 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.AddLeaf(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Altinn.AccessManagement.Core.Resolvers.LeafResolver)">
            <summary>
            Adds a leaf node this internal node
            </summary>
            <param name="needs">The required attributes to be present in order for the attribute to run</param>
            <param name="resolves">The attributes the resolver are able to fetch if provided it needs.</param>
            <param name="resolver">A function reference which when called upon does the work.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.Resolve(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.ResolveLeafNodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Concurrent.ConcurrentBag{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Threading.CancellationToken)">
            <summary>
            Executes all leaf nodes if following conditions are met
            - The resolver has all required attributes (needs)
            - The resolver actually add new attributes based on requested attributes (wants)
            - The attributes haven't already been added by other resolvers
            </summary>
            <param name="wants">list of attribute types that are requested by callee</param>
            <param name="result">current result of all attributes</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.ResolveInternalNodes(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IEnumerable{System.String},System.Collections.Concurrent.ConcurrentBag{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Threading.CancellationToken)">
            <summary>
            Traverses the internal tree
            </summary>
            <param name="attributes">list of given attributes</param>
            <param name="wants">list of attribute types that are requested by callee</param>
            <param name="result">current result of all attributes</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.AddResult(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String,System.Object)">
            <summary>
            Adds the attributes to the result list
            </summary>
            <param name="result">current list</param>
            <param name="type">attribute type</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.DoesResolverHaveItsNeeds(Altinn.AccessManagement.Core.Resolvers.AttributeResolution,System.Collections.Concurrent.ConcurrentBag{Altinn.AccessManagement.Core.Models.AttributeMatch})">
            <summary>
            Checks if the resolver has all required attributes (needs).
            </summary>
            <param name="resolution">leaf resolver</param>
            <param name="result">current result</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.DoesResolverAddTheWants(System.Collections.Generic.IEnumerable{System.String},Altinn.AccessManagement.Core.Resolvers.AttributeResolution)">
            <summary>
            Checks if the resolver actually adds new attributes based on requested attributes (wants).
            </summary>
            <param name="wants">a</param>
            <param name="resolver">b</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.AttributeResolver.DoesResolverAddNewAttributes(System.Collections.Concurrent.ConcurrentBag{Altinn.AccessManagement.Core.Models.AttributeMatch},Altinn.AccessManagement.Core.Resolvers.AttributeResolution)">
            <summary>
            Checks if the attributes haven't already been added by other resolvers.
            </summary>
            <param name="result">a</param>
            <param name="resolver">b</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Extensions.ResolverExtensions">
            <summary>
            General extensions for the resolvers
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Extensions.ResolverExtensions.GetRequiredString(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Gets first match of specific attribute value as string
            </summary>
            <param name="values">list of attributes</param>
            <param name="attributes">attributes types / URN's</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Extensions.ResolverExtensions.GetString(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Gets first match of specific attribute value as string
            </summary>
            <param name="values">list of attributes</param>
            <param name="attributes">attributes types / URN's</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Extensions.ResolverExtensions.GetRequiredInt(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.String[])">
            <summary>
            Gets first match of specific attribute value as integer.
            </summary>
            <param name="values">list of attributes</param>
            <param name="attributes">attributes types / URN's</param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.IAttributeResolver">
            <summary>
            Resolves attributes.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.IAttributeResolver.Resolve(System.Collections.Generic.IEnumerable{Altinn.AccessManagement.Core.Models.AttributeMatch},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Allows the caller to fetch new requested attributes specified by the wants parameter.
            Given attributes should contain values that allow the user to resolve/fetch wanted attributes.
            </summary>
            <param name="attributes">Current attributes.</param>
            <param name="wants">Attributes wanted by the callee.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>New list of attributes containing given attributes and wanted attributes.</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn">
            <summary>
            Urn
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.String">
            <summary>
            Urn
            </summary>
            <returns></returns>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.InternalIds">
            <summary>
            InternalIds of delegatable entities 
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn2InternalIds">
            <summary>
            InternalIds from Altinn 2
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn">
            <summary>
            Resources that belongs to Altinn 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.String">
            <summary>
            Urn.Altinn
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person">
            <summary>
            Urn.Altinn.Person
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.IdentifierNo">
            <summary>
            A person Social security number
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.Uuid">
            <summary>
            Uuid
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.UserId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.PartyId">
            <summary>
            PartyId
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.Firstname">
            <summary>
            A person's first name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.Shortname">
            <summary>
            A Person's shortname
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.Middlename">
            <summary>
            A Person's middlename
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.Lastname">
            <summary>
            A Person's lastname
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.String">
            <summary>
            Urn.Altinn.Person
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization">
            <summary>
            Urn.Altinn.Organization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.IdentifierNo">
            <summary>
            An organization brreg number
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.Name">
            <summary>
            Organization's name
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.PartyId">
            <summary>
            Organzation's Party Id
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.Uuid">
            <summary>
            Uuid of organization
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.String">
            <summary>
            Urn.Altinn.Organization
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser">
            <summary>
            Urn.Altinn.EnterpriseUser
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Username">
            <summary>
            username
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Uuid">
            <summary>
            uuid
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.UserId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Organization">
            <summary>
            Urn.Altinn.EnterpriseUser.Organization
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Organization.Uuid">
            <summary>
            uuid
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Organization.String">
            <summary>
            Urn.Altinn.EnterpriseUser.Organization
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.String">
            <summary>
            Urn.Altinn.EnterpriseUser
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource">
            <summary>
            Urn.Altinn.Resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.ResourceRegistryId">
            <summary>
            The resource regigistry identifier
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.AppOwner">
            <summary>
            Owner of the altinn App
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.AppId">
            <summary>
            Altinn AppId
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.Type">
            <summary>
            Specifies the type of the resource
            </summary>
        </member>
        <member name="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.Delegable">
            <summary>
            boolean that specifies of the resource is delegable or not
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Resource.String">
            <summary>
            Urn.Altinn.Resource
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Resolvers.UrnResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Resolvers.UrnResolver.#ctor(Altinn.AccessManagement.Core.Resolvers.AltinnResolver)">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn"/> 
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Altinn2RightsService">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Altinn2RightsService.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint,Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.Altinn2RightsService"/> class.
            </summary>
            <param name="contextRetrievalService">Service for retrieving context information</param>
            <param name="pip">Service for getting policy information</param>
            <param name="altinn2RightsClient">SBL Bridge client implementation for rights operations on Altinn 2 services</param>
            <param name="profileClient">Profile lookup client</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Altinn2RightsService.GetOfferedRights(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Altinn2RightsService.GetReceivedRights(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Altinn2RightsService.ClearReporteeRights(System.Int32,Altinn.AccessManagement.Core.Models.BaseAttribute,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository,Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService"/> class.
            </summary>
            <param name="contextRetrievalService">Service for retrieving context information</param>
            <param name="delegations">Database repository for delegations</param>
            <param name="altinn2">SBL bridge client for role and reportee information from Altinn 2</param>
            <param name="profile">Service implementation for user profile retrieval</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedParties(Altinn.AccessManagement.Core.Models.BaseAttribute,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForParty(System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForUser(System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForPerson(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForPersonUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForOrganization(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForOrganizationUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForEnterpriseUser(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.AuthorizedPartiesService.GetAuthorizedPartiesForEnterpriseUserUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.ContextRetrievalService">
            <summary>
            Context Retrieval Service
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.#ctor(Microsoft.Extensions.Options.IOptions{Altinn.AccessManagement.Core.Configuration.CacheConfig},Microsoft.Extensions.Caching.Memory.IMemoryCache,Altinn.AccessManagement.Core.Clients.Interfaces.IResourceRegistryClient,Altinn.AccessManagement.Core.Clients.Interfaces.IAltinnRolesClient,Altinn.AccessManagement.Core.Clients.Interfaces.IPartiesClient,Altinn.AccessManagement.Core.Clients.Interfaces.IAuthenticationClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.ContextRetrievalService"/> class
            </summary>
            <param name="cacheConfig">Cache config</param>
            <param name="memoryCache">The cache handler </param>
            <param name="resourceRegistryClient">The client for integration with the ResourceRegistry</param>
            <param name="altinnRolesClient">The client for integration with the SBL Bridge for role information</param>
            <param name="partiesClient">The client for integration </param>
            <param name="authenticationClient">The client for integration with authentication</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetDecisionPointRolesForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetRolesForDelegation(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartyAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartiesAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartiesAsSortedDictionaryAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartyByUuid(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetSystemUserById(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetDefaultRightsForRegisteredSystem(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartiesByUuids(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartyForOrganization(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartyForPerson(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetKeyRolePartyIds(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetMainUnits(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetMainUnit(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetResource(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetResources(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetResourceList(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetResourceFromResourceList(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetPartyForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ContextRetrievalService.GetSubjectResources(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.DelegationRequestService">
            <summary>
            The servcie implementation for operations related to working with delegation requests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.DelegationRequestService.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequestsWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.DelegationRequestService"/> class
            </summary>
            <param name="delegationRequestsWrapper">Delegation request client wrapper</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.DelegationRequestService.GetDelegationRequestsAsync(System.String,System.String,System.Nullable{System.Int32},Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IAltinn2RightsService">
            <summary>
            Used by Altinn for managing delegations
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAltinn2RightsService.GetOfferedRights(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all offered single rights delegations for a reportee
            </summary>
            <param name="partyId">reportee</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAltinn2RightsService.GetReceivedRights(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all received single rights delegations for a reportee
            </summary>
            <param name="partyId">reportee</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAltinn2RightsService.ClearReporteeRights(System.Int32,Altinn.AccessManagement.Core.Models.BaseAttribute,System.Threading.CancellationToken)">
            <summary>
            Operation to clear a recipients cached rights from a given reportee/from party, and the recipients authorized parties/reportees
            </summary>
            <param name="fromPartyId">The party id of the from party</param>
            <param name="toAttribute">Attribute model identifying the recipient/to party</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>HttpResponse</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService">
            <summary>
            Service for operations regarding retrieval of authorized parties (aka reporteelist)
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedParties(Altinn.AccessManagement.Core.Models.BaseAttribute,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of all authorized parties a given user or organization have some access for in Altinn
            </summary>
            <param name="subjectAttribute">Attribute identifying the user or organization retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForUser(System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given user can represent in Altinn
            </summary>
            <param name="subjectUserId">The user id of the user to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForParty(System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given user or organization have some access for in Altinn
            </summary>
            <param name="subjectPartyId">The party id of the user or organization to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForPerson(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given person can represent in Altinn
            </summary>
            <param name="subjectNationalId">The national identity number of the person to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForPersonUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given person can represent in Altinn
            </summary>
            <param name="subjectPersonUuid">The uuid of the person to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForOrganization(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given organization can represent in Altinn
            </summary>
            <param name="subjectOrganizationNumber">The organization number of the organization to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForOrganizationUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given organization can represent in Altinn
            </summary>
            <param name="subjectOrganizationUuid">The organization uuid of the organization to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForEnterpriseUser(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given enterprise user can represent in Altinn
            </summary>
            <param name="subjectEnterpriseUsername">The username of the enterprise user to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IAuthorizedPartiesService.GetAuthorizedPartiesForEnterpriseUserUuid(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the full unfiltered list of authorized parties the given enterprise user can represent in Altinn
            </summary>
            <param name="subjectEnterpriseUserUuid">The uuid of the enterprise user to retrieve the authorized party list for</param>
            <param name="includeAltinn2AuthorizedParties">Whether Authorized Parties from Altinn 2 should be included in the result set</param>
            <param name="includeAuthorizedResourcesThroughRoles">Whether Authorized Resources per party should be enriched with resources the user has access to through AuthorizedRoles</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unfiltered party list</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService">
            <summary>
            Defines the interface for the context retrieval service defining operations for getting external context information for decision point requests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetDecisionPointRolesForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the decision point roles for the loggedin user for a selected party
            </summary>
            <param name="coveredByUserId">the logged in user id</param>
            <param name="offeredByPartyId">the partyid of the person/org the logged in user is representing</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>list of actors that the logged in user can represent</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetRolesForDelegation(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the roles the user has for a given reportee, as basis for evaluating rights for delegation.
            For any user having HADM this means, getting additional roles as DAGL etc.
            </summary>
            <param name="coveredByUserId">the user id</param>
            <param name="offeredByPartyId">the partyid of the person/org the user is representing</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>list of actors that the logged in user can represent</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartyAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a single party by its party id
            </summary>
            <param name="partyId">The party id</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Party</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartiesAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of parties by their party ids
            </summary>
            <param name="partyIds">List of partyIds to lookup</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the lookup party IDs are for a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>List of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartiesAsSortedDictionaryAsync(System.Collections.Generic.List{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a dictionary of parties by their party ids
            </summary>
            <param name="partyIds">List of partyIds to lookup</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the lookup party IDs are for a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>List of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartyByUuid(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a single party by its party uuid
            </summary>
            <param name="partyUuid">The party uuid</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the parties are a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Party</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartiesByUuids(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a dictionary of parties by their party uuids
            </summary>
            <param name="partyUuids">Collection of party uuids to lookup</param>
            <param name="includeSubunits">(Optional) Whether subunits should be included as ChildParties, if any of the parties are a main unit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Dictionary of parties</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetSystemUserById(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a system user by the uuid and owning party
            </summary>
            <param name="partyId">partyId for the system user owning party</param>
            <param name="systemUserUuid">the identifier og the system user</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetDefaultRightsForRegisteredSystem(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the registered default rights for a given system type
            </summary>
            <param name="productId">the system to fetch the default rights for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartyForOrganization(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the party of an organization
            </summary>
            <param name="organizationNumber">The organization number to lookup party</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Party</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartyForPerson(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the party of a person
            </summary>
            <param name="ssn">The social security number to lookup party</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Party</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetKeyRolePartyIds(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a list of PartyIds the given user id has key role access to (where the user inherit delegations to their organization)
            </summary>
            <param name="userId">The user id</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>list of PartyIds where the logged in user have key role access</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetMainUnits(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a main unit for the input sub unit partyId. If the input partyId is not a sub unit the response model will have null values for main unit properties.
            </summary>
            <param name="subunitPartyIds">The list of PartyId to check and retrieve any main units for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>main units</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetMainUnit(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a main unit for the input sub unit partyId. If the input partyId is not a sub unit the response model will have null values for main unit properties.
            </summary>
            <param name="subunitPartyId">The PartyId to check and retrieve any main unit for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>main unit</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetResource(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single resoure by it's resource id if registered in the Resource Registry
            </summary>
            <param name="resourceRegistryId">The identifier of the resource in the Resource Registry</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource if exists</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetResources(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all resources from the Resource Registry
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetResourceList(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all available resources including Altinn Apps, Altinn 2 services and resources from the Resource Registry
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource list</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetResourceFromResourceList(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single resource from the list of all available resources including Altinn Apps, Altinn 2 services and resources from the Resource Registry, if it exists.
            </summary>
            <param name="resourceId">The resource id</param>
            <param name="org">Org code of the resource/app owner</param>
            <param name="app">The app name</param>
            <param name="serviceCode">Tha Altinn 2 Service Code</param>
            <param name="serviceEditionCode">The Altinn 2 Service Edition Code</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resource if exists</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetPartyForUser(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a Party based on partyId if the party is in the users reporteelist
            </summary>
            <param name="userId">The id of the authenticated user</param>
            <param name="partyId">The party Id of the party to retrieve</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Party that corresponds to partyId parameter if it's in the users reporteelist</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService.GetSubjectResources(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets all resources having any of the request subjects in one or more resource policy rules
            </summary>
            <param name="subjects">Urn string representation of the subjects to lookup resources for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Dictionary of all resources per subject, having policy rules with the subject</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequests">
            <summary>
            Interface for the delegation request service, defining operations for working with delegation requests
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequests.GetDelegationRequestsAsync(System.String,System.String,System.Nullable{System.Int32},Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus},System.String)">
            <summary>
            Returns a list of DelegationRequests
            </summary>
            <param name="who">The reportee to get delegation requests for</param>
            <param name="serviceCode">Optional filter parameter for serviceCode</param>
            <param name="serviceEditionCode">Optional filter parameter for serviceEditionCode</param>
            <param name="direction">Optional filter parameter for directions (incoming, outgoing). If no direction is specified, both incoming and outgoing requests will be returned</param>
            <param name="status">Optional filter parameter for status. (created, unopened, approved, rejected, deleted)</param>
            <param name="continuation">Optional filter parameter for continuationToken</param>
            <returns>List of delegation requests</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequestsWrapper">
            <summary>
            Interface for a client wrapper for integration with SBL bridge delegation request API
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IDelegationRequestsWrapper.GetDelegationRequestsAsync(System.String,System.String,System.Nullable{System.Int32},Altinn.AccessManagement.Core.Enums.RestAuthorizationRequestDirection,System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RestAuthorizationRequestStatus},System.String)">
            <summary>
            Returns a list of DelegationRequests
            </summary>
            <param name="who">The reportee to get delegation requests for</param>
            <param name="serviceCode">Optional filter parameter for serviceCode</param>
            <param name="serviceEditionCode">Optional filter parameter for serviceEditionCode</param>
            <param name="direction">Optional filter parameter for directions (incoming, outgoing). If no direction is specified, both incoming and outgoing requests will be returned</param>
            <param name="status">Optional filter parameter for status. (created, unopened, approved, rejected, deleted)</param>
            <param name="continuation">Optional filter parameter for continuationToken</param>
            <returns>List of delegation requests</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IEventMapperService">
            <summary>
            Service mapping internal delegation changes to delegation change events
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IEventMapperService.MapToDelegationChangeEventList(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.DelegationChange})">
            <summary>
            Maps to DelegationChangeEventList used for pushing delegation events to the event queue
            </summary>
            <param name="delegationChanges">List of delegation changes from postgreSQL</param>
            <returns>DelegationChangeEventList</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService">
            <summary>
            Service for operations regarding MaskinportenSchema delegations
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.DelegationCheck(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a delegation check for the authenticated user on behalf of the from party, to find if and what rights the user can delegate to the to party, for the given maskinportenschema.
            </summary>
            <param name="authenticatedUserId">The user id of the authenticated user performing the delegation</param>
            <param name="authenticatedUserAuthlevel">The authentication level of the authenticated user performing the delegation</param>
            <param name="request">The model describing the right delegation check to perform</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The result of the delegation status check</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.GetOfferedMaskinportenSchemaDelegations(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <summary>
            Gets all offered maskinporten schema delegations for a reportee
            </summary>
            <param name="party">reportee that delegated resources</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.GetReceivedMaskinportenSchemaDelegations(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <summary>
            Gets all received maskinporten schema delegations for a reportee
            </summary>
            <param name="party">reportee that delegated resources</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.GetMaskinportenDelegations(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> 
            Gets all the delegations for an admin or owner
            </summary>
            <param name="supplierOrg">the organisation number of the supplier org</param>
            <param name="consumerOrg">the organisation number of the consumer of the resource</param>
            <param name="scope">the scope of the resource</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.DelegateMaskinportenSchema(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <summary>
            Performs the delegation on behalf of the from party
            </summary>
            <param name="authenticatedUserId">The user id of the authenticated user performing the delegation</param>
            <param name="authenticatedUserAuthlevel">The authentication level of the authenticated user performing the delegation</param>
            <param name="delegation">The delegation</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The result of the delegation</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService.RevokeMaskinportenSchemaDelegation(System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <summary>
            Operation to revoke a maskinporten schema delegation
            </summary>
            <param name="authenticatedUserId">The user id of the authenticated user deleting the delegation</param>
            <param name="delegation">The delegation lookup model</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The result of the deletion</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint">
            <summary>
            Defines the interface for the Policy Administration Point
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint.WritePolicyAsync(System.String,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Returns a bool based on writing file to storage was successful
            </summary>
            <param name="org">Unique identifier of the organisation responsible for the app.</param>
            <param name="app">Application identifier which is unique within an organisation.</param>
            <param name="fileStream">A stream containing the content of the policy file</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint.TryWriteDelegationPolicyRules(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Threading.CancellationToken)">
            <summary>
            Trys to sort and store the set of rules as delegation policy files in blob storage.
            </summary>
            <param name="rules">The set of rules to be delegated</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The list of rules with created Id and result status</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint.TryDeleteDelegationPolicyRules(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RequestToDelete},System.Threading.CancellationToken)">
            <summary>
            Trys to sort and delete the set of rules matching the list of ruleMatches to delete from delegation policy files in blob storage.
            </summary>
            <param name="rulesToDelete">Entity to define which rules to be deleted</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The list of rules with created Id and result status</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint.TryDeleteDelegationPolicies(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RequestToDelete},System.Threading.CancellationToken)">
            <summary>
            Deletes a List of policies based on input list of matches to remove
            </summary>
            <param name="policiesToDelete">entity containing match for all the policies to delete</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A list containing all the policies that is deleted</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint">
            <summary>
            Defines the required methods for an implementation of a policy information point.
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint.GetRulesAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the rules for a list of authorization resources, given by a list of offeredbyPartyIds to a list of coveredbyIds
            </summary>
            <param name="resourceIds">The list of resource identifiers, either from the resource registry or altinn app ids</param>
            <param name="offeredByPartyIds">the list of offeredby party ids</param>
            <param name="coveredByPartyIds">the list of coveredby party ids</param>
            <param name="coveredByUserIds">the list of coveredby user ids</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>a list of rules that match the lists of org/apps, offeredby ids, and coveredby ids</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint.GetRights(Altinn.AccessManagement.Core.Models.RightsQuery,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the all rights a user have for a given reportee and resource
            </summary>
            <param name="rightsQuery">The query model</param>
            <param name="returnAllPolicyRights">Whether the response should return all possible rights for the resource, not just the rights the user have access to</param>
            <param name="getDelegableRights">Whether the query is only rights the user is allowed to delegate to others</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A list of rights</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint.GetAllDelegations(Altinn.AccessManagement.Core.Models.DelegationChangeInput,System.Threading.CancellationToken)">
            <summary>
            Finds all delegation changes for a given user, reportee and app/resource context
            </summary>
            <param name="request">The object containing the resource/app that's checked for delegation changes</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A list of delegation changes that's stored in the database</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint.GetReceivedDelegationFromRepository(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all active received delegations (not including maskinporten schema) from db, both directly delegated to the party or through key roles if the party is a person
            </summary>
            <param name="partyId">Party id of a user or organization</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint.GetOfferedDelegationsFromRepository(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all active offered delegations (not including maskinporten schema) from db, both directly delegated from the party or from it's main unit if the party is a subunit
            </summary>
            <param name="partyId">Party id of a user or organization</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint">
            <summary>
            Defines the interface for the Policy Retrival Point
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint.GetPolicyAsync(Altinn.Authorization.ABAC.Xacml.XacmlContextRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a policy based on the context request
            </summary>
            <param name="request">The context request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>XacmlPolicy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint.GetPolicyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a policy based the org and app
            </summary>
            <param name="org">The organisation</param>
            <param name="app">The app</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>XacmlPolicy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint.GetPolicyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a policy based the resourceRegistryId
            </summary>
            <param name="resourceRegistry">The Resource Registry Id</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>XacmlPolicy</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint.GetPolicyVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a specific version of a policy if it exits on the provided path
            </summary>
            <param name="policyPath">The blobstorage path to the policy file</param>
            <param name="version">The specific blob storage version to get</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>XacmlPolicy and ETag tuple</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint">
            <summary>
            Service for creating and updating Resources in AccessMAnagment existing in the ResourceRegister
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint.TryWriteResourceFromResourceRegister(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AccessManagementResource})">
            <summary>
            Creates or Updates a list of Resources from ResourceRegister
            </summary>
            <param name="resources">The resources to add or update</param>
            <returns></returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint.GetResources(Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType)">
            <summary>
            Gets a list of Resources from ResourceRegister
            </summary>
            <param name="resourceType">The type of resource to be filtered</param>
            <returns>resource list based on resource type</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint.GetResources(System.String)">
            <summary>
            Gets a list of Resources from ResourceRegister
            </summary>
            <param name="scope">The scope of the resource</param>
            <returns>resource list based on given scope</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint.GetResource(System.String)">
            <summary>
            Integration point for retrieving a single resoure by it's resource id
            </summary>
            <param name="resourceRegistryId">The identifier of the resource in the Resource Registry</param>
            <returns>The resource if exists</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService">
            <summary>
            Service for operations regarding single rights delegations
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService.RightsDelegationCheck(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest)">
            <summary>
            Performs a delegation check for the authenticated user on behalf of the from party, to find if and what rights the user can delegate to the to party, for the given resource.
            </summary>
            <param name="authenticatedUserId">The user id of the authenticated user performing the delegation</param>
            <param name="authenticatedUserAuthlevel">The authentication level of the authenticated user performing the delegation</param>
            <param name="request">The model describing the right delegation check to perform</param>
            <returns>The result of the delegation status check</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService.DelegateRights(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <summary>
            Performs the delegation on behalf of the from party
            </summary>
            <param name="authenticatedUserId">The user id of the authenticated user performing the delegation</param>
            <param name="authenticatedUserAuthlevel">The authentication level of the authenticated user performing the delegation</param>
            <param name="delegation">The delegation</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The result of the delegation</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService.GetOfferedRights(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <summary>
            Gets all offered single rights delegations for a reportee
            </summary>
            <param name="reportee">reportee</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService.GetReceivedRights(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <summary>
            Gets all received single rights delegations for a reportee
            </summary>
            <param name="reportee">reportee</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>list of delgations</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.ISingleRightsService.RevokeRightsDelegation(System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <summary>
            Operation to revoke a single rights delegation
            </summary>
            <param name="authenticatedUserId">authenticed user</param>
            <param name="delegation">delegation</param>
            <param name="cancellationToken">http context token</param>
            <returns>The result of the deletion</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.Interfaces.IUserProfileLookupService">
            <summary>
            Defines the interface for the service wrapping UserProfile lookup with lastname verification and preventing users for guessing too many faulty combination of SSN/Username and Last Name
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.Interfaces.IUserProfileLookupService.GetUserProfile(System.Int32,Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup,System.String)">
            <summary>
            Gets the UserProfile of a user if the provided identifier and lastname is matching last name from freg
            </summary>
            <returns>Party</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.#ctor(Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Core.Services.Interfaces.IMaskinportenSchemaService},Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository,Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint,Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint,Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService"/> class.
            </summary>
            <param name="logger">handler for logger</param>
            <param name="delegationRepository">delegation change handler</param>
            <param name="contextRetrievalService">Service for retrieving context information</param>
            <param name="resourceAdministrationPoint">handler for resource registry</param>
            <param name="pip">Service implementation for policy information point</param>
            <param name="pap">Service implementation for policy administration point</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.DelegationCheck(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.DelegateMaskinportenSchema(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.GetOfferedMaskinportenSchemaDelegations(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.GetReceivedMaskinportenSchemaDelegations(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.GetMaskinportenDelegations(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.MaskinportenSchemaService.RevokeMaskinportenSchemaDelegation(System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint">
            <summary>
            The Policy Administration Point responsible for storing and modifying delegation policies
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint,Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyFactory,Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository,Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationChangeEventQueue,Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint"/> class.
            </summary>
            <param name="policyRetrievalPoint">The policy retrieval point.</param>
            <param name="policyFactory">The policy repository (blob storage).</param>
            <param name="delegationRepository">The delegation change repository (postgresql).</param>
            <param name="eventQueue">The delegation change event queue service to post events for any delegation change.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint.WritePolicyAsync(System.String,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint.TryWriteDelegationPolicyRules(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.Rule},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint.TryDeleteDelegationPolicyRules(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RequestToDelete},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyAdministrationPoint.TryDeleteDelegationPolicies(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.RequestToDelete},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.PolicyInformationPoint">
            <summary>
            The Policy Information Point responsible for storing and modifying delegation policies
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.#ctor(Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint},Altinn.AccessManagement.Core.Services.Interfaces.IPolicyRetrievalPoint,Altinn.AccessManagement.Core.Repositories.Interfaces.IDelegationMetadataRepository,Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.PolicyInformationPoint"/> class.
            </summary>
            <param name="logger">The logger</param>
            <param name="policyRetrievalPoint">The policy retrieval point</param>
            <param name="delegationRepository">The delegation change repository</param>
            <param name="contextRetrievalService">Service for retrieving context information</param>
            <param name="profile">Service for retrieving user profile information</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.GetRulesAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.GetRights(Altinn.AccessManagement.Core.Models.RightsQuery,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.GetReceivedDelegationFromRepository(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.GetOfferedDelegationsFromRepository(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyInformationPoint.GetAllDelegations(Altinn.AccessManagement.Core.Models.DelegationChangeInput,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint">
            <summary>
            The Policy Retrieval point responsible to find the correct policy
            based on the context Request
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint.#ctor(Altinn.AccessManagement.Core.Repositories.Interfaces.IPolicyFactory,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Options.IOptions{Altinn.AccessManagement.Core.Configuration.CacheConfig})">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint"/> class.
            </summary>
            <param name="policyFactory">The policy factory</param>
            <param name="memoryCache">The cache handler</param>
            <param name="cacheConfig">The cache config settings</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint.GetPolicyAsync(Altinn.Authorization.ABAC.Xacml.XacmlContextRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint.GetPolicyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint.GetPolicyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.PolicyRetrievalPoint.GetPolicyVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint.#ctor(Altinn.AccessManagement.Core.Repositories.Interfaces.IResourceMetadataRepository,Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Core.Services.Interfaces.IResourceAdministrationPoint},Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint"/> class.
            </summary>
            <param name="resourceRepository">The data layer to handle Resource related persistence</param>
            <param name="logger">Logger instance.</param>
            <param name="contextRetrievalService">the handler for resource registry client</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint.GetResources(Altinn.AccessManagement.Core.Models.ResourceRegistry.ResourceType)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint.GetResources(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint.GetResource(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.ResourceAdministrationPoint.TryWriteResourceFromResourceRegister(System.Collections.Generic.List{Altinn.AccessManagement.Core.Models.AccessManagementResource})">
            <inheritdoc />
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.SingleRightsService">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.#ctor(Altinn.AccessManagement.Core.Resolvers.IAttributeResolver,Altinn.AccessManagement.Core.Asserters.IAssert{Altinn.AccessManagement.Core.Models.AttributeMatch},Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Services.Interfaces.IPolicyInformationPoint,Altinn.AccessManagement.Core.Services.Interfaces.IPolicyAdministrationPoint,Altinn.AccessManagement.Core.Clients.Interfaces.IAltinn2RightsClient,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient,Altinn.AccessManagement.Core.Services.Interfaces.IUserProfileLookupService)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.SingleRightsService"/> class.
            </summary>
            <param name="resolver">a</param>
            <param name="asserter">b</param>
            <param name="contextRetrievalService">Service for retrieving context information</param>
            <param name="pip">Service implementation for policy information point</param>
            <param name="pap">Service implementation for policy administration point</param>
            <param name="altinn2RightsClient">SBL Bridge client implementation for rights operations on Altinn 2 services</param>
            <param name="profile">Client implementation for getting user profile</param>
            <param name="profileLookup">Service implementation for lookup of userprofile with lastname verification</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.RightsDelegationCheck(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.RightsDelegationCheckRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.DelegateRights(System.Int32,System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.GetOfferedRights(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.GetReceivedRights(Altinn.AccessManagement.Core.Models.AttributeMatch,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.RevokeRightsDelegation(System.Int32,Altinn.AccessManagement.Core.Models.DelegationLookup,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.SingleRightsService.AssertRevokeDelegationInput(Altinn.AccessManagement.Core.Models.DelegationLookup)">
            <summary>
            Ensures that given input for revoking a delegations contains a combination of attributes that
            the service layer can process. If the method return null then input should be processable.
            </summary>
            <param name="delegation">input parameters from API callee</param>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Services.UserProfileLookupService">
            <summary>
            Service implementation wrapping UserProfile lookup with lastname verification and preventing users for guessing too many faulty combination of SSN/Username and Last Name
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.UserProfileLookupService.#ctor(Microsoft.Extensions.Logging.ILogger{Altinn.AccessManagement.Core.Services.UserProfileLookupService},Microsoft.Extensions.Options.IOptions{Altinn.AccessManagement.Core.Configuration.UserProfileLookupSettings},Microsoft.Extensions.Caching.Memory.IMemoryCache,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Altinn.AccessManagement.Core.Services.UserProfileLookupService"/> class
            </summary>
            <param name="logger">Logger service</param>
            <param name="userProfileLookupSettings">Cache config</param>
            <param name="memoryCache">The cache handler </param>
            <param name="profile">The client for integration with profile API</param>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Services.UserProfileLookupService.GetUserProfile(System.Int32,Altinn.AccessManagement.Core.Models.Profile.UserProfileLookup,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Altinn.AccessManagement.Core.Utilities.RegexUtil">
            <summary>
            Compilation of different regex checks
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Utilities.RegexUtil.CheckOrgNumber(System.String)">
            <summary>
            Check for Orgnumber
            Should be 9 numbers
            </summary>
            <param name="orgnumber">orgnumer to check</param>
            <returns>result of regex match</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Utilities.RegexUtil.CheckUsername(System.String)">
            <summary>
            Checks if it is a valid username
            Should be between 6-64, can contain number, letters, ., _, @, -
            Can not only be numbers
            </summary>
            <param name="username">the username</param>
            <returns>the result of the check</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Utilities.RegexUtil.CheckSSN(System.String)">
            <summary>
            Checks if it is a valid ssn
            Should be 9 chars long, can only be numbers
            </summary>
            <param name="ssn">the ssn</param>
            <returns>the result of the check</returns>
        </member>
        <member name="M:Altinn.AccessManagement.Core.Utilities.RegexUtil.IsValidMaskinportenScope(System.String)">
            <summary>
            Check if scope is valid
            </summary>
            <param name="scope">The scope to be validated</param>
            <returns>A bool indicating if the scope is well formatted</returns>
        </member>
        <member name="T:Altinn.AccessManagement.Enums.UuidType">
            <summary>
            Enum defining the different uuids used for defining parts in a delegation
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Enums.UuidType.NotSpecified">
            <summary>
            Placeholder when type is not specified should only happen when there is no Uuid to match it with
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Enums.UuidType.Person">
            <summary>
            Defining a person this could also be identified with "Fødselsnummer"/"Dnummer"
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Enums.UuidType.Organization">
            <summary>
            Identifies a unit could also be identified with a Organization number
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Enums.UuidType.SystemUser">
            <summary>
            Identifies a systemuser this is a identifier for machine integration it could also be identified with a unique name
            </summary>
        </member>
        <member name="F:Altinn.AccessManagement.Enums.UuidType.EnterpriseUser">
            <summary>
            Identifies a enterpriseuser this is marked as obsolete and is used for existing integration is also identified with an unique username
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Resolvers.AltinnEnterpriseUserResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnEnterpriseUserResolver.#ctor(Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnEnterpriseUserResolver.ResolveUsername">
            <summary>
            Resolves an enterprise user if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.EnterpriseUser.Username"/>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.ResolvePartyId">
            <summary>
            Resolves an organization if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.PartyId"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnOrganizationResolver.ResolveOrganizationNumber">
            <summary>
            Resolves an organization if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Organization.IdentifierNo"/>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Resolvers.AltinnPersonResolver">
            <summary>
            Resolves attributes for <see cref="T:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person"/> 
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            ctor
            </summary>
            <param name="contextRetrievalService">service init</param>
            <param name="profile">profile client</param>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingIdentifierNo">
            <summary>
            Resolves a person if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.IdentifierNo"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingPartyId">
            <summary>
            Resolves a profile if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.PartyId"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolveProfileUsingUserId">
            <summary>
            Resolves a profile if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.UserId"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.AltinnPersonResolver.ResolvePartyUsingPartyId">
            <summary>
            Resolves a person if given <see cref="P:Altinn.AccessManagement.Core.Resolvers.Urn.Altinn.Person.PartyId"/> or <see cref="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PartyAttribute"/>
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Resolvers.PartyAttributeResolver">
            <summary>
            Resolves Party attribute as a PartyId
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.PartyAttributeResolver.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Resolves Party attribute as a PartyId
            </summary>
            <param name="contextRetrievalService">service init</param>
            <param name="profile">profile client</param>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.PartyAttributeResolver.ResolvePartyIdFromUser">
            <summary>
            Resolves a PartyId if given <see cref="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.UserAttribute"/> exists
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.PartyAttributeResolver.ResolvePartyIdFromParty">
            <summary>
            Resolves a PartyId if given <see cref="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PartyAttribute"/> exists
            </summary>
        </member>
        <member name="T:Altinn.AccessManagement.Resolvers.UserAttributeResolver">
            <summary>
            Resolves From attribute as a PartyId
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.UserAttributeResolver.#ctor(Altinn.AccessManagement.Core.Services.Interfaces.IContextRetrievalService,Altinn.AccessManagement.Core.Clients.Interfaces.IProfileClient)">
            <summary>
            Resolves To attribute as a either a PartyId (if found as an organization) or a UserId (if found as a user)
            </summary>
            <param name="contextRetrievalService">service init</param>
            <param name="profile">profile client</param>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.UserAttributeResolver.ResolveFromUser">
            <summary>
            Resolves a UserId if given <see cref="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.UserAttribute"/> exists
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.UserAttributeResolver.ResolveFromParty">
            <summary>
            Resolves a party if given a <see cref="F:Altinn.AccessManagement.Core.Constants.AltinnXacmlConstants.MatchAttributeIdentifiers.PartyAttribute"/>
            </summary>
        </member>
        <member name="M:Altinn.AccessManagement.Resolvers.UserAttributeResolver.ResolveUserIdUsingIdentifierNo">
            <summary>
            Resolves a person to a userId
            </summary>
        </member>
    </members>
</doc>
