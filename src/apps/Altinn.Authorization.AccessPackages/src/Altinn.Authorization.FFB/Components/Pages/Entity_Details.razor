@page "/entity/{Id:guid}"
@inject IEntityService entityData
@inject IAssignmentService assignmentData
@inject IEntityService entityService
@inject IGroupService groupService
@inject IGroupMemberService groupMemberService
@inject IGroupAdminService groupAdminService
@inject IDelegationService delegationService
@inject IDelegationGroupService delegationGroupService
@inject IDelegationAssignmentService delegationAssignmentService

@if(Entity != null)
{

    <PageTitle>Entity - @Entity.Name</PageTitle>

    <PageHeader>
        <LeftContent>
            <H1><EntityTypeIcon Id="@Entity.TypeId" /> @Entity.Name</H1>
        </LeftContent>
        <RightContent>
            <ButtonGroup>
                <Button OnClick=@(() => CreateGroupModalIsOpen = !CreateGroupModalIsOpen)>Ny gruppe</Button>
                @*<button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Resource</button>
                <button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Tags</button>
                <button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Translation</button> *@
            </ButtonGroup>
        </RightContent>
    </PageHeader>

    <VerticalTable>
        <VerticalTableCell Title="Type"><a href=@($"/entitytype/{Entity.Type.Id}")>@Entity.Type.Name</a></VerticalTableCell>
        <VerticalTableCell Title="Variant"><a href=@($"/entityvariant/{Entity.Variant.Id}")>@Entity.Variant.Name</a></VerticalTableCell>
        <VerticalTableCell Title="RefId">@Entity.RefId</VerticalTableCell>
    </VerticalTable>

    @if(FromAssignments != null && FromAssignments.Any())
    {
        <div>
            <h4>Roller (for)</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>From</th>
                        <th>Role</th>
                        <th>To</th>
                        <th>Delegation</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var toId in FromAssignments.Select(t=>t.ToId).Distinct())
                    {
                        var assignment = FromAssignments.First(t => t.ToId == toId);
                        <tr class="bf-table-row bf-table-row-compact">
                            <td title="@assignment.From.RefId"><a href=@($"/entity/{assignment.From.Id}")><EntityTypeIcon Id="@assignment.From.TypeId" />@assignment.From.Name</a></td>
                            <td>
                                <div style="display:flex; gap:4px;">
                                    @foreach (var assignmentRole in FromAssignments.Where(t=>t.ToId == toId).OrderBy(t=>t.Role.Name))
                                    {
                                        <Badge Title="@assignmentRole.Role.Description">@assignmentRole.Role.Code</Badge>
                                    }
                                </div>
                            </td>
                            <td title="@assignment.To.RefId"><a href=@($"/entity/{assignment.To.Id}")><EntityTypeIcon Id="@assignment.To.TypeId" />@assignment.To.Name</a></td>
                            <td>
                                @if (DelegationAssignments.Count(t => t.AssignmentId == assignment.Id) > 0)
                                {
                                    var delegationAss = DelegationAssignments.First(t => t.AssignmentId == assignment.Id);
                                    var delegation = Delegations.First(t => t.Id == delegationAss.DelegationId);
                                    var ass = ToAssignments.First(t => t.Id == delegation.AssignmentId);
                                    @ass.From.Name
                                    <Badge Title="@ass.Role.Description">@ass.Role.Code</Badge>
                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (ToAssignments != null && ToAssignments.Any())
    {
        <div>
            <h4>Roller (to)</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>From</th>
                        <th>Role</th>
                        <th>To</th>
                        <th>Delegated</th>
                        <th>Action</th>
                    </tr>
                </thead>    
                <tbody>

                    @foreach (var forId in ToAssignments.Select(t => t.FromId).Distinct())
                    {
                        var assignment = ToAssignments.First(t => t.FromId == forId);
                        <tr class="bf-table-row bf-table-row-compact">
                            <td title="@assignment.From.RefId"><a href=@($"/entity/{assignment.From.Id}")><EntityTypeIcon Id="@assignment.From.TypeId" />@assignment.From.Name</a></td>
                            <td>
                                <div style="display:flex; gap:4px;">
                                    @foreach (var assignmentRole in ToAssignments.Where(t => t.FromId == forId).OrderBy(t => t.Role.Name))
                                    {
                                        <Badge Title="@assignmentRole.Role.Description">@assignmentRole.Role.Code</Badge>
                                    }
                                </div>
                            </td>
                            <td title="@assignment.To.RefId"><a href=@($"/entity/{assignment.To.Id}")><EntityTypeIcon Id="@assignment.To.TypeId" />@assignment.To.Name</a></td>
                            <td>
                                @if (Delegations.Count(t => t.AssignmentId == assignment.Id) > 0)
                                {
                                    <Icon Name="check"></Icon>

                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                            <td>
                                <Button>Deleger</Button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (Groups != null && Groups.Any())
    {
        <div>
            <h4>Grupper</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Delegering</th>
                    </tr>
                </thead>    
                <tbody>

                    @foreach (var group in Groups)
                    {
                        <tr class="bf-table-row bf-table-row-compact">
                            <td><a href=@($"/group/{group.Id}")>@group.Name</a></td>
                            <td>
                                @if (DelegationGroups.Count(t => t.GroupId == group.Id) > 0)
                                {
                                    var delegationGroup = DelegationGroups.First(t => t.GroupId == group.Id);
                                    var delegation = Delegations.First(t => t.Id == delegationGroup.DelegationId);
                                    var ass = ToAssignments.First(t => t.Id == delegation.AssignmentId);
                                    @ass.From.Name
                                    <Badge Title="@ass.Role.Description">@ass.Role.Code</Badge>
                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (GroupMemberships != null && GroupMemberships.Any())
    {
        <div>
            <h4>Gruppe medlemskap</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Medlem</th>
                        <th>Admin</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var grpMem in GroupMemberships)
                    {
                        <tr class="bf-table-row bf-table-row-compact">
                            <td><a href=@($"/group/{grpMem.Group.Id}")>@grpMem.Group.Name</a></td>
                            <td><Icon Name=@(grpMem.IsMember ? "check" : "xmark")></Icon></td>
                            <td><Icon Name=@(grpMem.IsAdmin ? "check" : "xmark")></Icon></td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    <Drawer Title="Ny gruppe" @bind-IsOpen=CreateGroupModalIsOpen >
        <Input Title="Navn" @bind-Value=CreateGroupName Description="Et unikt navn i din organisasjon"></Input>
        <hr />
        @if(!string.IsNullOrEmpty(CreateGroupMessage.msg))
        {
            <Message State=@(CreateGroupMessage.success ? Message.MsgState.Success : Message.MsgState.Alert)>
                @CreateGroupMessage.msg
            </Message>
            <hr />
        }
        <Button Variant="Button.ButtonVariant.Filled" OnClick=@(() => CreateGroup())>Opprett</Button>

    </Drawer>

}


@code {

    [Parameter] public Guid Id { get; set; }
    public ExtEntity Entity { get; set; }
    public List<ExtAssignment> FromAssignments { get; set; }
    public List<ExtAssignment> ToAssignments { get; set; }

    public List<EntityGroup> Groups { get; set; }
    private List<GroupMembership> GroupMemberships { get; set; }

    public List<Delegation> Delegations { get; set; } = new List<Delegation>();
    public List<DelegationGroup> DelegationGroups { get; set; } = new List<DelegationGroup>();
    public List<DelegationAssignment> DelegationAssignments { get; set; } = new List<DelegationAssignment>(); 

    protected async override Task OnParametersSetAsync()
    {
        var opt = UserData.GetRequestOptions();

        Entity = await entityData.GetExtended(Id, options: opt);
        if(Entity != null)
        {
            FromAssignments = [.. await assignmentData.GetExtended(t => t.FromId, Entity.Id, options: opt) ?? new List<ExtAssignment>()];
            ToAssignments = [.. await assignmentData.GetExtended(t => t.ToId, Entity.Id, options: opt) ?? new List<ExtAssignment>()];

            await LoadGroups();
        }

        // if (FromAssignments != null && FromAssignments.Any())
        // {
        //     foreach(var ass in FromAssignments)
        //     {
        //         Delegations.AddRange(await delegationService.Get(t => t.AssignmentId, value: ass.Id));
        //     }
        // }
        if (ToAssignments != null && ToAssignments.Any())
        {
            foreach (var ass in ToAssignments)
            {
                Delegations.AddRange(await delegationService.Get(t => t.AssignmentId, value: ass.Id));
            }
        }

        if(Delegations != null && Delegations.Any())
        {
            foreach(var delegation in Delegations)
            {
                DelegationGroups.AddRange(await delegationGroupService.Get(t => t.DelegationId, delegation.Id));
                DelegationAssignments.AddRange(await delegationAssignmentService.Get(t => t.DelegationId, delegation.Id));
            }
        }

    }

    public bool CreateGroupModalIsOpen { get; set; }
    public string CreateGroupName { get; set; }
    public (string msg, bool success) CreateGroupMessage { get; set; }
    private async Task LoadGroups()
    {
        Groups = [.. await groupService.Get(t => t.OwnerId, Entity.Id)];
        GroupMemberships = new List<GroupMembership>();

        var groupMembers = await groupMemberService.Get(t => t.MemberId, Entity.Id);
        var groupAdmins = await groupAdminService.Get(t => t.MemberId, Entity.Id);

        foreach(var member in groupMembers)
        {
            if (GroupMemberships.Exists(t => t.Group.Id == member.GroupId))
            {
                var mem = GroupMemberships.First(t => t.Group.Id == member.GroupId);
                mem.IsMember = true;
            }
            else
            {
                var grp = await groupService.Get(member.GroupId);
                if(grp == null) { continue; }
                GroupMemberships.Add(new GroupMembership() { Group = grp, IsAdmin = false, IsMember = true });
            }
        }

        foreach (var member in groupAdmins)
        {
            if (GroupMemberships.Exists(t => t.Group.Id == member.GroupId))
            {
                var mem = GroupMemberships.First(t => t.Group.Id == member.GroupId);
                mem.IsAdmin = true;
            }
            else
            {
                var grp = await groupService.Get(member.GroupId);
                if (grp == null) { continue; }
                GroupMemberships.Add(new GroupMembership() { Group = grp, IsAdmin = true, IsMember = false });
        }
        }
    }
    private async Task CreateGroup()
    {
        if (string.IsNullOrEmpty(CreateGroupName))
        {
            CreateGroupMessage = ("Name is null or empty", false);
            return;
        }
        await groupService.Create(new EntityGroup() { Id = Guid.NewGuid(), Name = CreateGroupName, OwnerId = Entity.Id, RequireRole = false });
        CreateGroupMessage = ($"Created '{CreateGroupName}' group!", true);
        CreateGroupName = "";
        await LoadGroups();
    }


    private class GroupMembership 
    {
        public EntityGroup Group { get; set; }
        public bool IsMember { get; set; }
        public bool IsAdmin { get; set; }
    }
}
