@page "/entity/{Id:guid}"
@inject IEntityService entityData
@inject IAssignmentService assignmentData
@inject IEntityService entityService
@inject IGroupService groupService
@inject IDelegationService delegationService
@inject IDelegationGroupService delegationGroupService
@inject IDelegationAssignmentService delegationAssignmentService

@if(Entity != null)
{

    <PageTitle>Entity - @Entity.Name</PageTitle>

    <PageHeader>
        <LeftContent>
            <H1><EntityTypeIcon Id="@Entity.TypeId" /> @Entity.Name</H1>
        </LeftContent>
        <RightContent>
            @*  <button @onclick=@(() => Flyouts.ToggleFlyout("edit"))>Edit</button>
            <button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Resource</button>
            <button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Tags</button>
            <button @onclick=@(() => Flyouts.ToggleFlyout("newPackageResource"))>Translation</button> *@
        </RightContent>
    </PageHeader>

    <table class="bf-table bfc-base-3-bg bf-table-vertical-header" style="width: auto">
        <tbody>
            <tr class="bf-table-row bf-table-row-compact">
                <th>Type</th>
                <td><a href=@($"/entitytype/{Entity.Type.Id}")>@Entity.Type.Name</a></td>
            </tr>
            <tr class="bf-table-row bf-table-row-compact">
                <th>Variant</th>
                <td><a href=@($"/entityvariant/{Entity.Variant.Id}")>@Entity.Variant.Name</a></td>
            </tr>
            <tr class="bf-table-row bf-table-row-compact">
                <th>RefId</th>
                <td>@Entity.RefId</td>
            </tr>
        </tbody>
    </table>

    @if(FromAssignments != null && FromAssignments.Any())
    {
        <div>
            <h4>Roller (for)</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>From</th>
                        <th>Role</th>
                        <th>To</th>
                        <th>Delegated</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var toId in FromAssignments.Select(t=>t.ToId).Distinct())
                    {
                        var assignment = FromAssignments.First(t => t.ToId == toId);
                        <tr class="bf-table-row bf-table-row-compact">
                            <td title="@assignment.From.RefId"><a href=@($"/entity/{assignment.From.Id}")><EntityTypeIcon Id="@assignment.From.TypeId" />@assignment.From.Name</a></td>
                            <td>
                                <div style="display:flex; gap:4px;">
                                    @foreach (var assignmentRole in FromAssignments.Where(t=>t.ToId == toId).OrderBy(t=>t.Role.Name))
                                    {
                                        <Badge Title="@assignmentRole.Role.Description">@assignmentRole.Role.Code</Badge>
                                    }
                                </div>
                            </td>
                            <td title="@assignment.To.RefId"><a href=@($"/entity/{assignment.To.Id}")><EntityTypeIcon Id="@assignment.To.TypeId" />@assignment.To.Name</a></td>
                            <td>
                                @if (Delegations.Count(t => t.AssignmentId == assignment.Id) > 0)
                                {
                                    <Icon Name="check"></Icon>
                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (ToAssignments != null && ToAssignments.Any())
    {
        <div>
            <h4>Roller (to)</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>From</th>
                        <th>Role</th>
                        <th>To</th>
                        <th>Delegated</th>
                    </tr>
                </thead>    
                <tbody>

                    @foreach (var forId in ToAssignments.Select(t => t.FromId).Distinct())
                    {
                        var assignment = ToAssignments.First(t => t.FromId == forId);
                        <tr class="bf-table-row bf-table-row-compact">
                            <td title="@assignment.From.RefId"><a href=@($"/entity/{assignment.From.Id}")><EntityTypeIcon Id="@assignment.From.TypeId" />@assignment.From.Name</a></td>
                            <td>
                                <div style="display:flex; gap:4px;">
                                    @foreach (var assignmentRole in ToAssignments.Where(t => t.FromId == forId).OrderBy(t => t.Role.Name))
                                    {
                                        <Badge Title="@assignmentRole.Role.Description">@assignmentRole.Role.Code</Badge>
                                    }
                                </div>
                            </td>
                            <td title="@assignment.To.RefId"><a href=@($"/entity/{assignment.To.Id}")><EntityTypeIcon Id="@assignment.To.TypeId" />@assignment.To.Name</a></td>
                            <td>
                                @if (Delegations.Count(t => t.AssignmentId == assignment.Id) > 0)
                                {
                                    <Icon Name="check"></Icon>
                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (Groups != null && Groups.Any())
    {
        <div>
            <h4>Grupper</h4>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Delegering</th>
                    </tr>
                </thead>    
                <tbody>

                    @foreach (var group in Groups)
                    {
                        <tr class="bf-table-row bf-table-row-compact">
                            <td><a href=@($"/group/{group.Id}")>@group.Name</a></td>
                            <td>
                                @if (DelegationGroups.Count(t => t.GroupId == group.Id) > 0)
                                {
                                    <Icon Name="check"></Icon>
                                }
                                else
                                {
                                    <Icon Name="xmark"></Icon>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

    @if (Delegations != null && Delegations.Any())
    {
        <div>
            <ul>

                @foreach (var delegation in Delegations)
                {
                    <li>@delegation.Id.ToString()</li>
                }

            </ul>
        </div>
    }

}


@code {

    [Parameter] public Guid Id { get; set; }
    public ExtEntity Entity { get; set; }
    public List<ExtAssignment> FromAssignments { get; set; }
    public List<ExtAssignment> ToAssignments { get; set; }

    public List<EntityGroup> Groups { get; set; } = new List<EntityGroup>();

    public List<Delegation> Delegations { get; set; } = new List<Delegation>();
    public List<DelegationGroup> DelegationGroups { get; set; } = new List<DelegationGroup>();
    public List<DelegationAssignment> DelegationAssignments { get; set; } = new List<DelegationAssignment>(); 

    protected async override Task OnParametersSetAsync()
    {
        var opt = UserData.GetRequestOptions();

        Entity = await entityData.GetExtended(Id, options: opt);
        if(Entity != null)
        {
            FromAssignments = [.. await assignmentData.GetExtended(t => t.FromId, Entity.Id, options: opt) ?? new List<ExtAssignment>()];
            ToAssignments = [.. await assignmentData.GetExtended(t => t.ToId, Entity.Id, options: opt) ?? new List<ExtAssignment>()];

            Groups = [.. await groupService.Get(t => t.OwnerId, Entity.Id)];
        }

        // if (FromAssignments != null && FromAssignments.Any())
        // {
        //     foreach(var ass in FromAssignments)
        //     {
        //         Delegations.AddRange(await delegationService.Get(t => t.AssignmentId, value: ass.Id));
        //     }
        // }
        if (ToAssignments != null && ToAssignments.Any())
        {
            foreach (var ass in ToAssignments)
            {
                Delegations.AddRange(await delegationService.Get(t => t.AssignmentId, value: ass.Id));
            }
        }

        if(Delegations != null && Delegations.Any())
        {
            foreach(var delegation in Delegations)
            {
                DelegationGroups.AddRange(await delegationGroupService.Get(t => t.DelegationId, delegation.Id));
                DelegationAssignments.AddRange(await delegationAssignmentService.Get(t => t.DelegationId, delegation.Id));
            }
        }

    }

}
