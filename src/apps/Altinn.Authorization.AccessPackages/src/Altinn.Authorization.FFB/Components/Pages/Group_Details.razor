@page "/group/{id}"
@inject Altinn.Authorization.AccessPackages.Repo.Data.Contracts.IGroupService groupService
@inject IEntityService entityService
@inject IDelegationGroupService delegationGroupService
@inject IDelegationService delegationService
@inject IAssignmentService assignmentService
@inject IGroupMemberService groupMemberService
@inject IGroupAdminService groupAdminService

@if (Group != null)
{
    <PageTitle>@Group.Name</PageTitle>

    <PageHeader>
        <LeftContent>
            <BreadcrumbContainer>
                <BreadcrumbItem Url=@($"/entity/{Group.OwnerId}")>@Group.Owner.Name</BreadcrumbItem>
            </BreadcrumbContainer>
            <H1>@Group.Name</H1>
        </LeftContent>
        <RightContent>
            <ButtonGroup>
                <Button OnClick=@(() => CreateAdminIsOpen = !CreateAdminIsOpen)>Ny administrator</Button>
                <Button OnClick=@(() => CreateMemberIsOpen = !CreateMemberIsOpen)>Nytt medlem</Button>
            </ButtonGroup>
        </RightContent>
    </PageHeader>

    <Grid>

        <div>
            <H2>Administratorer</H2>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>


                    @foreach(var member in Group.Administrators)
                    {
                        var mem = LookupEntity(member.MemberId);
                        if(mem == null) { break; }

                        <tr class="bf-table-row bf-table-row-compact">
                            <td>

                                <EntityTypeIcon Id=@mem.TypeId />
                                <a href=@($"/entity/{mem.Id}")>
                                    @mem.Name
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <div>
            <H2>Medlemmer</H2>

            <table class="bf-table bfc-base-3-bg">
                <thead>
                    <tr>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>


                    @foreach(var member in Group.Members)
                    {
                        var mem = LookupEntity(member.MemberId);
                        if(mem == null) { break; }

                        <tr class="bf-table-row bf-table-row-compact">
                            <td>
                                <EntityTypeIcon Id=@mem.TypeId />
                                <a href=@($"/entity/{mem.Id}")>
                                    @mem.Name
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <div>
            <H2>Tildelinger</H2>
            <pre>TBA</pre>
        </div>

        @if(DelegatedAssignments != null && DelegatedAssignments.Any())
        {
            <div>

                <H2>Delegerte rettigheter</H2>
                <table class="bf-table bfc-base-3-bg">
                    <thead>
                        <tr>
                            <th>From</th>
                            <th>Role</th>
                            <th>To</th>
                            <th>Pakker</th>
                        </tr>
                    </thead>    
                    <tbody>

                        @foreach (var assignment in DelegatedAssignments.DistinctBy(t => t.Id))
                        {
                            <tr class="bf-table-row bf-table-row-compact">
                                <td title="@assignment.From.RefId"><a href=@($"/entity/{assignment.From.Id}")><EntityTypeIcon Id="@assignment.From.TypeId" />@assignment.From.Name</a></td>
                                <td>
                                    <div style="display:flex; gap:4px;">
                                        <Badge Title="@assignment.Role.Description">@assignment.Role.Code</Badge>
                                    </div>
                                </td>
                                <td title="@assignment.To.RefId"><a href=@($"/entity/{assignment.To.Id}")><EntityTypeIcon Id="@assignment.To.TypeId" />@assignment.To.Name</a></td>
                                <td><em>TBA</em></td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>

        }

    </Grid>

    <Drawer @bind-IsOpen=CreateAdminIsOpen Title="Legg til administrator">

        <InputContainer Title="Velg bruker">
            <input class="bf-input" @bind="CreateAdminUserSearchTerm" @bind:event="oninput" @bind:after="SearchAdmin" />
        </InputContainer>

        @if (CreateAdminSearchResult != null && CreateAdminSearchResult.Any())
        {
            <div style="display:flex; gap:2px; flex-direction: column;">
                @foreach (var entity in CreateAdminSearchResult)
                {
                    <div style="cursor:pointer;background-color: white; padding:4px;" @onclick="() => SetSelectedAdmin(entity)">@entity.Name</div>
                }
            </div>
        }
        <hr />
        @if (!string.IsNullOrEmpty(CreateAdminMessage.msg))
        {
            <Message State=@(CreateAdminMessage.success ? Message.MsgState.Success : Message.MsgState.Alert)>
                @CreateAdminMessage.msg
            </Message>
            <hr />
        }
        <Button Variant=Button.ButtonVariant.Filled OnClick="CreateAdmin">Opprett</Button>

    </Drawer>

    <Drawer @bind-IsOpen=CreateMemberIsOpen Title="Legg til medlem">

        <InputContainer Title="Velg bruker">
            <input class="bf-input" @bind="CreateMemberUserSearchTerm" @bind:event="oninput" @bind:after="SearchMember" />
        </InputContainer>

        @if (CreateMemberSearchResult != null && CreateMemberSearchResult.Any())
        {
            <div style="display:flex; gap:2px; flex-direction: column;">
                @foreach(var entity in CreateMemberSearchResult)
                {
                    <div style="cursor:pointer;background-color: white; padding:4px;" @onclick="() => SetSelectedMember(entity)">@entity.Name</div>
                }
            </div>
        }
        <hr />
        @if (!string.IsNullOrEmpty(CreateMemberMessage.msg))
        {
            <Message State=@(CreateMemberMessage.success ? Message.MsgState.Success : Message.MsgState.Alert)>
                @CreateMemberMessage.msg
            </Message>
            <hr />
        }
        <Button Variant=Button.ButtonVariant.Filled OnClick="CreateMember">Opprett</Button>

    </Drawer>

}


@code {

    [Parameter] public string id { get; set; }

    public ExtEntityGroup Group { get; set; }
    public List<ExtEntity> Entities { get; set; } = new List<ExtEntity>();

    public List<Delegation> Delegations { get; set; }
    public List<ExtAssignment> DelegatedAssignments { get; set; } = new List<ExtAssignment>();

    protected override async Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        Group = await groupService.GetExtended(Guid.Parse(id));
        foreach (var gm in Group.Members)
        {
            Entities.Add(await entityService.GetExtended(gm.MemberId));
        }
        foreach (var gm in Group.Administrators)
        {
            Entities.Add(await entityService.GetExtended(gm.MemberId));
        }

        Delegations = [.. await delegationGroupService.GetA(Group.Id)];

        foreach (var delegation in Delegations)
        {
            DelegatedAssignments.Add(await assignmentService.GetExtended(delegation.AssignmentId));
        }
    }

    private ExtEntity? LookupEntity(Guid id)
    {
        return Entities.FirstOrDefault(t => t.Id == id);
    }


    public bool CreateAdminIsOpen { get; set; }
    public string CreateAdminUserSearchTerm { get; set; }
    public IEnumerable<Entity> CreateAdminSearchResult { get; set; }
    public Entity CreateAdminSelectedUser { get; set; }
    public (string msg, bool success) CreateAdminMessage { get; set; }
    private async Task CreateAdmin()
    {
        try
        {
            if (CreateAdminSelectedUser == null)
            {
                throw new Exception("User not selected...");
            }
            await groupAdminService.Create(new GroupAdmin() { Id = Guid.NewGuid(), GroupId = Group.Id, MemberId = CreateAdminSelectedUser.Id });
            await Load();
            CreateAdminMessage = ($"Created administrator!", true);
            CreateAdminUserSearchTerm = "";
            CreateAdminSelectedUser = null;
        } 
        catch (Exception ex)
        {
            CreateAdminMessage = ("Failed to create group administrator. " + ex.Message, false);
        }
    }
    private async Task SearchAdmin()
    {
        var res = await entityService.Search(CreateAdminUserSearchTerm, new RequestOptions() { OrderBy = "Name", PageSize = 10, PageNumber = 1, UsePaging = true });
        CreateAdminSearchResult = [.. res];
    }
    private void SetSelectedAdmin(Entity entity)
    {
        CreateAdminSelectedUser = entity;
    }

    public bool CreateMemberIsOpen { get; set; }
    public string CreateMemberUserSearchTerm { get; set; }
    public EventCallback<string> CreateMemberUserSearchTermChanged { get; set; }
    public IEnumerable<Entity> CreateMemberSearchResult { get; set; }
    public Entity CreateMemberSelectedUser { get; set; }
    public (string msg, bool success) CreateMemberMessage { get; set; }
    private async Task CreateMember()
    {
        try
        {
            if (CreateMemberSelectedUser == null)
            {
                throw new Exception("User not selected...");
            }
            await groupMemberService.Create(new GroupMember() { Id = Guid.NewGuid(), GroupId = Group.Id, MemberId = CreateMemberSelectedUser.Id });
            await Load();
            CreateMemberMessage = ($"Added '{CreateMemberSelectedUser.Name}' as member!", true);
            CreateMemberUserSearchTerm = "";
            CreateMemberSelectedUser = null;
        }
        catch (Exception ex)
        {
            CreateMemberMessage = ("Failed to create group member. " + ex.Message, false);
        }
    }
    private async Task SearchMember()
    {
        Console.WriteLine("Search " + CreateMemberUserSearchTerm);
        var res = await entityService.Search(CreateMemberUserSearchTerm, new RequestOptions() { OrderBy = "Name", PageSize = 10, PageNumber = 1, UsePaging = true });
        CreateMemberSearchResult = [.. res];
    }
    private void SetSelectedMember(Entity entity)
    {
        CreateMemberSelectedUser = entity;
    }
}
