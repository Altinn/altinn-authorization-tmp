@page "/areagroup/{id:guid}"
@inject IAreaGroupService areaGroupService
@inject IAreaService areaService


@if(AreaGroup != null)
{
    <PageTitle>Områdegruppe - @AreaGroup.Name</PageTitle>
    <PageHeader>
        <LeftContent>
            <BreadcrumbContainer>
                <BreadcrumbItem Url=@($"/areas")>Areas</BreadcrumbItem>
                <BreadcrumbItem Url=@($"/areagroup/{AreaGroup.Id}")>@AreaGroup.Name</BreadcrumbItem>
            </BreadcrumbContainer>
            <H1>@AreaGroup.Name</H1>
            <em>@AreaGroup.Description</em>
        </LeftContent>
        <RightContent>
        
        </RightContent>
    </PageHeader>

    <div>
        <H3>Områder</H3>
        <table class="bf-table bfc-base-3-bg" style="margin-bottom: 12px;">
            <thead>
                <tr>
                    <th>&nbsp;</th>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var area in Areas.OrderBy(t => t.Name))
                {
                    <tr class="bf-table-row bf-table-row-compact">
                        <td>
                            <Styx.Visual.SvgIcon Path="@area.IconName" Small />
                        </td>
                        <td>
                            <a href=@($"/area/{area.Id}")>@area.Name</a>
                        </td>
                        <td>@area.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter] public Guid id { get; set; }
    public AreaGroup? AreaGroup { get; set; }
    public List<ExtArea> Areas { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        var opt = UserData.GetRequestOptions();
        AreaGroup = await areaGroupService.Get(id, options: opt);
        if (AreaGroup != null)
        {
            Areas = [.. await areaService.GetExtended(t => t.GroupId, AreaGroup.Id, options: opt)];
        }
    }

}
