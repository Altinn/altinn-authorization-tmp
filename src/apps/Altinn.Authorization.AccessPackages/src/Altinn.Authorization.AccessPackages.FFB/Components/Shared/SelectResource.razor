@inject IResourceService data
<InputContainer Title=@Title Description=@Description>
    <input class="bf-input" @bind-value="SearchTerm" @oninput=HandleInputTextInput placeholder="Søk ..." />
    @if (ShowSearch && Objects != null && Objects.Any())
    {
        <div class="bf-accordion">
            @foreach (var obj in Objects)
            {
                <div class="bf-accordion-item @(Selected != null && Selected.Id == obj.Id ? "selected" : "")">
                    <div class="bf-accordion-item-title">
                        <button @onclick=@(() => ToggleSelected(obj))>@obj.Name</button>
                    </div>
                </div>
            }
        </div>
    }
</InputContainer>
@code {
    [Parameter] public string Title { get; set; } = "Velg ressurs";
    [Parameter] public string Description { get; set; }
    [Parameter] public int ResultSize { get; set; } = 10;

    [Parameter] public Resource Selected { get; set; }
    [Parameter] public EventCallback<Resource> SelectedChanged { get; set; }

    public bool ShowSearch { get; set; }

    public IEnumerable<Resource> Objects { get; set; }
    public string SearchTerm { get; set; }

    private async Task ToggleSelected(Resource id)
    {
        if (Selected != null && Selected.Equals(id))
        {
            await SelectedChanged.InvokeAsync(null);
            SearchTerm = "";
        }
        else
        {
            await SelectedChanged.InvokeAsync(id);
            SearchTerm = id.Name;
            ShowSearch = false;
        }
    }
    private async Task HandleInputTextInput(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        await SearchData();
    }
    private async Task SearchData()
    {
        await SelectedChanged.InvokeAsync(null);
        ShowSearch = true;
        var res = await data.SearchPaged(SearchTerm, new RequestOptions() { OrderBy = "Name", PageNumber = 1, PageSize = ResultSize, UsePaging = true });
        Objects = res.Data;
    }

}
