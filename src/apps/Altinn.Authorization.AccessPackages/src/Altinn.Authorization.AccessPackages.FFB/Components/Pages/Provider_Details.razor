@page "/provider/{Id:guid}"
@inject IProviderService providerData
@inject IResourceGroupService resourceGroupData
@inject IResourceService resourceData
@inject IRoleService roleData

@if(Provider != null)
{

    <PageTitle>Provider - @Provider.Name</PageTitle>

    <PageHeader>
        <LeftContent>
            <BreadcrumbContainer>
                <BreadcrumbItem Url="/providers">Providers</BreadcrumbItem>
                <BreadcrumbItem Url=@($"/provider/{Provider.Id}")>@Provider.Name</BreadcrumbItem>
            </BreadcrumbContainer>
            <H1>@Provider.Name</H1>
        </LeftContent>
        <RightContent>
            
        </RightContent>
    </PageHeader>

    <Grid Medium="2">

        @if(Roles != null && Roles.Any())
        {
            <div>
                <div>
                    <H2>Roller</H2>
                    <Input @bind-Value=RoleSearchTerm Placeholder="Search" />
                    <hr />
                </div>
                <table class="bf-table bfc-base-3-bg">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Provider</th>
                            <th>Type</th>
                            <th>URN</th>
                            <th>Description</th>
                            <th>Code</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var role in RolesFiltered.OrderBy(t => t.Name))
                        {
                        <tr class="bf-table-row bf-table-row-compact">
                            <td><a href=@($"/role/{role.Id}")>@role.Name</a></td>
                            <td><a href=@($"/provider/{role.Provider.Id}")>@role.Provider.Name</a></td>
                            <td><a href=@($"/entitytype/{role.EntityType.Id}")>@role.EntityType.Name</a></td>
                            <td>@role.Urn</td>
                            <td>@role.Description</td>
                            <td>@role.Code</td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if(Resources != null && Resources.Any())
        {
            <div>
                <div>
                    <H2>Ressurser</H2>
                    <Input @bind-Value=ResourceSearchTerm Placeholder="Search" />
                    <hr />
                </div>
                <table class="bf-table bfc-base-3-bg">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Group</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var resource in ResourceFiltered.OrderBy(t => t.Name))
                        {
                            <tr class="bf-table-row bf-table-row-compact">
                                <td><a href=@($"/resource/{resource.Id}")>@resource.Name</a></td>
                                <td><a href=@($"/resourcegroup/{resource.Group.Id}")>@resource.Group.Name</a></td>
                                <td>@resource.Type.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

    </Grid>
}
@code {

    [Parameter] public Guid Id { get; set; }

    public Provider Provider { get; set; }

    public List<ExtRole> Roles { get; set; }
    //public List<ResourceGroup> ResourceGroups { get; set; } = new List<ResourceGroup>();
    public List<ExtResource> Resources { get; set; } = new List<ExtResource>();

    public string RoleSearchTerm { get; set; } = "";
    public string ResourceSearchTerm { get; set; } = "";

    List<ExtResource> ResourceFiltered => Resources.Where(i => i.Name.ToLower().Contains(ResourceSearchTerm.ToLower())).ToList();
    List<ExtRole> RolesFiltered => Roles.Where(i => i.Name.ToLower().Contains(RoleSearchTerm.ToLower()) || i.Description.ToLower().Contains(RoleSearchTerm.ToLower())).ToList();


    protected override async Task OnInitializedAsync()
    {
        var opt = UserData.GetRequestOptions();

        Provider = await providerData.Get(Id, options: opt);
        Roles = [.. await roleData.GetExtended("ProviderId", Id, options: opt)];
        // ResourceGroups = [.. await resourceGroupData.Get("ProviderId", Provider.Id) ?? new List<ResourceGroup>()];
        // if(ResourceGroups != null)
        // {
        //     Resources = new List<ExtResource>();
        //     foreach(var rg in ResourceGroups)
        //     {
        //         Resources.AddRange(await resourceData.GetExtended("GroupId", rg.Id) ?? new List<ExtResource>());
        //     }
        // }
    }

}
