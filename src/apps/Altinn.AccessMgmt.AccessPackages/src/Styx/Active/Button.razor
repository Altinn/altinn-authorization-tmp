<button type="button" class="@(Class())" @onclick="@(()=>OnClick.InvokeAsync())">@ChildContent</button>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Normal;
    [Parameter] public ButtonState State { get; set; } = ButtonState.Default;
    [Parameter] public bool Pill { get; set; } = false;
    [Parameter] public bool Small { get; set; } = false;

    [Parameter] public EventCallback OnClick { get; set; }

    private string Class()
    {
        string res = "bf-button";

        //res += Variant == ButtonVariant.Normal ? "" : "";
        res += Variant == ButtonVariant.Filled ? " bf-button-filled" : "";
        res += Variant == ButtonVariant.Flat ? " bf-button-flat" : "";

        //res += State == ButtonState.Default ? "" : "";
        res += State == ButtonState.Neutral ? " bf-button-neutral" : "";
        res += State == ButtonState.Inactive ? " bf-button-inactive" : "";
        res += State == ButtonState.Inverted ? " bf-button-inverted" : "";
        res += State == ButtonState.Alert ? " bf-button-alert" : "";

        res += Pill ? " bf-button-pill" : "";
        res += Small ? " bf-button-small" : "";

        return res;
    }

    public enum ButtonVariant { Normal, Filled, Flat };
    public enum ButtonState { Default, Neutral, Inactive, Inverted, Alert }

}
