// using System.CommandLine;
// using System.Reflection;
// using Altinn.Authorization.Hosting.Utils;
// using Azure.Core;
// using Azure.Identity;
// using Microsoft.Extensions.Logging;
// using Npgsql;

// namespace Altinn.Authorization.Hosting.Commands;

// /// <summary>
// /// Defines the command and handler for managing access to a database.
// /// </summary>
// public partial class AccessCommand
// {
//     /// <summary>
//     /// Creates the 'access' command with its arguments and options.
//     /// </summary>
//     /// <returns>The configured command object.</returns>
//     public static Command GetCommand()
//     {
//         var cmd = new Command("access", "Manage database access configurations.");

//         var host = new Argument<string>("Host", () => "localhost:5050", "The database host address.");
//         var database = new Argument<string>("Database", "The name of the database.");
//         var authorizePrincipalId = new Argument<string>("AuthorizePrincipalId", () => Environment.GetEnvironmentVariable("Azure__AuthorizePrincipalId"), "Managed identity ID to authorize.");

//         var username = new Option<string>("--username", () => "root", "The username for database access.");
//         var password = new Option<string>("--password", () => "root", "The password for the database.");

//         var principalId = new Option<string>("--principal-id", () => Environment.GetEnvironmentVariable("Azure__PrincipalId"), "Managed identity ID for authentication.");

//         cmd.AddArgument(host);
//         cmd.AddArgument(database);
//         cmd.AddArgument(authorizePrincipalId);
//         cmd.AddOption(username);
//         cmd.AddOption(password);
//         cmd.AddOption(principalId);

//         cmd.SetHandler(Handler, host, database, authorizePrincipalId, username, password, principalId);

//         return cmd;
//     }

//     public static async Task ExecuteUsingEnv()
//     {
//         var host = Environment.GetEnvironmentVariable("Postgres__Host");
//         var database = Environment.GetEnvironmentVariable("Postgres__Database");
//         var authorizePrincipalId = Environment.GetEnvironmentVariable("Azure__PrincipalId");
//         var principalId = Environment.GetEnvironmentVariable("Postgres__PrincipalAdminId");
//         if (string.IsNullOrEmpty(host) || string.IsNullOrEmpty(database) || string.IsNullOrEmpty(authorizePrincipalId) || string.IsNullOrEmpty(principalId))
//         {
//             StartupLogger.Logger.LogInformation("missing args in access {host} {database} {authorizePrincipalId} {principalId}", host, database, authorizePrincipalId, principalId);
//             return;
//         }

//         StartupLogger.Logger.LogInformation("running access {host} {database} {authorizePrincipalId} {principalId}", host, database, authorizePrincipalId, principalId);

//         await Handler(host, database, authorizePrincipalId, null, null, principalId);
//     }

//     /// <summary>
//     /// Handler method for executing the 'access' command.
//     /// </summary>
//     /// <param name="host">The database host address.</param>
//     /// <param name="database">The name of the database.</param>
//     /// <param name="authorizePrincipalId">Managed identity ID to authorize.</param>
//     /// <param name="username">The username for database access.</param>
//     /// <param name="password">The password for the database.</param>
//     /// <param name="principalId">Managed identity ID for authentication.</param>
//     /// <returns>A task representing the asynchronous operation.</returns>
//     public static async Task Handler(string host, string database, string authorizePrincipalId, string username, string password, string principalId)
//     {
//         Log.Command(StartupLogger.Logger);
//         var connectionString = new NpgsqlConnectionStringBuilder
//         {
//             Host = host,
//             Database = database,
//             SslMode = SslMode.Prefer
//         };

//         // Use managed identity if principalId or authorizePrincipalId is provided
//         if (!string.IsNullOrEmpty(authorizePrincipalId) && !string.IsNullOrEmpty(principalId))
//         {
//             Log.UseManagedIdentity(StartupLogger.Logger, authorizePrincipalId, principalId);
//             connectionString.Username = "AzureADUser";
//             var accessToken = await new ManagedIdentityCredential(principalId).GetTokenAsync(new TokenRequestContext(["https://ossrdbms-aad.database.windows.net/.default"]));
//             connectionString.Password = accessToken.Token;
//         }
//         else
//         {
//             Log.UseUsernameAndPassword(StartupLogger.Logger, authorizePrincipalId, username);
//             connectionString.Username = username;
//             connectionString.Password = password;
//         }

//         await using var conn = new NpgsqlConnection(connectionString.ToString());
//         await conn.OpenAsync();
//         var grantAccess = $"select * from pgaadauth_create_principal('{authorizePrincipalId}', false, false);";
//         await using var cmd = new NpgsqlCommand(grantAccess, conn);
//         await cmd.ExecuteNonQueryAsync();
//     }

//     /// <summary>
//     /// Contains logging methods for different scenarios in the AccessCommand.
//     /// </summary>
//     internal static partial class Log
//     {
//         [LoggerMessage(EventId = 100, Level = LogLevel.Information, Message = "Starting to configure principal access for postgres access.")]
//         internal static partial void Command(ILogger logger);

//         [LoggerMessage(EventId = 101, Level = LogLevel.Information, Message = "configure postgres authorization for principal {authorizePrincipalId} using user {username}.")]
//         internal static partial void UseUsernameAndPassword(ILogger logger, string authorizePrincipalId, string username);

//         [LoggerMessage(EventId = 102, Level = LogLevel.Information, Message = "configure postgres authorization for principal {authorizePrincipalId} using principal {principalId}.")]
//         internal static partial void UseManagedIdentity(ILogger logger, string authorizePrincipalId, string principalId);
//     }
// }