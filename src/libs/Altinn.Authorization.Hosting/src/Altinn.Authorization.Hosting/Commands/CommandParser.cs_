// using System.CommandLine;
// using System.CommandLine.Invocation;
// using System.CommandLine.Parsing;
// using Altinn.Authorization.Hosting.Utils;
// using Microsoft.Extensions.Logging;

// namespace Altinn.Authorization.Hosting.Commands;

// /// <summary>
// /// Provides methods for parsing command-line arguments and handling commands.
// /// </summary>
// public static partial class CommandParser
// {
//     /// <summary>
//     /// A flag indicating whether any command was executed.
//     /// </summary>
//     private static bool _anyCommandExecuted = false;

//     /// <summary>
//     /// Parses the provided command-line arguments, executes the relevant commands,
//     /// and determines if any command was executed.
//     /// </summary>
//     /// <param name="args">The command-line arguments to parse.</param>
//     /// <returns>A task representing the asynchronous operation, containing the result of the execution and whether any subcommands were executed.</returns>
//     public static async Task<ExecutionResult> Parse(string[] args)
//     {
//         var root = new RootCommand("Commands for handling devious tasks");

//         root.AddCommand(MigrateCommand.GetCommand());
//         root.AddCommand(AccessCommand.GetCommand());

//         root.SetHandler((InvocationContext context) =>
//         {
//             _anyCommandExecuted = true;
//         });

//         await AccessCommand.ExecuteUsingEnv();
//         await MigrateCommand.ExecuteUsingEnv();

//         var result = await root.InvokeAsync(args);

//         return new ExecutionResult
//         {
//             Result = result,
//             AnySubcommandsExecuted = _anyCommandExecuted,
//         };
//     }

//     /// <summary>
//     /// Represents the result of parsing and executing command-line arguments.
//     /// </summary>
//     public class ExecutionResult
//     {
//         /// <summary>
//         /// Gets or sets the result code of the command execution.
//         /// </summary>
//         public int Result { get; set; }

//         /// <summary>
//         /// Gets or sets a value indicating whether any subcommands were executed.
//         /// </summary>
//         public bool AnySubcommandsExecuted { get; set; }
//     }
// }