// using System.CommandLine;
// using Altinn.Authorization.Hosting.Utils;
// using Azure.Core;
// using Azure.Identity;
// using Microsoft.Extensions.Logging;
// using Npgsql;
// using Yuniql.Core;
// using Yuniql.PostgreSql;

// namespace Altinn.Authorization.Hosting.Commands;

// /// <summary>
// /// Command class responsible for handling PostgreSQL database migrations.
// /// </summary>
// public partial class MigrateCommand
// {
//     /// <summary>
//     /// Constructs the command for migrating the PostgreSQL database.
//     /// </summary>
//     /// <returns>The configured command.</returns>
//     public static Command GetCommand()
//     {
//         var cmd = new Command("migrate", "Migrate PostgreSQL database");

//         // Define arguments
//         var host = new Argument<string>("Host", () => "localhost:5050", "Database host");
//         var database = new Argument<string>("Database", "Database name");

//         // Define options
//         var username = new Option<string>("--username", () => "root", "Database username");
//         var password = new Option<string>("--password", () => "root", "Database password");
//         var principalId = new Option<string>("--principal-id", () => Environment.GetEnvironmentVariable("Azure__PrincipalId"), "Managed identity Id");

//         cmd.AddArgument(host);
//         cmd.AddArgument(database);
//         cmd.AddOption(username);
//         cmd.AddOption(password);
//         cmd.AddOption(principalId);

//         // Set the handler method for this command
//         cmd.SetHandler(Handler, host, database, username, password, principalId);

//         return cmd;
//     }

//     internal static async Task ExecuteUsingEnv()
//     {
//         var host = Environment.GetEnvironmentVariable("Postgres__Host");
//         var database = Environment.GetEnvironmentVariable("Postgres__Database");
//         var principalId = Environment.GetEnvironmentVariable("Azure__PrincipalId");
//         if (string.IsNullOrEmpty(host) || string.IsNullOrEmpty(database) || string.IsNullOrEmpty(principalId))
//         {
//             StartupLogger.Logger.LogInformation("missing args in migrate {host} {database} {principalId}", host, database, principalId);
//             return;
//         }

//         StartupLogger.Logger.LogInformation("running migrate {host} {database} {principalId}", host, database, principalId);

//         await Handler(host, database, null, null, principalId);
//         throw new NotImplementedException();
//     }

//     /// <summary>
//     /// Handles the execution of the migration command.
//     /// </summary>
//     /// <param name="host">The database host address.</param>
//     /// <param name="database">The name of the database to migrate.</param>
//     /// <param name="username">The database username (used if not using managed identity).</param>
//     /// <param name="password">The database password (used if not using managed identity).</param>
//     /// <param name="principalId">The Managed Identity Id for Azure AD authentication (optional).</param>
//     /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
//     public static async Task Handler(string host, string database, string username, string password, string principalId)
//     {
//         Log.Command(StartupLogger.Logger);

//         var configuration = Configuration.Instance;
//         configuration.Platform = SUPPORTED_DATABASES.POSTGRESQL;
//         configuration.Workspace = Path.Combine(Environment.CurrentDirectory, "Migrations");
//         configuration.IsAutoCreateDatabase = false;

//         var connectionString = new NpgsqlConnectionStringBuilder()
//         {
//             Host = host,
//             Database = database,
//             Username = username,
//             Password = password,
//             SslMode = SslMode.Prefer
//         };

//         if (!string.IsNullOrEmpty(principalId))
//         {
//             Log.UseManagedIdentity(StartupLogger.Logger, principalId);
//             connectionString.Username = "AzureAd"; // Placeholder for Azure AD authentication
//             var accessToken = await new ManagedIdentityCredential(principalId).GetTokenAsync(new TokenRequestContext(["https://ossrdbms-aad.database.windows.net/.default"]));
//             connectionString.Password = accessToken.Token;
//         }
//         else
//         {
//             Log.UseUsernameAndPassword(StartupLogger.Logger, username);
//             connectionString.Username = username;
//             connectionString.Password = password;
//         }

//         configuration.ConnectionString = connectionString.ToString();

//         CreateMigrationService().Run();
//     }

//     /// <summary>
//     /// Creates an instance of the migration service.
//     /// </summary>
//     /// <returns>An instance of <see cref="IMigrationService"/> configured for PostgreSQL.</returns>
//     private static IMigrationService CreateMigrationService()
//     {
//         var tracer = new YuniqlTraceService();
//         var factory = new MigrationServiceFactory(tracer);
//         return factory
//             .Create(
//                 new PostgreSqlDataService(tracer),
//                 new PostgreSqlBulkImportService(tracer)
//             );
//     }

//     /// <summary>
//     /// Contains logging methods for different scenarios in the MigrateCommand.
//     /// </summary>
//     private static partial class Log
//     {
//         [LoggerMessage(EventId = 100, Level = LogLevel.Information, Message = "Migrating PostgreSQL database.")]
//         internal static partial void Command(ILogger logger);

//         [LoggerMessage(EventId = 101, Level = LogLevel.Information, Message = "Migrating PostgreSQL database using user {username} for authentication.")]
//         internal static partial void UseUsernameAndPassword(ILogger logger, string username);

//         [LoggerMessage(EventId = 102, Level = LogLevel.Information, Message = "Migrating PostgreSQL database using principal ID {principalId} for authentication.")]
//         internal static partial void UseManagedIdentity(ILogger logger, string principalId);
//     }
// }
